{"mappings":"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","sources":["<anon>","node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fetch/formdata.js"],"sourcesContent":["import $5Yb6D$pythonversioncheck3f48d3eejs2 from \"./python-version-check.3f48d3ee.js\";\nimport $5Yb6D$pythonversioncheck92c00e26js from \"./python-version-check.92c00e26.js\";\nimport $5Yb6D$pythonversionchecka81ff9ccjs2 from \"./python-version-check.a81ff9cc.js\";\nimport $5Yb6D$pythonversioncheck801bb0f1js from \"./python-version-check.801bb0f1.js\";\nimport {Blob as $5Yb6D$Blob, File as $5Yb6D$File} from \"buffer\";\n\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire5a65\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire5a65\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"a1z3z\", function(module, exports) {\n'use strict';\n\nvar $74c530e4e97f0224$require$isBlobLike = $5Yb6D$pythonversioncheck3f48d3eejs.isBlobLike;\nvar $74c530e4e97f0224$require$toUSVString = $5Yb6D$pythonversioncheck3f48d3eejs2.toUSVString;\nvar $74c530e4e97f0224$require$makeIterator = $5Yb6D$pythonversioncheck3f48d3eejs1.makeIterator;\n\nvar $74c530e4e97f0224$require$kState = $5Yb6D$pythonversioncheck92c00e26js.kState;\n\nvar $74c530e4e97f0224$require$UndiciFile = $5Yb6D$pythonversionchecka81ff9ccjs.File;\nvar $74c530e4e97f0224$require$FileLike = $5Yb6D$pythonversionchecka81ff9ccjs1.FileLike;\nvar $74c530e4e97f0224$require$isFileLike = $5Yb6D$pythonversionchecka81ff9ccjs2.isFileLike;\n\nvar $74c530e4e97f0224$require$webidl = $5Yb6D$pythonversioncheck801bb0f1js.webidl;\n\nvar $74c530e4e97f0224$require$Blob = $5Yb6D$Blob;\nvar $74c530e4e97f0224$require$NativeFile = $5Yb6D$File;\n/** @type {globalThis['File']} */ const $74c530e4e97f0224$var$File = $74c530e4e97f0224$require$NativeFile ?? $74c530e4e97f0224$require$UndiciFile;\n// https://xhr.spec.whatwg.org/#formdata\nclass $74c530e4e97f0224$var$FormData {\n    constructor(form){\n        if (form !== undefined) throw $74c530e4e97f0224$require$webidl.errors.conversionFailed({\n            prefix: 'FormData constructor',\n            argument: 'Argument 1',\n            types: [\n                'undefined'\n            ]\n        });\n        this[$74c530e4e97f0224$require$kState] = [];\n    }\n    append(name, value, filename) {\n        $74c530e4e97f0224$require$webidl.brandCheck(this, $74c530e4e97f0224$var$FormData);\n        $74c530e4e97f0224$require$webidl.argumentLengthCheck(arguments, 2, {\n            header: 'FormData.append'\n        });\n        if (arguments.length === 3 && !$74c530e4e97f0224$require$isBlobLike(value)) throw new TypeError(\"Failed to execute 'append' on 'FormData': parameter 2 is not of type 'Blob'\");\n        // 1. Let value be value if given; otherwise blobValue.\n        name = $74c530e4e97f0224$require$webidl.converters.USVString(name);\n        value = $74c530e4e97f0224$require$isBlobLike(value) ? $74c530e4e97f0224$require$webidl.converters.Blob(value, {\n            strict: false\n        }) : $74c530e4e97f0224$require$webidl.converters.USVString(value);\n        filename = arguments.length === 3 ? $74c530e4e97f0224$require$webidl.converters.USVString(filename) : undefined;\n        // 2. Let entry be the result of creating an entry with\n        // name, value, and filename if given.\n        const entry = $74c530e4e97f0224$var$makeEntry(name, value, filename);\n        // 3. Append entry to this’s entry list.\n        this[$74c530e4e97f0224$require$kState].push(entry);\n    }\n    delete(name) {\n        $74c530e4e97f0224$require$webidl.brandCheck(this, $74c530e4e97f0224$var$FormData);\n        $74c530e4e97f0224$require$webidl.argumentLengthCheck(arguments, 1, {\n            header: 'FormData.delete'\n        });\n        name = $74c530e4e97f0224$require$webidl.converters.USVString(name);\n        // The delete(name) method steps are to remove all entries whose name\n        // is name from this’s entry list.\n        this[$74c530e4e97f0224$require$kState] = this[$74c530e4e97f0224$require$kState].filter((entry)=>entry.name !== name);\n    }\n    get(name) {\n        $74c530e4e97f0224$require$webidl.brandCheck(this, $74c530e4e97f0224$var$FormData);\n        $74c530e4e97f0224$require$webidl.argumentLengthCheck(arguments, 1, {\n            header: 'FormData.get'\n        });\n        name = $74c530e4e97f0224$require$webidl.converters.USVString(name);\n        // 1. If there is no entry whose name is name in this’s entry list,\n        // then return null.\n        const idx = this[$74c530e4e97f0224$require$kState].findIndex((entry)=>entry.name === name);\n        if (idx === -1) return null;\n        // 2. Return the value of the first entry whose name is name from\n        // this’s entry list.\n        return this[$74c530e4e97f0224$require$kState][idx].value;\n    }\n    getAll(name) {\n        $74c530e4e97f0224$require$webidl.brandCheck(this, $74c530e4e97f0224$var$FormData);\n        $74c530e4e97f0224$require$webidl.argumentLengthCheck(arguments, 1, {\n            header: 'FormData.getAll'\n        });\n        name = $74c530e4e97f0224$require$webidl.converters.USVString(name);\n        // 1. If there is no entry whose name is name in this’s entry list,\n        // then return the empty list.\n        // 2. Return the values of all entries whose name is name, in order,\n        // from this’s entry list.\n        return this[$74c530e4e97f0224$require$kState].filter((entry)=>entry.name === name).map((entry)=>entry.value);\n    }\n    has(name) {\n        $74c530e4e97f0224$require$webidl.brandCheck(this, $74c530e4e97f0224$var$FormData);\n        $74c530e4e97f0224$require$webidl.argumentLengthCheck(arguments, 1, {\n            header: 'FormData.has'\n        });\n        name = $74c530e4e97f0224$require$webidl.converters.USVString(name);\n        // The has(name) method steps are to return true if there is an entry\n        // whose name is name in this’s entry list; otherwise false.\n        return this[$74c530e4e97f0224$require$kState].findIndex((entry)=>entry.name === name) !== -1;\n    }\n    set(name, value, filename) {\n        $74c530e4e97f0224$require$webidl.brandCheck(this, $74c530e4e97f0224$var$FormData);\n        $74c530e4e97f0224$require$webidl.argumentLengthCheck(arguments, 2, {\n            header: 'FormData.set'\n        });\n        if (arguments.length === 3 && !$74c530e4e97f0224$require$isBlobLike(value)) throw new TypeError(\"Failed to execute 'set' on 'FormData': parameter 2 is not of type 'Blob'\");\n        // The set(name, value) and set(name, blobValue, filename) method steps\n        // are:\n        // 1. Let value be value if given; otherwise blobValue.\n        name = $74c530e4e97f0224$require$webidl.converters.USVString(name);\n        value = $74c530e4e97f0224$require$isBlobLike(value) ? $74c530e4e97f0224$require$webidl.converters.Blob(value, {\n            strict: false\n        }) : $74c530e4e97f0224$require$webidl.converters.USVString(value);\n        filename = arguments.length === 3 ? $74c530e4e97f0224$require$toUSVString(filename) : undefined;\n        // 2. Let entry be the result of creating an entry with name, value, and\n        // filename if given.\n        const entry = $74c530e4e97f0224$var$makeEntry(name, value, filename);\n        // 3. If there are entries in this’s entry list whose name is name, then\n        // replace the first such entry with entry and remove the others.\n        const idx = this[$74c530e4e97f0224$require$kState].findIndex((entry)=>entry.name === name);\n        if (idx !== -1) this[$74c530e4e97f0224$require$kState] = [\n            ...this[$74c530e4e97f0224$require$kState].slice(0, idx),\n            entry,\n            ...this[$74c530e4e97f0224$require$kState].slice(idx + 1).filter((entry)=>entry.name !== name)\n        ];\n        else // 4. Otherwise, append entry to this’s entry list.\n        this[$74c530e4e97f0224$require$kState].push(entry);\n    }\n    entries() {\n        $74c530e4e97f0224$require$webidl.brandCheck(this, $74c530e4e97f0224$var$FormData);\n        return $74c530e4e97f0224$require$makeIterator(()=>this[$74c530e4e97f0224$require$kState].map((pair)=>[\n                    pair.name,\n                    pair.value\n                ]), 'FormData', 'key+value');\n    }\n    keys() {\n        $74c530e4e97f0224$require$webidl.brandCheck(this, $74c530e4e97f0224$var$FormData);\n        return $74c530e4e97f0224$require$makeIterator(()=>this[$74c530e4e97f0224$require$kState].map((pair)=>[\n                    pair.name,\n                    pair.value\n                ]), 'FormData', 'key');\n    }\n    values() {\n        $74c530e4e97f0224$require$webidl.brandCheck(this, $74c530e4e97f0224$var$FormData);\n        return $74c530e4e97f0224$require$makeIterator(()=>this[$74c530e4e97f0224$require$kState].map((pair)=>[\n                    pair.name,\n                    pair.value\n                ]), 'FormData', 'value');\n    }\n    /**\n   * @param {(value: string, key: string, self: FormData) => void} callbackFn\n   * @param {unknown} thisArg\n   */ forEach(callbackFn, thisArg = globalThis) {\n        $74c530e4e97f0224$require$webidl.brandCheck(this, $74c530e4e97f0224$var$FormData);\n        $74c530e4e97f0224$require$webidl.argumentLengthCheck(arguments, 1, {\n            header: 'FormData.forEach'\n        });\n        if (typeof callbackFn !== 'function') throw new TypeError(\"Failed to execute 'forEach' on 'FormData': parameter 1 is not of type 'Function'.\");\n        for (const [key, value] of this)callbackFn.apply(thisArg, [\n            value,\n            key,\n            this\n        ]);\n    }\n}\n$74c530e4e97f0224$var$FormData.prototype[Symbol.iterator] = $74c530e4e97f0224$var$FormData.prototype.entries;\nObject.defineProperties($74c530e4e97f0224$var$FormData.prototype, {\n    [Symbol.toStringTag]: {\n        value: 'FormData',\n        configurable: true\n    }\n});\n/**\n * @see https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#create-an-entry\n * @param {string} name\n * @param {string|Blob} value\n * @param {?string} filename\n * @returns\n */ function $74c530e4e97f0224$var$makeEntry(name, value, filename) {\n    // 1. Set name to the result of converting name into a scalar value string.\n    // \"To convert a string into a scalar value string, replace any surrogates\n    //  with U+FFFD.\"\n    // see: https://nodejs.org/dist/latest-v18.x/docs/api/buffer.html#buftostringencoding-start-end\n    name = Buffer.from(name).toString('utf8');\n    // 2. If value is a string, then set value to the result of converting\n    //    value into a scalar value string.\n    if (typeof value === 'string') value = Buffer.from(value).toString('utf8');\n    else {\n        // 3. Otherwise:\n        // 1. If value is not a File object, then set value to a new File object,\n        //    representing the same bytes, whose name attribute value is \"blob\"\n        if (!$74c530e4e97f0224$require$isFileLike(value)) value = value instanceof $74c530e4e97f0224$require$Blob ? new $74c530e4e97f0224$var$File([\n            value\n        ], 'blob', {\n            type: value.type\n        }) : new $74c530e4e97f0224$require$FileLike(value, 'blob', {\n            type: value.type\n        });\n        // 2. If filename is given, then set value to a new File object,\n        //    representing the same bytes, whose name attribute is filename.\n        if (filename !== undefined) {\n            /** @type {FilePropertyBag} */ const options = {\n                type: value.type,\n                lastModified: value.lastModified\n            };\n            value = $74c530e4e97f0224$require$NativeFile && value instanceof $74c530e4e97f0224$require$NativeFile || value instanceof $74c530e4e97f0224$require$UndiciFile ? new $74c530e4e97f0224$var$File([\n                value\n            ], filename, options) : new $74c530e4e97f0224$require$FileLike(value, filename, options);\n        }\n    }\n    // 4. Return an entry whose name is name and whose value is value.\n    return {\n        name: name,\n        value: value\n    };\n}\nmodule.exports = {\n    FormData: $74c530e4e97f0224$var$FormData\n};\n\n});\n\n\nparcelRequire(\"a1z3z\");\n\n//# sourceMappingURL=python-version-check.34871282.js.map\n","'use strict'\n\nconst { isBlobLike, toUSVString, makeIterator } = require('./util')\nconst { kState } = require('./symbols')\nconst { File: UndiciFile, FileLike, isFileLike } = require('./file')\nconst { webidl } = require('./webidl')\nconst { Blob, File: NativeFile } = require('buffer')\n\n/** @type {globalThis['File']} */\nconst File = NativeFile ?? UndiciFile\n\n// https://xhr.spec.whatwg.org/#formdata\nclass FormData {\n  constructor (form) {\n    if (form !== undefined) {\n      throw webidl.errors.conversionFailed({\n        prefix: 'FormData constructor',\n        argument: 'Argument 1',\n        types: ['undefined']\n      })\n    }\n\n    this[kState] = []\n  }\n\n  append (name, value, filename = undefined) {\n    webidl.brandCheck(this, FormData)\n\n    webidl.argumentLengthCheck(arguments, 2, { header: 'FormData.append' })\n\n    if (arguments.length === 3 && !isBlobLike(value)) {\n      throw new TypeError(\n        \"Failed to execute 'append' on 'FormData': parameter 2 is not of type 'Blob'\"\n      )\n    }\n\n    // 1. Let value be value if given; otherwise blobValue.\n\n    name = webidl.converters.USVString(name)\n    value = isBlobLike(value)\n      ? webidl.converters.Blob(value, { strict: false })\n      : webidl.converters.USVString(value)\n    filename = arguments.length === 3\n      ? webidl.converters.USVString(filename)\n      : undefined\n\n    // 2. Let entry be the result of creating an entry with\n    // name, value, and filename if given.\n    const entry = makeEntry(name, value, filename)\n\n    // 3. Append entry to this’s entry list.\n    this[kState].push(entry)\n  }\n\n  delete (name) {\n    webidl.brandCheck(this, FormData)\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'FormData.delete' })\n\n    name = webidl.converters.USVString(name)\n\n    // The delete(name) method steps are to remove all entries whose name\n    // is name from this’s entry list.\n    this[kState] = this[kState].filter(entry => entry.name !== name)\n  }\n\n  get (name) {\n    webidl.brandCheck(this, FormData)\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'FormData.get' })\n\n    name = webidl.converters.USVString(name)\n\n    // 1. If there is no entry whose name is name in this’s entry list,\n    // then return null.\n    const idx = this[kState].findIndex((entry) => entry.name === name)\n    if (idx === -1) {\n      return null\n    }\n\n    // 2. Return the value of the first entry whose name is name from\n    // this’s entry list.\n    return this[kState][idx].value\n  }\n\n  getAll (name) {\n    webidl.brandCheck(this, FormData)\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'FormData.getAll' })\n\n    name = webidl.converters.USVString(name)\n\n    // 1. If there is no entry whose name is name in this’s entry list,\n    // then return the empty list.\n    // 2. Return the values of all entries whose name is name, in order,\n    // from this’s entry list.\n    return this[kState]\n      .filter((entry) => entry.name === name)\n      .map((entry) => entry.value)\n  }\n\n  has (name) {\n    webidl.brandCheck(this, FormData)\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'FormData.has' })\n\n    name = webidl.converters.USVString(name)\n\n    // The has(name) method steps are to return true if there is an entry\n    // whose name is name in this’s entry list; otherwise false.\n    return this[kState].findIndex((entry) => entry.name === name) !== -1\n  }\n\n  set (name, value, filename = undefined) {\n    webidl.brandCheck(this, FormData)\n\n    webidl.argumentLengthCheck(arguments, 2, { header: 'FormData.set' })\n\n    if (arguments.length === 3 && !isBlobLike(value)) {\n      throw new TypeError(\n        \"Failed to execute 'set' on 'FormData': parameter 2 is not of type 'Blob'\"\n      )\n    }\n\n    // The set(name, value) and set(name, blobValue, filename) method steps\n    // are:\n\n    // 1. Let value be value if given; otherwise blobValue.\n\n    name = webidl.converters.USVString(name)\n    value = isBlobLike(value)\n      ? webidl.converters.Blob(value, { strict: false })\n      : webidl.converters.USVString(value)\n    filename = arguments.length === 3\n      ? toUSVString(filename)\n      : undefined\n\n    // 2. Let entry be the result of creating an entry with name, value, and\n    // filename if given.\n    const entry = makeEntry(name, value, filename)\n\n    // 3. If there are entries in this’s entry list whose name is name, then\n    // replace the first such entry with entry and remove the others.\n    const idx = this[kState].findIndex((entry) => entry.name === name)\n    if (idx !== -1) {\n      this[kState] = [\n        ...this[kState].slice(0, idx),\n        entry,\n        ...this[kState].slice(idx + 1).filter((entry) => entry.name !== name)\n      ]\n    } else {\n      // 4. Otherwise, append entry to this’s entry list.\n      this[kState].push(entry)\n    }\n  }\n\n  entries () {\n    webidl.brandCheck(this, FormData)\n\n    return makeIterator(\n      () => this[kState].map(pair => [pair.name, pair.value]),\n      'FormData',\n      'key+value'\n    )\n  }\n\n  keys () {\n    webidl.brandCheck(this, FormData)\n\n    return makeIterator(\n      () => this[kState].map(pair => [pair.name, pair.value]),\n      'FormData',\n      'key'\n    )\n  }\n\n  values () {\n    webidl.brandCheck(this, FormData)\n\n    return makeIterator(\n      () => this[kState].map(pair => [pair.name, pair.value]),\n      'FormData',\n      'value'\n    )\n  }\n\n  /**\n   * @param {(value: string, key: string, self: FormData) => void} callbackFn\n   * @param {unknown} thisArg\n   */\n  forEach (callbackFn, thisArg = globalThis) {\n    webidl.brandCheck(this, FormData)\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'FormData.forEach' })\n\n    if (typeof callbackFn !== 'function') {\n      throw new TypeError(\n        \"Failed to execute 'forEach' on 'FormData': parameter 1 is not of type 'Function'.\"\n      )\n    }\n\n    for (const [key, value] of this) {\n      callbackFn.apply(thisArg, [value, key, this])\n    }\n  }\n}\n\nFormData.prototype[Symbol.iterator] = FormData.prototype.entries\n\nObject.defineProperties(FormData.prototype, {\n  [Symbol.toStringTag]: {\n    value: 'FormData',\n    configurable: true\n  }\n})\n\n/**\n * @see https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#create-an-entry\n * @param {string} name\n * @param {string|Blob} value\n * @param {?string} filename\n * @returns\n */\nfunction makeEntry (name, value, filename) {\n  // 1. Set name to the result of converting name into a scalar value string.\n  // \"To convert a string into a scalar value string, replace any surrogates\n  //  with U+FFFD.\"\n  // see: https://nodejs.org/dist/latest-v18.x/docs/api/buffer.html#buftostringencoding-start-end\n  name = Buffer.from(name).toString('utf8')\n\n  // 2. If value is a string, then set value to the result of converting\n  //    value into a scalar value string.\n  if (typeof value === 'string') {\n    value = Buffer.from(value).toString('utf8')\n  } else {\n    // 3. Otherwise:\n\n    // 1. If value is not a File object, then set value to a new File object,\n    //    representing the same bytes, whose name attribute value is \"blob\"\n    if (!isFileLike(value)) {\n      value = value instanceof Blob\n        ? new File([value], 'blob', { type: value.type })\n        : new FileLike(value, 'blob', { type: value.type })\n    }\n\n    // 2. If filename is given, then set value to a new File object,\n    //    representing the same bytes, whose name attribute is filename.\n    if (filename !== undefined) {\n      /** @type {FilePropertyBag} */\n      const options = {\n        type: value.type,\n        lastModified: value.lastModified\n      }\n\n      value = (NativeFile && value instanceof NativeFile) || value instanceof UndiciFile\n        ? new File([value], filename, options)\n        : new FileLike(value, filename, options)\n    }\n  }\n\n  // 4. Return an entry whose name is name and whose value is value.\n  return { name, value }\n}\n\nmodule.exports = { FormData }\n"],"names":["$5Yb6D$pythonversioncheck3f48d3eejs2","$5Yb6D$pythonversioncheck92c00e26js","$5Yb6D$pythonversionchecka81ff9ccjs2","$5Yb6D$pythonversioncheck801bb0f1js","Blob","$5Yb6D$Blob","File","$5Yb6D$File","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","$74c530e4e97f0224$require$isBlobLike","$5Yb6D$pythonversioncheck3f48d3eejs","isBlobLike","$74c530e4e97f0224$require$toUSVString","toUSVString","$74c530e4e97f0224$require$makeIterator","$5Yb6D$pythonversioncheck3f48d3eejs1","makeIterator","$74c530e4e97f0224$require$kState","kState","$74c530e4e97f0224$require$UndiciFile","$5Yb6D$pythonversionchecka81ff9ccjs","$74c530e4e97f0224$require$FileLike","$5Yb6D$pythonversionchecka81ff9ccjs1","FileLike","$74c530e4e97f0224$require$isFileLike","isFileLike","$74c530e4e97f0224$require$webidl","webidl","$74c530e4e97f0224$var$File","$74c530e4e97f0224$require$NativeFile","$74c530e4e97f0224$var$FormData","form","undefined","errors","conversionFailed","prefix","argument","types","append","name","value","filename","brandCheck","argumentLengthCheck","arguments","header","length","TypeError","converters","USVString","strict","entry","$74c530e4e97f0224$var$makeEntry","push","delete","filter","get","idx","findIndex","getAll","map","has","set","slice","entries","pair","keys","values","forEach","callbackFn","thisArg","key","apply","Buffer","from","toString","type","options","lastModified","prototype","Symbol","iterator","Object","defineProperties","toStringTag","configurable","FormData"],"version":3,"file":"python-version-check.34871282.js.map","sourceRoot":"../"}