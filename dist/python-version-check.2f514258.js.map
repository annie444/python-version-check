{"mappings":"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","sources":["<anon>","node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/core/request.js"],"sourcesContent":["import $8hD8m$pythonversioncheckdba5a2d4js1 from \"./python-version-check.dba5a2d4.js\";\nimport $8hD8m$pythonversioncheckebf2a848js2 from \"./python-version-check.ebf2a848.js\";\nimport $8hD8m$pythonversioncheck7ed1514ejs10 from \"./python-version-check.7ed1514e.js\";\nimport $8hD8m$pythonversioncheck152f8bbajs from \"./python-version-check.152f8bba.js\";\nimport * as $8hD8m$assert from \"assert\";\n\nvar $c2599bb4e4cabbe9$exports = {};\n'use strict';\n\nvar $c2599bb4e4cabbe9$require$InvalidArgumentError = $8hD8m$pythonversioncheckdba5a2d4js.InvalidArgumentError;\nvar $c2599bb4e4cabbe9$require$NotSupportedError = $8hD8m$pythonversioncheckdba5a2d4js1.NotSupportedError;\n\n\nvar $c2599bb4e4cabbe9$require$kHTTP2BuildRequest = $8hD8m$pythonversioncheckebf2a848js1.kHTTP2BuildRequest;\nvar $c2599bb4e4cabbe9$require$kHTTP2CopyHeaders = $8hD8m$pythonversioncheckebf2a848js2.kHTTP2CopyHeaders;\nvar $c2599bb4e4cabbe9$require$kHTTP1BuildRequest = $8hD8m$pythonversioncheckebf2a848js.kHTTP1BuildRequest;\n\n// tokenRegExp and headerCharRegex have been lifted from\n// https://github.com/nodejs/node/blob/main/lib/_http_common.js\n/**\n * Verifies that the given val is a valid HTTP token\n * per the rules defined in RFC 7230\n * See https://tools.ietf.org/html/rfc7230#section-3.2.6\n */ const $c2599bb4e4cabbe9$var$tokenRegExp = /^[\\^_`a-zA-Z\\-0-9!#$%&'*+.|~]+$/;\n/**\n * Matches if val contains an invalid field-vchar\n *  field-value    = *( field-content / obs-fold )\n *  field-content  = field-vchar [ 1*( SP / HTAB ) field-vchar ]\n *  field-vchar    = VCHAR / obs-text\n */ const $c2599bb4e4cabbe9$var$headerCharRegex = /[^\\t\\x20-\\x7e\\x80-\\xff]/;\n// Verifies that a given path is valid does not contain control chars \\x00 to \\x20\nconst $c2599bb4e4cabbe9$var$invalidPathRegex = /[^\\u0021-\\u00ff]/;\nconst $c2599bb4e4cabbe9$var$kHandler = Symbol('handler');\nconst $c2599bb4e4cabbe9$var$channels = {};\nlet $c2599bb4e4cabbe9$var$extractBody;\n\ntry {\n    const diagnosticsChannel = $c2599bb4e4cabbe9$import$6aef8f873045faa5;\n    $c2599bb4e4cabbe9$var$channels.create = diagnosticsChannel.channel('undici:request:create');\n    $c2599bb4e4cabbe9$var$channels.bodySent = diagnosticsChannel.channel('undici:request:bodySent');\n    $c2599bb4e4cabbe9$var$channels.headers = diagnosticsChannel.channel('undici:request:headers');\n    $c2599bb4e4cabbe9$var$channels.trailers = diagnosticsChannel.channel('undici:request:trailers');\n    $c2599bb4e4cabbe9$var$channels.error = diagnosticsChannel.channel('undici:request:error');\n} catch  {\n    $c2599bb4e4cabbe9$var$channels.create = {\n        hasSubscribers: false\n    };\n    $c2599bb4e4cabbe9$var$channels.bodySent = {\n        hasSubscribers: false\n    };\n    $c2599bb4e4cabbe9$var$channels.headers = {\n        hasSubscribers: false\n    };\n    $c2599bb4e4cabbe9$var$channels.trailers = {\n        hasSubscribers: false\n    };\n    $c2599bb4e4cabbe9$var$channels.error = {\n        hasSubscribers: false\n    };\n}\n\nclass $c2599bb4e4cabbe9$var$Request {\n    constructor(origin, { path: path, method: method, body: body, headers: headers, query: query, idempotent: idempotent, blocking: blocking, upgrade: upgrade, headersTimeout: headersTimeout, bodyTimeout: bodyTimeout, reset: reset, throwOnError: throwOnError, expectContinue: expectContinue }, handler){\n        if (typeof path !== 'string') throw new $c2599bb4e4cabbe9$require$InvalidArgumentError('path must be a string');\n        else if (path[0] !== '/' && !(path.startsWith('http://') || path.startsWith('https://')) && method !== 'CONNECT') throw new $c2599bb4e4cabbe9$require$InvalidArgumentError('path must be an absolute URL or start with a slash');\n        else if ($c2599bb4e4cabbe9$var$invalidPathRegex.exec(path) !== null) throw new $c2599bb4e4cabbe9$require$InvalidArgumentError('invalid request path');\n        if (typeof method !== 'string') throw new $c2599bb4e4cabbe9$require$InvalidArgumentError('method must be a string');\n        else if ($c2599bb4e4cabbe9$var$tokenRegExp.exec(method) === null) throw new $c2599bb4e4cabbe9$require$InvalidArgumentError('invalid request method');\n        if (upgrade && typeof upgrade !== 'string') throw new $c2599bb4e4cabbe9$require$InvalidArgumentError('upgrade must be a string');\n        if (headersTimeout != null && (!Number.isFinite(headersTimeout) || headersTimeout < 0)) throw new $c2599bb4e4cabbe9$require$InvalidArgumentError('invalid headersTimeout');\n        if (bodyTimeout != null && (!Number.isFinite(bodyTimeout) || bodyTimeout < 0)) throw new $c2599bb4e4cabbe9$require$InvalidArgumentError('invalid bodyTimeout');\n        if (reset != null && typeof reset !== 'boolean') throw new $c2599bb4e4cabbe9$require$InvalidArgumentError('invalid reset');\n        if (expectContinue != null && typeof expectContinue !== 'boolean') throw new $c2599bb4e4cabbe9$require$InvalidArgumentError('invalid expectContinue');\n        this.headersTimeout = headersTimeout;\n        this.bodyTimeout = bodyTimeout;\n        this.throwOnError = throwOnError === true;\n        this.method = method;\n        this.abort = null;\n        if (body == null) this.body = null;\n        else if ($8hD8m$pythonversioncheck7ed1514ejs7.isStream(body)) {\n            this.body = body;\n            const rState = this.body._readableState;\n            if (!rState || !rState.autoDestroy) {\n                this.endHandler = function autoDestroy() {\n                    $8hD8m$pythonversioncheck7ed1514ejs1.destroy(this);\n                };\n                this.body.on('end', this.endHandler);\n            }\n            this.errorHandler = (err)=>{\n                if (this.abort) this.abort(err);\n                else this.error = err;\n            };\n            this.body.on('error', this.errorHandler);\n        } else if ($8hD8m$pythonversioncheck7ed1514ejs4.isBuffer(body)) this.body = body.byteLength ? body : null;\n        else if (ArrayBuffer.isView(body)) this.body = body.buffer.byteLength ? Buffer.from(body.buffer, body.byteOffset, body.byteLength) : null;\n        else if (body instanceof ArrayBuffer) this.body = body.byteLength ? Buffer.from(body) : null;\n        else if (typeof body === 'string') this.body = body.length ? Buffer.from(body) : null;\n        else if ($8hD8m$pythonversioncheck7ed1514ejs5.isFormDataLike(body) || $8hD8m$pythonversioncheck7ed1514ejs6.isIterable(body) || $8hD8m$pythonversioncheck7ed1514ejs3.isBlobLike(body)) this.body = body;\n        else throw new $c2599bb4e4cabbe9$require$InvalidArgumentError('body must be a string, a Buffer, a Readable stream, an iterable, or an async iterable');\n        this.completed = false;\n        this.aborted = false;\n        this.upgrade = upgrade || null;\n        this.path = query ? $8hD8m$pythonversioncheck7ed1514ejs.buildURL(path, query) : path;\n        this.origin = origin;\n        this.idempotent = idempotent == null ? method === 'HEAD' || method === 'GET' : idempotent;\n        this.blocking = blocking == null ? false : blocking;\n        this.reset = reset == null ? null : reset;\n        this.host = null;\n        this.contentLength = null;\n        this.contentType = null;\n        this.headers = '';\n        // Only for H2\n        this.expectContinue = expectContinue != null ? expectContinue : false;\n        if (Array.isArray(headers)) {\n            if (headers.length % 2 !== 0) throw new $c2599bb4e4cabbe9$require$InvalidArgumentError('headers array must be even');\n            for(let i = 0; i < headers.length; i += 2)$c2599bb4e4cabbe9$var$processHeader(this, headers[i], headers[i + 1]);\n        } else if (headers && typeof headers === 'object') {\n            const keys = Object.keys(headers);\n            for(let i = 0; i < keys.length; i++){\n                const key = keys[i];\n                $c2599bb4e4cabbe9$var$processHeader(this, key, headers[key]);\n            }\n        } else if (headers != null) throw new $c2599bb4e4cabbe9$require$InvalidArgumentError('headers must be an object or an array');\n        if ($8hD8m$pythonversioncheck7ed1514ejs5.isFormDataLike(this.body)) {\n            if ($8hD8m$pythonversioncheck7ed1514ejs8.nodeMajor < 16 || $8hD8m$pythonversioncheck7ed1514ejs8.nodeMajor === 16 && $8hD8m$pythonversioncheck7ed1514ejs9.nodeMinor < 8) throw new $c2599bb4e4cabbe9$require$InvalidArgumentError('Form-Data bodies are only supported in node v16.8 and newer.');\n            if (!$c2599bb4e4cabbe9$var$extractBody) $c2599bb4e4cabbe9$var$extractBody = $8hD8m$pythonversioncheck152f8bbajs.extractBody;\n            const [bodyStream, contentType] = $c2599bb4e4cabbe9$var$extractBody(body);\n            if (this.contentType == null) {\n                this.contentType = contentType;\n                this.headers += `content-type: ${contentType}\\r\\n`;\n            }\n            this.body = bodyStream.stream;\n            this.contentLength = bodyStream.length;\n        } else if ($8hD8m$pythonversioncheck7ed1514ejs3.isBlobLike(body) && this.contentType == null && body.type) {\n            this.contentType = body.type;\n            this.headers += `content-type: ${body.type}\\r\\n`;\n        }\n        $8hD8m$pythonversioncheck7ed1514ejs10.validateHandler(handler, method, upgrade);\n        this.servername = $8hD8m$pythonversioncheck7ed1514ejs2.getServerName(this.host);\n        this[$c2599bb4e4cabbe9$var$kHandler] = handler;\n        if ($c2599bb4e4cabbe9$var$channels.create.hasSubscribers) $c2599bb4e4cabbe9$var$channels.create.publish({\n            request: this\n        });\n    }\n    onBodySent(chunk) {\n        if (this[$c2599bb4e4cabbe9$var$kHandler].onBodySent) try {\n            return this[$c2599bb4e4cabbe9$var$kHandler].onBodySent(chunk);\n        } catch (err) {\n            this.abort(err);\n        }\n    }\n    onRequestSent() {\n        if ($c2599bb4e4cabbe9$var$channels.bodySent.hasSubscribers) $c2599bb4e4cabbe9$var$channels.bodySent.publish({\n            request: this\n        });\n        if (this[$c2599bb4e4cabbe9$var$kHandler].onRequestSent) try {\n            return this[$c2599bb4e4cabbe9$var$kHandler].onRequestSent();\n        } catch (err) {\n            this.abort(err);\n        }\n    }\n    onConnect(abort) {\n        $8hD8m$assert(!this.aborted);\n        $8hD8m$assert(!this.completed);\n        if (this.error) abort(this.error);\n        else {\n            this.abort = abort;\n            return this[$c2599bb4e4cabbe9$var$kHandler].onConnect(abort);\n        }\n    }\n    onHeaders(statusCode, headers, resume, statusText) {\n        $8hD8m$assert(!this.aborted);\n        $8hD8m$assert(!this.completed);\n        if ($c2599bb4e4cabbe9$var$channels.headers.hasSubscribers) $c2599bb4e4cabbe9$var$channels.headers.publish({\n            request: this,\n            response: {\n                statusCode: statusCode,\n                headers: headers,\n                statusText: statusText\n            }\n        });\n        try {\n            return this[$c2599bb4e4cabbe9$var$kHandler].onHeaders(statusCode, headers, resume, statusText);\n        } catch (err) {\n            this.abort(err);\n        }\n    }\n    onData(chunk) {\n        $8hD8m$assert(!this.aborted);\n        $8hD8m$assert(!this.completed);\n        try {\n            return this[$c2599bb4e4cabbe9$var$kHandler].onData(chunk);\n        } catch (err) {\n            this.abort(err);\n            return false;\n        }\n    }\n    onUpgrade(statusCode, headers, socket) {\n        $8hD8m$assert(!this.aborted);\n        $8hD8m$assert(!this.completed);\n        return this[$c2599bb4e4cabbe9$var$kHandler].onUpgrade(statusCode, headers, socket);\n    }\n    onComplete(trailers) {\n        this.onFinally();\n        $8hD8m$assert(!this.aborted);\n        this.completed = true;\n        if ($c2599bb4e4cabbe9$var$channels.trailers.hasSubscribers) $c2599bb4e4cabbe9$var$channels.trailers.publish({\n            request: this,\n            trailers: trailers\n        });\n        try {\n            return this[$c2599bb4e4cabbe9$var$kHandler].onComplete(trailers);\n        } catch (err) {\n            // TODO (fix): This might be a bad idea?\n            this.onError(err);\n        }\n    }\n    onError(error) {\n        this.onFinally();\n        if ($c2599bb4e4cabbe9$var$channels.error.hasSubscribers) $c2599bb4e4cabbe9$var$channels.error.publish({\n            request: this,\n            error: error\n        });\n        if (this.aborted) return;\n        this.aborted = true;\n        return this[$c2599bb4e4cabbe9$var$kHandler].onError(error);\n    }\n    onFinally() {\n        if (this.errorHandler) {\n            this.body.off('error', this.errorHandler);\n            this.errorHandler = null;\n        }\n        if (this.endHandler) {\n            this.body.off('end', this.endHandler);\n            this.endHandler = null;\n        }\n    }\n    // TODO: adjust to support H2\n    addHeader(key, value) {\n        $c2599bb4e4cabbe9$var$processHeader(this, key, value);\n        return this;\n    }\n    static [$c2599bb4e4cabbe9$require$kHTTP1BuildRequest](origin, opts, handler) {\n        // TODO: Migrate header parsing here, to make Requests\n        // HTTP agnostic\n        return new $c2599bb4e4cabbe9$var$Request(origin, opts, handler);\n    }\n    static [$c2599bb4e4cabbe9$require$kHTTP2BuildRequest](origin, opts, handler) {\n        const headers = opts.headers;\n        opts = {\n            ...opts,\n            headers: null\n        };\n        const request = new $c2599bb4e4cabbe9$var$Request(origin, opts, handler);\n        request.headers = {};\n        if (Array.isArray(headers)) {\n            if (headers.length % 2 !== 0) throw new $c2599bb4e4cabbe9$require$InvalidArgumentError('headers array must be even');\n            for(let i = 0; i < headers.length; i += 2)$c2599bb4e4cabbe9$var$processHeader(request, headers[i], headers[i + 1], true);\n        } else if (headers && typeof headers === 'object') {\n            const keys = Object.keys(headers);\n            for(let i = 0; i < keys.length; i++){\n                const key = keys[i];\n                $c2599bb4e4cabbe9$var$processHeader(request, key, headers[key], true);\n            }\n        } else if (headers != null) throw new $c2599bb4e4cabbe9$require$InvalidArgumentError('headers must be an object or an array');\n        return request;\n    }\n    static [$c2599bb4e4cabbe9$require$kHTTP2CopyHeaders](raw) {\n        const rawHeaders = raw.split('\\r\\n');\n        const headers = {};\n        for (const header of rawHeaders){\n            const [key, value] = header.split(': ');\n            if (value == null || value.length === 0) continue;\n            if (headers[key]) headers[key] += `,${value}`;\n            else headers[key] = value;\n        }\n        return headers;\n    }\n}\nfunction $c2599bb4e4cabbe9$var$processHeaderValue(key, val, skipAppend) {\n    if (val && typeof val === 'object') throw new $c2599bb4e4cabbe9$require$InvalidArgumentError(`invalid ${key} header`);\n    val = val != null ? `${val}` : '';\n    if ($c2599bb4e4cabbe9$var$headerCharRegex.exec(val) !== null) throw new $c2599bb4e4cabbe9$require$InvalidArgumentError(`invalid ${key} header`);\n    return skipAppend ? val : `${key}: ${val}\\r\\n`;\n}\nfunction $c2599bb4e4cabbe9$var$processHeader(request, key, val, skipAppend = false) {\n    if (val && typeof val === 'object' && !Array.isArray(val)) throw new $c2599bb4e4cabbe9$require$InvalidArgumentError(`invalid ${key} header`);\n    else if (val === undefined) return;\n    if (request.host === null && key.length === 4 && key.toLowerCase() === 'host') {\n        if ($c2599bb4e4cabbe9$var$headerCharRegex.exec(val) !== null) throw new $c2599bb4e4cabbe9$require$InvalidArgumentError(`invalid ${key} header`);\n        // Consumed by Client\n        request.host = val;\n    } else if (request.contentLength === null && key.length === 14 && key.toLowerCase() === 'content-length') {\n        request.contentLength = parseInt(val, 10);\n        if (!Number.isFinite(request.contentLength)) throw new $c2599bb4e4cabbe9$require$InvalidArgumentError('invalid content-length header');\n    } else if (request.contentType === null && key.length === 12 && key.toLowerCase() === 'content-type') {\n        request.contentType = val;\n        if (skipAppend) request.headers[key] = $c2599bb4e4cabbe9$var$processHeaderValue(key, val, skipAppend);\n        else request.headers += $c2599bb4e4cabbe9$var$processHeaderValue(key, val);\n    } else if (key.length === 17 && key.toLowerCase() === 'transfer-encoding') throw new $c2599bb4e4cabbe9$require$InvalidArgumentError('invalid transfer-encoding header');\n    else if (key.length === 10 && key.toLowerCase() === 'connection') {\n        const value = typeof val === 'string' ? val.toLowerCase() : null;\n        if (value !== 'close' && value !== 'keep-alive') throw new $c2599bb4e4cabbe9$require$InvalidArgumentError('invalid connection header');\n        else if (value === 'close') request.reset = true;\n    } else if (key.length === 10 && key.toLowerCase() === 'keep-alive') throw new $c2599bb4e4cabbe9$require$InvalidArgumentError('invalid keep-alive header');\n    else if (key.length === 7 && key.toLowerCase() === 'upgrade') throw new $c2599bb4e4cabbe9$require$InvalidArgumentError('invalid upgrade header');\n    else if (key.length === 6 && key.toLowerCase() === 'expect') throw new $c2599bb4e4cabbe9$require$NotSupportedError('expect header not supported');\n    else if ($c2599bb4e4cabbe9$var$tokenRegExp.exec(key) === null) throw new $c2599bb4e4cabbe9$require$InvalidArgumentError('invalid header key');\n    else {\n        if (Array.isArray(val)) {\n            for(let i = 0; i < val.length; i++)if (skipAppend) {\n                if (request.headers[key]) request.headers[key] += `,${$c2599bb4e4cabbe9$var$processHeaderValue(key, val[i], skipAppend)}`;\n                else request.headers[key] = $c2599bb4e4cabbe9$var$processHeaderValue(key, val[i], skipAppend);\n            } else request.headers += $c2599bb4e4cabbe9$var$processHeaderValue(key, val[i]);\n        } else if (skipAppend) request.headers[key] = $c2599bb4e4cabbe9$var$processHeaderValue(key, val, skipAppend);\n        else request.headers += $c2599bb4e4cabbe9$var$processHeaderValue(key, val);\n    }\n}\n$c2599bb4e4cabbe9$exports = $c2599bb4e4cabbe9$var$Request;\n\n\nexport {$c2599bb4e4cabbe9$exports as default};\n//# sourceMappingURL=python-version-check.2f514258.js.map\n","'use strict'\n\nconst {\n  InvalidArgumentError,\n  NotSupportedError\n} = require('./errors')\nconst assert = require('assert')\nconst { kHTTP2BuildRequest, kHTTP2CopyHeaders, kHTTP1BuildRequest } = require('./symbols')\nconst util = require('./util')\n\n// tokenRegExp and headerCharRegex have been lifted from\n// https://github.com/nodejs/node/blob/main/lib/_http_common.js\n\n/**\n * Verifies that the given val is a valid HTTP token\n * per the rules defined in RFC 7230\n * See https://tools.ietf.org/html/rfc7230#section-3.2.6\n */\nconst tokenRegExp = /^[\\^_`a-zA-Z\\-0-9!#$%&'*+.|~]+$/\n\n/**\n * Matches if val contains an invalid field-vchar\n *  field-value    = *( field-content / obs-fold )\n *  field-content  = field-vchar [ 1*( SP / HTAB ) field-vchar ]\n *  field-vchar    = VCHAR / obs-text\n */\nconst headerCharRegex = /[^\\t\\x20-\\x7e\\x80-\\xff]/\n\n// Verifies that a given path is valid does not contain control chars \\x00 to \\x20\nconst invalidPathRegex = /[^\\u0021-\\u00ff]/\n\nconst kHandler = Symbol('handler')\n\nconst channels = {}\n\nlet extractBody\n\ntry {\n  const diagnosticsChannel = require('diagnostics_channel')\n  channels.create = diagnosticsChannel.channel('undici:request:create')\n  channels.bodySent = diagnosticsChannel.channel('undici:request:bodySent')\n  channels.headers = diagnosticsChannel.channel('undici:request:headers')\n  channels.trailers = diagnosticsChannel.channel('undici:request:trailers')\n  channels.error = diagnosticsChannel.channel('undici:request:error')\n} catch {\n  channels.create = { hasSubscribers: false }\n  channels.bodySent = { hasSubscribers: false }\n  channels.headers = { hasSubscribers: false }\n  channels.trailers = { hasSubscribers: false }\n  channels.error = { hasSubscribers: false }\n}\n\nclass Request {\n  constructor (origin, {\n    path,\n    method,\n    body,\n    headers,\n    query,\n    idempotent,\n    blocking,\n    upgrade,\n    headersTimeout,\n    bodyTimeout,\n    reset,\n    throwOnError,\n    expectContinue\n  }, handler) {\n    if (typeof path !== 'string') {\n      throw new InvalidArgumentError('path must be a string')\n    } else if (\n      path[0] !== '/' &&\n      !(path.startsWith('http://') || path.startsWith('https://')) &&\n      method !== 'CONNECT'\n    ) {\n      throw new InvalidArgumentError('path must be an absolute URL or start with a slash')\n    } else if (invalidPathRegex.exec(path) !== null) {\n      throw new InvalidArgumentError('invalid request path')\n    }\n\n    if (typeof method !== 'string') {\n      throw new InvalidArgumentError('method must be a string')\n    } else if (tokenRegExp.exec(method) === null) {\n      throw new InvalidArgumentError('invalid request method')\n    }\n\n    if (upgrade && typeof upgrade !== 'string') {\n      throw new InvalidArgumentError('upgrade must be a string')\n    }\n\n    if (headersTimeout != null && (!Number.isFinite(headersTimeout) || headersTimeout < 0)) {\n      throw new InvalidArgumentError('invalid headersTimeout')\n    }\n\n    if (bodyTimeout != null && (!Number.isFinite(bodyTimeout) || bodyTimeout < 0)) {\n      throw new InvalidArgumentError('invalid bodyTimeout')\n    }\n\n    if (reset != null && typeof reset !== 'boolean') {\n      throw new InvalidArgumentError('invalid reset')\n    }\n\n    if (expectContinue != null && typeof expectContinue !== 'boolean') {\n      throw new InvalidArgumentError('invalid expectContinue')\n    }\n\n    this.headersTimeout = headersTimeout\n\n    this.bodyTimeout = bodyTimeout\n\n    this.throwOnError = throwOnError === true\n\n    this.method = method\n\n    this.abort = null\n\n    if (body == null) {\n      this.body = null\n    } else if (util.isStream(body)) {\n      this.body = body\n\n      const rState = this.body._readableState\n      if (!rState || !rState.autoDestroy) {\n        this.endHandler = function autoDestroy () {\n          util.destroy(this)\n        }\n        this.body.on('end', this.endHandler)\n      }\n\n      this.errorHandler = err => {\n        if (this.abort) {\n          this.abort(err)\n        } else {\n          this.error = err\n        }\n      }\n      this.body.on('error', this.errorHandler)\n    } else if (util.isBuffer(body)) {\n      this.body = body.byteLength ? body : null\n    } else if (ArrayBuffer.isView(body)) {\n      this.body = body.buffer.byteLength ? Buffer.from(body.buffer, body.byteOffset, body.byteLength) : null\n    } else if (body instanceof ArrayBuffer) {\n      this.body = body.byteLength ? Buffer.from(body) : null\n    } else if (typeof body === 'string') {\n      this.body = body.length ? Buffer.from(body) : null\n    } else if (util.isFormDataLike(body) || util.isIterable(body) || util.isBlobLike(body)) {\n      this.body = body\n    } else {\n      throw new InvalidArgumentError('body must be a string, a Buffer, a Readable stream, an iterable, or an async iterable')\n    }\n\n    this.completed = false\n\n    this.aborted = false\n\n    this.upgrade = upgrade || null\n\n    this.path = query ? util.buildURL(path, query) : path\n\n    this.origin = origin\n\n    this.idempotent = idempotent == null\n      ? method === 'HEAD' || method === 'GET'\n      : idempotent\n\n    this.blocking = blocking == null ? false : blocking\n\n    this.reset = reset == null ? null : reset\n\n    this.host = null\n\n    this.contentLength = null\n\n    this.contentType = null\n\n    this.headers = ''\n\n    // Only for H2\n    this.expectContinue = expectContinue != null ? expectContinue : false\n\n    if (Array.isArray(headers)) {\n      if (headers.length % 2 !== 0) {\n        throw new InvalidArgumentError('headers array must be even')\n      }\n      for (let i = 0; i < headers.length; i += 2) {\n        processHeader(this, headers[i], headers[i + 1])\n      }\n    } else if (headers && typeof headers === 'object') {\n      const keys = Object.keys(headers)\n      for (let i = 0; i < keys.length; i++) {\n        const key = keys[i]\n        processHeader(this, key, headers[key])\n      }\n    } else if (headers != null) {\n      throw new InvalidArgumentError('headers must be an object or an array')\n    }\n\n    if (util.isFormDataLike(this.body)) {\n      if (util.nodeMajor < 16 || (util.nodeMajor === 16 && util.nodeMinor < 8)) {\n        throw new InvalidArgumentError('Form-Data bodies are only supported in node v16.8 and newer.')\n      }\n\n      if (!extractBody) {\n        extractBody = require('../fetch/body.js').extractBody\n      }\n\n      const [bodyStream, contentType] = extractBody(body)\n      if (this.contentType == null) {\n        this.contentType = contentType\n        this.headers += `content-type: ${contentType}\\r\\n`\n      }\n      this.body = bodyStream.stream\n      this.contentLength = bodyStream.length\n    } else if (util.isBlobLike(body) && this.contentType == null && body.type) {\n      this.contentType = body.type\n      this.headers += `content-type: ${body.type}\\r\\n`\n    }\n\n    util.validateHandler(handler, method, upgrade)\n\n    this.servername = util.getServerName(this.host)\n\n    this[kHandler] = handler\n\n    if (channels.create.hasSubscribers) {\n      channels.create.publish({ request: this })\n    }\n  }\n\n  onBodySent (chunk) {\n    if (this[kHandler].onBodySent) {\n      try {\n        return this[kHandler].onBodySent(chunk)\n      } catch (err) {\n        this.abort(err)\n      }\n    }\n  }\n\n  onRequestSent () {\n    if (channels.bodySent.hasSubscribers) {\n      channels.bodySent.publish({ request: this })\n    }\n\n    if (this[kHandler].onRequestSent) {\n      try {\n        return this[kHandler].onRequestSent()\n      } catch (err) {\n        this.abort(err)\n      }\n    }\n  }\n\n  onConnect (abort) {\n    assert(!this.aborted)\n    assert(!this.completed)\n\n    if (this.error) {\n      abort(this.error)\n    } else {\n      this.abort = abort\n      return this[kHandler].onConnect(abort)\n    }\n  }\n\n  onHeaders (statusCode, headers, resume, statusText) {\n    assert(!this.aborted)\n    assert(!this.completed)\n\n    if (channels.headers.hasSubscribers) {\n      channels.headers.publish({ request: this, response: { statusCode, headers, statusText } })\n    }\n\n    try {\n      return this[kHandler].onHeaders(statusCode, headers, resume, statusText)\n    } catch (err) {\n      this.abort(err)\n    }\n  }\n\n  onData (chunk) {\n    assert(!this.aborted)\n    assert(!this.completed)\n\n    try {\n      return this[kHandler].onData(chunk)\n    } catch (err) {\n      this.abort(err)\n      return false\n    }\n  }\n\n  onUpgrade (statusCode, headers, socket) {\n    assert(!this.aborted)\n    assert(!this.completed)\n\n    return this[kHandler].onUpgrade(statusCode, headers, socket)\n  }\n\n  onComplete (trailers) {\n    this.onFinally()\n\n    assert(!this.aborted)\n\n    this.completed = true\n    if (channels.trailers.hasSubscribers) {\n      channels.trailers.publish({ request: this, trailers })\n    }\n\n    try {\n      return this[kHandler].onComplete(trailers)\n    } catch (err) {\n      // TODO (fix): This might be a bad idea?\n      this.onError(err)\n    }\n  }\n\n  onError (error) {\n    this.onFinally()\n\n    if (channels.error.hasSubscribers) {\n      channels.error.publish({ request: this, error })\n    }\n\n    if (this.aborted) {\n      return\n    }\n    this.aborted = true\n\n    return this[kHandler].onError(error)\n  }\n\n  onFinally () {\n    if (this.errorHandler) {\n      this.body.off('error', this.errorHandler)\n      this.errorHandler = null\n    }\n\n    if (this.endHandler) {\n      this.body.off('end', this.endHandler)\n      this.endHandler = null\n    }\n  }\n\n  // TODO: adjust to support H2\n  addHeader (key, value) {\n    processHeader(this, key, value)\n    return this\n  }\n\n  static [kHTTP1BuildRequest] (origin, opts, handler) {\n    // TODO: Migrate header parsing here, to make Requests\n    // HTTP agnostic\n    return new Request(origin, opts, handler)\n  }\n\n  static [kHTTP2BuildRequest] (origin, opts, handler) {\n    const headers = opts.headers\n    opts = { ...opts, headers: null }\n\n    const request = new Request(origin, opts, handler)\n\n    request.headers = {}\n\n    if (Array.isArray(headers)) {\n      if (headers.length % 2 !== 0) {\n        throw new InvalidArgumentError('headers array must be even')\n      }\n      for (let i = 0; i < headers.length; i += 2) {\n        processHeader(request, headers[i], headers[i + 1], true)\n      }\n    } else if (headers && typeof headers === 'object') {\n      const keys = Object.keys(headers)\n      for (let i = 0; i < keys.length; i++) {\n        const key = keys[i]\n        processHeader(request, key, headers[key], true)\n      }\n    } else if (headers != null) {\n      throw new InvalidArgumentError('headers must be an object or an array')\n    }\n\n    return request\n  }\n\n  static [kHTTP2CopyHeaders] (raw) {\n    const rawHeaders = raw.split('\\r\\n')\n    const headers = {}\n\n    for (const header of rawHeaders) {\n      const [key, value] = header.split(': ')\n\n      if (value == null || value.length === 0) continue\n\n      if (headers[key]) headers[key] += `,${value}`\n      else headers[key] = value\n    }\n\n    return headers\n  }\n}\n\nfunction processHeaderValue (key, val, skipAppend) {\n  if (val && typeof val === 'object') {\n    throw new InvalidArgumentError(`invalid ${key} header`)\n  }\n\n  val = val != null ? `${val}` : ''\n\n  if (headerCharRegex.exec(val) !== null) {\n    throw new InvalidArgumentError(`invalid ${key} header`)\n  }\n\n  return skipAppend ? val : `${key}: ${val}\\r\\n`\n}\n\nfunction processHeader (request, key, val, skipAppend = false) {\n  if (val && (typeof val === 'object' && !Array.isArray(val))) {\n    throw new InvalidArgumentError(`invalid ${key} header`)\n  } else if (val === undefined) {\n    return\n  }\n\n  if (\n    request.host === null &&\n    key.length === 4 &&\n    key.toLowerCase() === 'host'\n  ) {\n    if (headerCharRegex.exec(val) !== null) {\n      throw new InvalidArgumentError(`invalid ${key} header`)\n    }\n    // Consumed by Client\n    request.host = val\n  } else if (\n    request.contentLength === null &&\n    key.length === 14 &&\n    key.toLowerCase() === 'content-length'\n  ) {\n    request.contentLength = parseInt(val, 10)\n    if (!Number.isFinite(request.contentLength)) {\n      throw new InvalidArgumentError('invalid content-length header')\n    }\n  } else if (\n    request.contentType === null &&\n    key.length === 12 &&\n    key.toLowerCase() === 'content-type'\n  ) {\n    request.contentType = val\n    if (skipAppend) request.headers[key] = processHeaderValue(key, val, skipAppend)\n    else request.headers += processHeaderValue(key, val)\n  } else if (\n    key.length === 17 &&\n    key.toLowerCase() === 'transfer-encoding'\n  ) {\n    throw new InvalidArgumentError('invalid transfer-encoding header')\n  } else if (\n    key.length === 10 &&\n    key.toLowerCase() === 'connection'\n  ) {\n    const value = typeof val === 'string' ? val.toLowerCase() : null\n    if (value !== 'close' && value !== 'keep-alive') {\n      throw new InvalidArgumentError('invalid connection header')\n    } else if (value === 'close') {\n      request.reset = true\n    }\n  } else if (\n    key.length === 10 &&\n    key.toLowerCase() === 'keep-alive'\n  ) {\n    throw new InvalidArgumentError('invalid keep-alive header')\n  } else if (\n    key.length === 7 &&\n    key.toLowerCase() === 'upgrade'\n  ) {\n    throw new InvalidArgumentError('invalid upgrade header')\n  } else if (\n    key.length === 6 &&\n    key.toLowerCase() === 'expect'\n  ) {\n    throw new NotSupportedError('expect header not supported')\n  } else if (tokenRegExp.exec(key) === null) {\n    throw new InvalidArgumentError('invalid header key')\n  } else {\n    if (Array.isArray(val)) {\n      for (let i = 0; i < val.length; i++) {\n        if (skipAppend) {\n          if (request.headers[key]) request.headers[key] += `,${processHeaderValue(key, val[i], skipAppend)}`\n          else request.headers[key] = processHeaderValue(key, val[i], skipAppend)\n        } else {\n          request.headers += processHeaderValue(key, val[i])\n        }\n      }\n    } else {\n      if (skipAppend) request.headers[key] = processHeaderValue(key, val, skipAppend)\n      else request.headers += processHeaderValue(key, val)\n    }\n  }\n}\n\nmodule.exports = Request\n"],"names":["$c2599bb4e4cabbe9$var$extractBody","$8hD8m$pythonversioncheckdba5a2d4js1","$8hD8m$pythonversioncheckebf2a848js2","$8hD8m$pythonversioncheck7ed1514ejs10","$8hD8m$pythonversioncheck152f8bbajs","$8hD8m$assert","$c2599bb4e4cabbe9$exports","$c2599bb4e4cabbe9$require$InvalidArgumentError","$8hD8m$pythonversioncheckdba5a2d4js","InvalidArgumentError","$c2599bb4e4cabbe9$require$NotSupportedError","NotSupportedError","$c2599bb4e4cabbe9$require$kHTTP2BuildRequest","$8hD8m$pythonversioncheckebf2a848js1","kHTTP2BuildRequest","$c2599bb4e4cabbe9$require$kHTTP2CopyHeaders","kHTTP2CopyHeaders","$c2599bb4e4cabbe9$require$kHTTP1BuildRequest","$8hD8m$pythonversioncheckebf2a848js","kHTTP1BuildRequest","$c2599bb4e4cabbe9$var$tokenRegExp","$c2599bb4e4cabbe9$var$headerCharRegex","$c2599bb4e4cabbe9$var$invalidPathRegex","$c2599bb4e4cabbe9$var$kHandler","Symbol","$c2599bb4e4cabbe9$var$channels","diagnosticsChannel","$c2599bb4e4cabbe9$import$6aef8f873045faa5","create","channel","bodySent","headers","trailers","error","hasSubscribers","$c2599bb4e4cabbe9$var$Request","origin","path","method","body","query","idempotent","blocking","upgrade","headersTimeout","bodyTimeout","reset","throwOnError","expectContinue","handler","startsWith","exec","Number","isFinite","abort","$8hD8m$pythonversioncheck7ed1514ejs7","isStream","rState","_readableState","autoDestroy","endHandler","$8hD8m$pythonversioncheck7ed1514ejs1","destroy","on","errorHandler","err","$8hD8m$pythonversioncheck7ed1514ejs4","isBuffer","byteLength","ArrayBuffer","isView","buffer","Buffer","from","byteOffset","length","$8hD8m$pythonversioncheck7ed1514ejs5","isFormDataLike","$8hD8m$pythonversioncheck7ed1514ejs6","isIterable","$8hD8m$pythonversioncheck7ed1514ejs3","isBlobLike","completed","aborted","$8hD8m$pythonversioncheck7ed1514ejs","buildURL","host","contentLength","contentType","Array","isArray","i","$c2599bb4e4cabbe9$var$processHeader","keys","Object","key","$8hD8m$pythonversioncheck7ed1514ejs8","nodeMajor","$8hD8m$pythonversioncheck7ed1514ejs9","nodeMinor","extractBody","bodyStream","stream","type","validateHandler","servername","$8hD8m$pythonversioncheck7ed1514ejs2","getServerName","publish","request","onBodySent","chunk","onRequestSent","onConnect","onHeaders","statusCode","resume","statusText","response","onData","onUpgrade","socket","onComplete","onFinally","onError","off","addHeader","value","opts","raw","rawHeaders","split","header","$c2599bb4e4cabbe9$var$processHeaderValue","val","skipAppend","undefined","toLowerCase","parseInt","default"],"version":3,"file":"python-version-check.2f514258.js.map","sourceRoot":"../"}