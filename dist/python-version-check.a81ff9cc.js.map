{"mappings":"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","sources":["<anon>","node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fetch/file.js"],"sourcesContent":["import $lQay3$pythonversioncheck92c00e26js from \"./python-version-check.92c00e26.js\";\nimport $lQay3$pythonversioncheck3f48d3eejs from \"./python-version-check.3f48d3ee.js\";\nimport $lQay3$pythonversioncheck801bb0f1js from \"./python-version-check.801bb0f1.js\";\nimport $lQay3$pythonversioncheck685b5bb2js1 from \"./python-version-check.685b5bb2.js\";\nimport $lQay3$pythonversioncheck7ed1514ejs from \"./python-version-check.7ed1514e.js\";\nimport {Blob as $lQay3$Blob, File as $lQay3$File} from \"buffer\";\nimport {types as $lQay3$types} from \"util\";\n\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire5a65\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire5a65\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"dvpqz\", function(module, exports) {\n'use strict';\n\nvar $9d51e4fb9def575c$require$Blob = $lQay3$Blob;\nvar $9d51e4fb9def575c$require$NativeFile = $lQay3$File;\n\nvar $9d51e4fb9def575c$require$types = $lQay3$types;\n\nvar $9d51e4fb9def575c$require$kState = $lQay3$pythonversioncheck92c00e26js.kState;\n\nvar $9d51e4fb9def575c$require$isBlobLike = $lQay3$pythonversioncheck3f48d3eejs.isBlobLike;\n\nvar $9d51e4fb9def575c$require$webidl = $lQay3$pythonversioncheck801bb0f1js.webidl;\n\nvar $9d51e4fb9def575c$require$parseMIMEType = $lQay3$pythonversioncheck685b5bb2js.parseMIMEType;\nvar $9d51e4fb9def575c$require$serializeAMimeType = $lQay3$pythonversioncheck685b5bb2js1.serializeAMimeType;\n\nvar $9d51e4fb9def575c$require$kEnumerableProperty = $lQay3$pythonversioncheck7ed1514ejs.kEnumerableProperty;\nconst $9d51e4fb9def575c$var$encoder = new TextEncoder();\nclass $9d51e4fb9def575c$var$File extends $9d51e4fb9def575c$require$Blob {\n    constructor(fileBits, fileName, options = {}){\n        // The File constructor is invoked with two or three parameters, depending\n        // on whether the optional dictionary parameter is used. When the File()\n        // constructor is invoked, user agents must run the following steps:\n        $9d51e4fb9def575c$require$webidl.argumentLengthCheck(arguments, 2, {\n            header: 'File constructor'\n        });\n        fileBits = $9d51e4fb9def575c$require$webidl.converters['sequence<BlobPart>'](fileBits);\n        fileName = $9d51e4fb9def575c$require$webidl.converters.USVString(fileName);\n        options = $9d51e4fb9def575c$require$webidl.converters.FilePropertyBag(options);\n        // 1. Let bytes be the result of processing blob parts given fileBits and\n        // options.\n        // Note: Blob handles this for us\n        // 2. Let n be the fileName argument to the constructor.\n        const n = fileName;\n        // 3. Process FilePropertyBag dictionary argument by running the following\n        // substeps:\n        //    1. If the type member is provided and is not the empty string, let t\n        //    be set to the type dictionary member. If t contains any characters\n        //    outside the range U+0020 to U+007E, then set t to the empty string\n        //    and return from these substeps.\n        //    2. Convert every character in t to ASCII lowercase.\n        let t = options.type;\n        let d;\n        // eslint-disable-next-line no-labels\n        substep: {\n            if (t) {\n                t = $9d51e4fb9def575c$require$parseMIMEType(t);\n                if (t === 'failure') {\n                    t = '';\n                    break substep;\n                }\n                t = $9d51e4fb9def575c$require$serializeAMimeType(t).toLowerCase();\n            }\n            //    3. If the lastModified member is provided, let d be set to the\n            //    lastModified dictionary member. If it is not provided, set d to the\n            //    current date and time represented as the number of milliseconds since\n            //    the Unix Epoch (which is the equivalent of Date.now() [ECMA-262]).\n            d = options.lastModified;\n        }\n        // 4. Return a new File object F such that:\n        // F refers to the bytes byte sequence.\n        // F.size is set to the number of total bytes in bytes.\n        // F.name is set to n.\n        // F.type is set to t.\n        // F.lastModified is set to d.\n        super($9d51e4fb9def575c$var$processBlobParts(fileBits, options), {\n            type: t\n        });\n        this[$9d51e4fb9def575c$require$kState] = {\n            name: n,\n            lastModified: d,\n            type: t\n        };\n    }\n    get name() {\n        $9d51e4fb9def575c$require$webidl.brandCheck(this, $9d51e4fb9def575c$var$File);\n        return this[$9d51e4fb9def575c$require$kState].name;\n    }\n    get lastModified() {\n        $9d51e4fb9def575c$require$webidl.brandCheck(this, $9d51e4fb9def575c$var$File);\n        return this[$9d51e4fb9def575c$require$kState].lastModified;\n    }\n    get type() {\n        $9d51e4fb9def575c$require$webidl.brandCheck(this, $9d51e4fb9def575c$var$File);\n        return this[$9d51e4fb9def575c$require$kState].type;\n    }\n}\nclass $9d51e4fb9def575c$var$FileLike {\n    constructor(blobLike, fileName, options = {}){\n        // TODO: argument idl type check\n        // The File constructor is invoked with two or three parameters, depending\n        // on whether the optional dictionary parameter is used. When the File()\n        // constructor is invoked, user agents must run the following steps:\n        // 1. Let bytes be the result of processing blob parts given fileBits and\n        // options.\n        // 2. Let n be the fileName argument to the constructor.\n        const n = fileName;\n        // 3. Process FilePropertyBag dictionary argument by running the following\n        // substeps:\n        //    1. If the type member is provided and is not the empty string, let t\n        //    be set to the type dictionary member. If t contains any characters\n        //    outside the range U+0020 to U+007E, then set t to the empty string\n        //    and return from these substeps.\n        //    TODO\n        const t = options.type;\n        //    2. Convert every character in t to ASCII lowercase.\n        //    TODO\n        //    3. If the lastModified member is provided, let d be set to the\n        //    lastModified dictionary member. If it is not provided, set d to the\n        //    current date and time represented as the number of milliseconds since\n        //    the Unix Epoch (which is the equivalent of Date.now() [ECMA-262]).\n        const d = options.lastModified ?? Date.now();\n        // 4. Return a new File object F such that:\n        // F refers to the bytes byte sequence.\n        // F.size is set to the number of total bytes in bytes.\n        // F.name is set to n.\n        // F.type is set to t.\n        // F.lastModified is set to d.\n        this[$9d51e4fb9def575c$require$kState] = {\n            blobLike: blobLike,\n            name: n,\n            type: t,\n            lastModified: d\n        };\n    }\n    stream(...args) {\n        $9d51e4fb9def575c$require$webidl.brandCheck(this, $9d51e4fb9def575c$var$FileLike);\n        return this[$9d51e4fb9def575c$require$kState].blobLike.stream(...args);\n    }\n    arrayBuffer(...args) {\n        $9d51e4fb9def575c$require$webidl.brandCheck(this, $9d51e4fb9def575c$var$FileLike);\n        return this[$9d51e4fb9def575c$require$kState].blobLike.arrayBuffer(...args);\n    }\n    slice(...args) {\n        $9d51e4fb9def575c$require$webidl.brandCheck(this, $9d51e4fb9def575c$var$FileLike);\n        return this[$9d51e4fb9def575c$require$kState].blobLike.slice(...args);\n    }\n    text(...args) {\n        $9d51e4fb9def575c$require$webidl.brandCheck(this, $9d51e4fb9def575c$var$FileLike);\n        return this[$9d51e4fb9def575c$require$kState].blobLike.text(...args);\n    }\n    get size() {\n        $9d51e4fb9def575c$require$webidl.brandCheck(this, $9d51e4fb9def575c$var$FileLike);\n        return this[$9d51e4fb9def575c$require$kState].blobLike.size;\n    }\n    get type() {\n        $9d51e4fb9def575c$require$webidl.brandCheck(this, $9d51e4fb9def575c$var$FileLike);\n        return this[$9d51e4fb9def575c$require$kState].blobLike.type;\n    }\n    get name() {\n        $9d51e4fb9def575c$require$webidl.brandCheck(this, $9d51e4fb9def575c$var$FileLike);\n        return this[$9d51e4fb9def575c$require$kState].name;\n    }\n    get lastModified() {\n        $9d51e4fb9def575c$require$webidl.brandCheck(this, $9d51e4fb9def575c$var$FileLike);\n        return this[$9d51e4fb9def575c$require$kState].lastModified;\n    }\n    get [Symbol.toStringTag]() {\n        return 'File';\n    }\n}\nObject.defineProperties($9d51e4fb9def575c$var$File.prototype, {\n    [Symbol.toStringTag]: {\n        value: 'File',\n        configurable: true\n    },\n    name: $9d51e4fb9def575c$require$kEnumerableProperty,\n    lastModified: $9d51e4fb9def575c$require$kEnumerableProperty\n});\n$9d51e4fb9def575c$require$webidl.converters.Blob = $9d51e4fb9def575c$require$webidl.interfaceConverter($9d51e4fb9def575c$require$Blob);\n$9d51e4fb9def575c$require$webidl.converters.BlobPart = function(V, opts) {\n    if ($9d51e4fb9def575c$require$webidl.util.Type(V) === 'Object') {\n        if ($9d51e4fb9def575c$require$isBlobLike(V)) return $9d51e4fb9def575c$require$webidl.converters.Blob(V, {\n            strict: false\n        });\n        if (ArrayBuffer.isView(V) || $9d51e4fb9def575c$require$types.isAnyArrayBuffer(V)) return $9d51e4fb9def575c$require$webidl.converters.BufferSource(V, opts);\n    }\n    return $9d51e4fb9def575c$require$webidl.converters.USVString(V, opts);\n};\n$9d51e4fb9def575c$require$webidl.converters['sequence<BlobPart>'] = $9d51e4fb9def575c$require$webidl.sequenceConverter($9d51e4fb9def575c$require$webidl.converters.BlobPart);\n// https://www.w3.org/TR/FileAPI/#dfn-FilePropertyBag\n$9d51e4fb9def575c$require$webidl.converters.FilePropertyBag = $9d51e4fb9def575c$require$webidl.dictionaryConverter([\n    {\n        key: 'lastModified',\n        converter: $9d51e4fb9def575c$require$webidl.converters['long long'],\n        get defaultValue () {\n            return Date.now();\n        }\n    },\n    {\n        key: 'type',\n        converter: $9d51e4fb9def575c$require$webidl.converters.DOMString,\n        defaultValue: ''\n    },\n    {\n        key: 'endings',\n        converter: (value)=>{\n            value = $9d51e4fb9def575c$require$webidl.converters.DOMString(value);\n            value = value.toLowerCase();\n            if (value !== 'native') value = 'transparent';\n            return value;\n        },\n        defaultValue: 'transparent'\n    }\n]);\n/**\n * @see https://www.w3.org/TR/FileAPI/#process-blob-parts\n * @param {(NodeJS.TypedArray|Blob|string)[]} parts\n * @param {{ type: string, endings: string }} options\n */ function $9d51e4fb9def575c$var$processBlobParts(parts, options) {\n    // 1. Let bytes be an empty sequence of bytes.\n    /** @type {NodeJS.TypedArray[]} */ const bytes = [];\n    // 2. For each element in parts:\n    for (const element of parts){\n        // 1. If element is a USVString, run the following substeps:\n        if (typeof element === 'string') {\n            // 1. Let s be element.\n            let s = element;\n            // 2. If the endings member of options is \"native\", set s\n            //    to the result of converting line endings to native\n            //    of element.\n            if (options.endings === 'native') s = $9d51e4fb9def575c$var$convertLineEndingsNative(s);\n            // 3. Append the result of UTF-8 encoding s to bytes.\n            bytes.push($9d51e4fb9def575c$var$encoder.encode(s));\n        } else if ($9d51e4fb9def575c$require$types.isAnyArrayBuffer(element) || $9d51e4fb9def575c$require$types.isTypedArray(element)) {\n            // 2. If element is a BufferSource, get a copy of the\n            //    bytes held by the buffer source, and append those\n            //    bytes to bytes.\n            if (!element.buffer) bytes.push(new Uint8Array(element));\n            else bytes.push(new Uint8Array(element.buffer, element.byteOffset, element.byteLength));\n        } else if ($9d51e4fb9def575c$require$isBlobLike(element)) // 3. If element is a Blob, append the bytes it represents\n        //    to bytes.\n        bytes.push(element);\n    }\n    // 3. Return bytes.\n    return bytes;\n}\n/**\n * @see https://www.w3.org/TR/FileAPI/#convert-line-endings-to-native\n * @param {string} s\n */ function $9d51e4fb9def575c$var$convertLineEndingsNative(s) {\n    // 1. Let native line ending be be the code point U+000A LF.\n    let nativeLineEnding = '\\n';\n    // 2. If the underlying platform’s conventions are to\n    //    represent newlines as a carriage return and line feed\n    //    sequence, set native line ending to the code point\n    //    U+000D CR followed by the code point U+000A LF.\n    if (process.platform === 'win32') nativeLineEnding = '\\r\\n';\n    return s.replace(/\\r?\\n/g, nativeLineEnding);\n}\n// If this function is moved to ./util.js, some tools (such as\n// rollup) will warn about circular dependencies. See:\n// https://github.com/nodejs/undici/issues/1629\nfunction $9d51e4fb9def575c$var$isFileLike(object) {\n    return $9d51e4fb9def575c$require$NativeFile && object instanceof $9d51e4fb9def575c$require$NativeFile || object instanceof $9d51e4fb9def575c$var$File || object && (typeof object.stream === 'function' || typeof object.arrayBuffer === 'function') && object[Symbol.toStringTag] === 'File';\n}\nmodule.exports = {\n    File: $9d51e4fb9def575c$var$File,\n    FileLike: $9d51e4fb9def575c$var$FileLike,\n    isFileLike: $9d51e4fb9def575c$var$isFileLike\n};\n\n});\n\n\nparcelRequire(\"dvpqz\");\n\n//# sourceMappingURL=python-version-check.a81ff9cc.js.map\n","'use strict'\n\nconst { Blob, File: NativeFile } = require('buffer')\nconst { types } = require('util')\nconst { kState } = require('./symbols')\nconst { isBlobLike } = require('./util')\nconst { webidl } = require('./webidl')\nconst { parseMIMEType, serializeAMimeType } = require('./dataURL')\nconst { kEnumerableProperty } = require('../core/util')\nconst encoder = new TextEncoder()\n\nclass File extends Blob {\n  constructor (fileBits, fileName, options = {}) {\n    // The File constructor is invoked with two or three parameters, depending\n    // on whether the optional dictionary parameter is used. When the File()\n    // constructor is invoked, user agents must run the following steps:\n    webidl.argumentLengthCheck(arguments, 2, { header: 'File constructor' })\n\n    fileBits = webidl.converters['sequence<BlobPart>'](fileBits)\n    fileName = webidl.converters.USVString(fileName)\n    options = webidl.converters.FilePropertyBag(options)\n\n    // 1. Let bytes be the result of processing blob parts given fileBits and\n    // options.\n    // Note: Blob handles this for us\n\n    // 2. Let n be the fileName argument to the constructor.\n    const n = fileName\n\n    // 3. Process FilePropertyBag dictionary argument by running the following\n    // substeps:\n\n    //    1. If the type member is provided and is not the empty string, let t\n    //    be set to the type dictionary member. If t contains any characters\n    //    outside the range U+0020 to U+007E, then set t to the empty string\n    //    and return from these substeps.\n    //    2. Convert every character in t to ASCII lowercase.\n    let t = options.type\n    let d\n\n    // eslint-disable-next-line no-labels\n    substep: {\n      if (t) {\n        t = parseMIMEType(t)\n\n        if (t === 'failure') {\n          t = ''\n          // eslint-disable-next-line no-labels\n          break substep\n        }\n\n        t = serializeAMimeType(t).toLowerCase()\n      }\n\n      //    3. If the lastModified member is provided, let d be set to the\n      //    lastModified dictionary member. If it is not provided, set d to the\n      //    current date and time represented as the number of milliseconds since\n      //    the Unix Epoch (which is the equivalent of Date.now() [ECMA-262]).\n      d = options.lastModified\n    }\n\n    // 4. Return a new File object F such that:\n    // F refers to the bytes byte sequence.\n    // F.size is set to the number of total bytes in bytes.\n    // F.name is set to n.\n    // F.type is set to t.\n    // F.lastModified is set to d.\n\n    super(processBlobParts(fileBits, options), { type: t })\n    this[kState] = {\n      name: n,\n      lastModified: d,\n      type: t\n    }\n  }\n\n  get name () {\n    webidl.brandCheck(this, File)\n\n    return this[kState].name\n  }\n\n  get lastModified () {\n    webidl.brandCheck(this, File)\n\n    return this[kState].lastModified\n  }\n\n  get type () {\n    webidl.brandCheck(this, File)\n\n    return this[kState].type\n  }\n}\n\nclass FileLike {\n  constructor (blobLike, fileName, options = {}) {\n    // TODO: argument idl type check\n\n    // The File constructor is invoked with two or three parameters, depending\n    // on whether the optional dictionary parameter is used. When the File()\n    // constructor is invoked, user agents must run the following steps:\n\n    // 1. Let bytes be the result of processing blob parts given fileBits and\n    // options.\n\n    // 2. Let n be the fileName argument to the constructor.\n    const n = fileName\n\n    // 3. Process FilePropertyBag dictionary argument by running the following\n    // substeps:\n\n    //    1. If the type member is provided and is not the empty string, let t\n    //    be set to the type dictionary member. If t contains any characters\n    //    outside the range U+0020 to U+007E, then set t to the empty string\n    //    and return from these substeps.\n    //    TODO\n    const t = options.type\n\n    //    2. Convert every character in t to ASCII lowercase.\n    //    TODO\n\n    //    3. If the lastModified member is provided, let d be set to the\n    //    lastModified dictionary member. If it is not provided, set d to the\n    //    current date and time represented as the number of milliseconds since\n    //    the Unix Epoch (which is the equivalent of Date.now() [ECMA-262]).\n    const d = options.lastModified ?? Date.now()\n\n    // 4. Return a new File object F such that:\n    // F refers to the bytes byte sequence.\n    // F.size is set to the number of total bytes in bytes.\n    // F.name is set to n.\n    // F.type is set to t.\n    // F.lastModified is set to d.\n\n    this[kState] = {\n      blobLike,\n      name: n,\n      type: t,\n      lastModified: d\n    }\n  }\n\n  stream (...args) {\n    webidl.brandCheck(this, FileLike)\n\n    return this[kState].blobLike.stream(...args)\n  }\n\n  arrayBuffer (...args) {\n    webidl.brandCheck(this, FileLike)\n\n    return this[kState].blobLike.arrayBuffer(...args)\n  }\n\n  slice (...args) {\n    webidl.brandCheck(this, FileLike)\n\n    return this[kState].blobLike.slice(...args)\n  }\n\n  text (...args) {\n    webidl.brandCheck(this, FileLike)\n\n    return this[kState].blobLike.text(...args)\n  }\n\n  get size () {\n    webidl.brandCheck(this, FileLike)\n\n    return this[kState].blobLike.size\n  }\n\n  get type () {\n    webidl.brandCheck(this, FileLike)\n\n    return this[kState].blobLike.type\n  }\n\n  get name () {\n    webidl.brandCheck(this, FileLike)\n\n    return this[kState].name\n  }\n\n  get lastModified () {\n    webidl.brandCheck(this, FileLike)\n\n    return this[kState].lastModified\n  }\n\n  get [Symbol.toStringTag] () {\n    return 'File'\n  }\n}\n\nObject.defineProperties(File.prototype, {\n  [Symbol.toStringTag]: {\n    value: 'File',\n    configurable: true\n  },\n  name: kEnumerableProperty,\n  lastModified: kEnumerableProperty\n})\n\nwebidl.converters.Blob = webidl.interfaceConverter(Blob)\n\nwebidl.converters.BlobPart = function (V, opts) {\n  if (webidl.util.Type(V) === 'Object') {\n    if (isBlobLike(V)) {\n      return webidl.converters.Blob(V, { strict: false })\n    }\n\n    if (\n      ArrayBuffer.isView(V) ||\n      types.isAnyArrayBuffer(V)\n    ) {\n      return webidl.converters.BufferSource(V, opts)\n    }\n  }\n\n  return webidl.converters.USVString(V, opts)\n}\n\nwebidl.converters['sequence<BlobPart>'] = webidl.sequenceConverter(\n  webidl.converters.BlobPart\n)\n\n// https://www.w3.org/TR/FileAPI/#dfn-FilePropertyBag\nwebidl.converters.FilePropertyBag = webidl.dictionaryConverter([\n  {\n    key: 'lastModified',\n    converter: webidl.converters['long long'],\n    get defaultValue () {\n      return Date.now()\n    }\n  },\n  {\n    key: 'type',\n    converter: webidl.converters.DOMString,\n    defaultValue: ''\n  },\n  {\n    key: 'endings',\n    converter: (value) => {\n      value = webidl.converters.DOMString(value)\n      value = value.toLowerCase()\n\n      if (value !== 'native') {\n        value = 'transparent'\n      }\n\n      return value\n    },\n    defaultValue: 'transparent'\n  }\n])\n\n/**\n * @see https://www.w3.org/TR/FileAPI/#process-blob-parts\n * @param {(NodeJS.TypedArray|Blob|string)[]} parts\n * @param {{ type: string, endings: string }} options\n */\nfunction processBlobParts (parts, options) {\n  // 1. Let bytes be an empty sequence of bytes.\n  /** @type {NodeJS.TypedArray[]} */\n  const bytes = []\n\n  // 2. For each element in parts:\n  for (const element of parts) {\n    // 1. If element is a USVString, run the following substeps:\n    if (typeof element === 'string') {\n      // 1. Let s be element.\n      let s = element\n\n      // 2. If the endings member of options is \"native\", set s\n      //    to the result of converting line endings to native\n      //    of element.\n      if (options.endings === 'native') {\n        s = convertLineEndingsNative(s)\n      }\n\n      // 3. Append the result of UTF-8 encoding s to bytes.\n      bytes.push(encoder.encode(s))\n    } else if (\n      types.isAnyArrayBuffer(element) ||\n      types.isTypedArray(element)\n    ) {\n      // 2. If element is a BufferSource, get a copy of the\n      //    bytes held by the buffer source, and append those\n      //    bytes to bytes.\n      if (!element.buffer) { // ArrayBuffer\n        bytes.push(new Uint8Array(element))\n      } else {\n        bytes.push(\n          new Uint8Array(element.buffer, element.byteOffset, element.byteLength)\n        )\n      }\n    } else if (isBlobLike(element)) {\n      // 3. If element is a Blob, append the bytes it represents\n      //    to bytes.\n      bytes.push(element)\n    }\n  }\n\n  // 3. Return bytes.\n  return bytes\n}\n\n/**\n * @see https://www.w3.org/TR/FileAPI/#convert-line-endings-to-native\n * @param {string} s\n */\nfunction convertLineEndingsNative (s) {\n  // 1. Let native line ending be be the code point U+000A LF.\n  let nativeLineEnding = '\\n'\n\n  // 2. If the underlying platform’s conventions are to\n  //    represent newlines as a carriage return and line feed\n  //    sequence, set native line ending to the code point\n  //    U+000D CR followed by the code point U+000A LF.\n  if (process.platform === 'win32') {\n    nativeLineEnding = '\\r\\n'\n  }\n\n  return s.replace(/\\r?\\n/g, nativeLineEnding)\n}\n\n// If this function is moved to ./util.js, some tools (such as\n// rollup) will warn about circular dependencies. See:\n// https://github.com/nodejs/undici/issues/1629\nfunction isFileLike (object) {\n  return (\n    (NativeFile && object instanceof NativeFile) ||\n    object instanceof File || (\n      object &&\n      (typeof object.stream === 'function' ||\n      typeof object.arrayBuffer === 'function') &&\n      object[Symbol.toStringTag] === 'File'\n    )\n  )\n}\n\nmodule.exports = { File, FileLike, isFileLike }\n"],"names":["$lQay3$pythonversioncheck92c00e26js","$lQay3$pythonversioncheck3f48d3eejs","$lQay3$pythonversioncheck801bb0f1js","$lQay3$pythonversioncheck685b5bb2js1","$lQay3$pythonversioncheck7ed1514ejs","Blob","$lQay3$Blob","File","$lQay3$File","types","$lQay3$types","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","$9d51e4fb9def575c$require$Blob","$9d51e4fb9def575c$require$kState","kState","$9d51e4fb9def575c$require$isBlobLike","isBlobLike","$9d51e4fb9def575c$require$webidl","webidl","$9d51e4fb9def575c$require$parseMIMEType","$lQay3$pythonversioncheck685b5bb2js","parseMIMEType","$9d51e4fb9def575c$require$serializeAMimeType","serializeAMimeType","$9d51e4fb9def575c$require$kEnumerableProperty","kEnumerableProperty","$9d51e4fb9def575c$var$encoder","TextEncoder","$9d51e4fb9def575c$var$File","fileBits","fileName","options","d","argumentLengthCheck","arguments","header","converters","USVString","FilePropertyBag","n","t","type","substep","toLowerCase","lastModified","$9d51e4fb9def575c$var$processBlobParts","parts","bytes","element","s","endings","$9d51e4fb9def575c$var$convertLineEndingsNative","nativeLineEnding","process","platform","replace","push","encode","$9d51e4fb9def575c$require$types","isAnyArrayBuffer","isTypedArray","buffer","Uint8Array","byteOffset","byteLength","name","brandCheck","$9d51e4fb9def575c$var$FileLike","blobLike","Date","now","stream","args","arrayBuffer","slice","text","size","Symbol","toStringTag","Object","defineProperties","prototype","value","configurable","interfaceConverter","BlobPart","V","opts","util","Type","strict","ArrayBuffer","isView","BufferSource","sequenceConverter","dictionaryConverter","key","converter","defaultValue","DOMString","FileLike","isFileLike","object","$9d51e4fb9def575c$require$NativeFile"],"version":3,"file":"python-version-check.a81ff9cc.js.map","sourceRoot":"../"}