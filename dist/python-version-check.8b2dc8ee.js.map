{"mappings":"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","sources":["<anon>","node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/balanced-pool.js"],"sourcesContent":["import $jdVRa$pythonversioncheckdba5a2d4js1 from \"./python-version-check.dba5a2d4.js\";\nimport $jdVRa$pythonversioncheck9d13d3ddjs5 from \"./python-version-check.9d13d3dd.js\";\nimport $jdVRa$pythonversioncheck91f60e5cjs from \"./python-version-check.91f60e5c.js\";\nimport $jdVRa$pythonversioncheckebf2a848js1 from \"./python-version-check.ebf2a848.js\";\nimport $jdVRa$pythonversioncheck7ed1514ejs from \"./python-version-check.7ed1514e.js\";\n\nvar $8b5fd53d0b275e3e$exports = {};\n'use strict';\n\nvar $8b5fd53d0b275e3e$require$BalancedPoolMissingUpstreamError = $jdVRa$pythonversioncheckdba5a2d4js.BalancedPoolMissingUpstreamError;\nvar $8b5fd53d0b275e3e$require$InvalidArgumentError = $jdVRa$pythonversioncheckdba5a2d4js1.InvalidArgumentError;\n\nvar $8b5fd53d0b275e3e$require$PoolBase = $jdVRa$pythonversioncheck9d13d3ddjs5.PoolBase;\nvar $8b5fd53d0b275e3e$require$kClients = $jdVRa$pythonversioncheck9d13d3ddjs1.kClients;\nvar $8b5fd53d0b275e3e$require$kNeedDrain = $jdVRa$pythonversioncheck9d13d3ddjs3.kNeedDrain;\nvar $8b5fd53d0b275e3e$require$kAddClient = $jdVRa$pythonversioncheck9d13d3ddjs.kAddClient;\nvar $8b5fd53d0b275e3e$require$kRemoveClient = $jdVRa$pythonversioncheck9d13d3ddjs4.kRemoveClient;\nvar $8b5fd53d0b275e3e$require$kGetDispatcher = $jdVRa$pythonversioncheck9d13d3ddjs2.kGetDispatcher;\n\n\nvar $8b5fd53d0b275e3e$require$kUrl = $jdVRa$pythonversioncheckebf2a848js1.kUrl;\nvar $8b5fd53d0b275e3e$require$kInterceptors = $jdVRa$pythonversioncheckebf2a848js.kInterceptors;\n\nvar $8b5fd53d0b275e3e$require$parseOrigin = $jdVRa$pythonversioncheck7ed1514ejs.parseOrigin;\nconst $8b5fd53d0b275e3e$var$kFactory = Symbol('factory');\nconst $8b5fd53d0b275e3e$var$kOptions = Symbol('options');\nconst $8b5fd53d0b275e3e$var$kGreatestCommonDivisor = Symbol('kGreatestCommonDivisor');\nconst $8b5fd53d0b275e3e$var$kCurrentWeight = Symbol('kCurrentWeight');\nconst $8b5fd53d0b275e3e$var$kIndex = Symbol('kIndex');\nconst $8b5fd53d0b275e3e$var$kWeight = Symbol('kWeight');\nconst $8b5fd53d0b275e3e$var$kMaxWeightPerServer = Symbol('kMaxWeightPerServer');\nconst $8b5fd53d0b275e3e$var$kErrorPenalty = Symbol('kErrorPenalty');\nfunction $8b5fd53d0b275e3e$var$getGreatestCommonDivisor(a, b) {\n    if (b === 0) return a;\n    return $8b5fd53d0b275e3e$var$getGreatestCommonDivisor(b, a % b);\n}\nfunction $8b5fd53d0b275e3e$var$defaultFactory(origin, opts) {\n    return new $jdVRa$pythonversioncheck91f60e5cjs(origin, opts);\n}\nclass $8b5fd53d0b275e3e$var$BalancedPool extends $8b5fd53d0b275e3e$require$PoolBase {\n    constructor(upstreams = [], { factory: factory = $8b5fd53d0b275e3e$var$defaultFactory, ...opts } = {}){\n        super();\n        this[$8b5fd53d0b275e3e$var$kOptions] = opts;\n        this[$8b5fd53d0b275e3e$var$kIndex] = -1;\n        this[$8b5fd53d0b275e3e$var$kCurrentWeight] = 0;\n        this[$8b5fd53d0b275e3e$var$kMaxWeightPerServer] = this[$8b5fd53d0b275e3e$var$kOptions].maxWeightPerServer || 100;\n        this[$8b5fd53d0b275e3e$var$kErrorPenalty] = this[$8b5fd53d0b275e3e$var$kOptions].errorPenalty || 15;\n        if (!Array.isArray(upstreams)) upstreams = [\n            upstreams\n        ];\n        if (typeof factory !== 'function') throw new $8b5fd53d0b275e3e$require$InvalidArgumentError('factory must be a function.');\n        this[$8b5fd53d0b275e3e$require$kInterceptors] = opts.interceptors && opts.interceptors.BalancedPool && Array.isArray(opts.interceptors.BalancedPool) ? opts.interceptors.BalancedPool : [];\n        this[$8b5fd53d0b275e3e$var$kFactory] = factory;\n        for (const upstream of upstreams)this.addUpstream(upstream);\n        this._updateBalancedPoolStats();\n    }\n    addUpstream(upstream) {\n        const upstreamOrigin = $8b5fd53d0b275e3e$require$parseOrigin(upstream).origin;\n        if (this[$8b5fd53d0b275e3e$require$kClients].find((pool)=>pool[$8b5fd53d0b275e3e$require$kUrl].origin === upstreamOrigin && pool.closed !== true && pool.destroyed !== true)) return this;\n        const pool = this[$8b5fd53d0b275e3e$var$kFactory](upstreamOrigin, Object.assign({}, this[$8b5fd53d0b275e3e$var$kOptions]));\n        this[$8b5fd53d0b275e3e$require$kAddClient](pool);\n        pool.on('connect', ()=>{\n            pool[$8b5fd53d0b275e3e$var$kWeight] = Math.min(this[$8b5fd53d0b275e3e$var$kMaxWeightPerServer], pool[$8b5fd53d0b275e3e$var$kWeight] + this[$8b5fd53d0b275e3e$var$kErrorPenalty]);\n        });\n        pool.on('connectionError', ()=>{\n            pool[$8b5fd53d0b275e3e$var$kWeight] = Math.max(1, pool[$8b5fd53d0b275e3e$var$kWeight] - this[$8b5fd53d0b275e3e$var$kErrorPenalty]);\n            this._updateBalancedPoolStats();\n        });\n        pool.on('disconnect', (...args)=>{\n            const err = args[2];\n            if (err && err.code === 'UND_ERR_SOCKET') {\n                // decrease the weight of the pool.\n                pool[$8b5fd53d0b275e3e$var$kWeight] = Math.max(1, pool[$8b5fd53d0b275e3e$var$kWeight] - this[$8b5fd53d0b275e3e$var$kErrorPenalty]);\n                this._updateBalancedPoolStats();\n            }\n        });\n        for (const client of this[$8b5fd53d0b275e3e$require$kClients])client[$8b5fd53d0b275e3e$var$kWeight] = this[$8b5fd53d0b275e3e$var$kMaxWeightPerServer];\n        this._updateBalancedPoolStats();\n        return this;\n    }\n    _updateBalancedPoolStats() {\n        this[$8b5fd53d0b275e3e$var$kGreatestCommonDivisor] = this[$8b5fd53d0b275e3e$require$kClients].map((p)=>p[$8b5fd53d0b275e3e$var$kWeight]).reduce($8b5fd53d0b275e3e$var$getGreatestCommonDivisor, 0);\n    }\n    removeUpstream(upstream) {\n        const upstreamOrigin = $8b5fd53d0b275e3e$require$parseOrigin(upstream).origin;\n        const pool = this[$8b5fd53d0b275e3e$require$kClients].find((pool)=>pool[$8b5fd53d0b275e3e$require$kUrl].origin === upstreamOrigin && pool.closed !== true && pool.destroyed !== true);\n        if (pool) this[$8b5fd53d0b275e3e$require$kRemoveClient](pool);\n        return this;\n    }\n    get upstreams() {\n        return this[$8b5fd53d0b275e3e$require$kClients].filter((dispatcher)=>dispatcher.closed !== true && dispatcher.destroyed !== true).map((p)=>p[$8b5fd53d0b275e3e$require$kUrl].origin);\n    }\n    [$8b5fd53d0b275e3e$require$kGetDispatcher]() {\n        // We validate that pools is greater than 0,\n        // otherwise we would have to wait until an upstream\n        // is added, which might never happen.\n        if (this[$8b5fd53d0b275e3e$require$kClients].length === 0) throw new $8b5fd53d0b275e3e$require$BalancedPoolMissingUpstreamError();\n        const dispatcher = this[$8b5fd53d0b275e3e$require$kClients].find((dispatcher)=>!dispatcher[$8b5fd53d0b275e3e$require$kNeedDrain] && dispatcher.closed !== true && dispatcher.destroyed !== true);\n        if (!dispatcher) return;\n        const allClientsBusy = this[$8b5fd53d0b275e3e$require$kClients].map((pool)=>pool[$8b5fd53d0b275e3e$require$kNeedDrain]).reduce((a, b)=>a && b, true);\n        if (allClientsBusy) return;\n        let counter = 0;\n        let maxWeightIndex = this[$8b5fd53d0b275e3e$require$kClients].findIndex((pool)=>!pool[$8b5fd53d0b275e3e$require$kNeedDrain]);\n        while(counter++ < this[$8b5fd53d0b275e3e$require$kClients].length){\n            this[$8b5fd53d0b275e3e$var$kIndex] = (this[$8b5fd53d0b275e3e$var$kIndex] + 1) % this[$8b5fd53d0b275e3e$require$kClients].length;\n            const pool = this[$8b5fd53d0b275e3e$require$kClients][this[$8b5fd53d0b275e3e$var$kIndex]];\n            // find pool index with the largest weight\n            if (pool[$8b5fd53d0b275e3e$var$kWeight] > this[$8b5fd53d0b275e3e$require$kClients][maxWeightIndex][$8b5fd53d0b275e3e$var$kWeight] && !pool[$8b5fd53d0b275e3e$require$kNeedDrain]) maxWeightIndex = this[$8b5fd53d0b275e3e$var$kIndex];\n            // decrease the current weight every `this[kClients].length`.\n            if (this[$8b5fd53d0b275e3e$var$kIndex] === 0) {\n                // Set the current weight to the next lower weight.\n                this[$8b5fd53d0b275e3e$var$kCurrentWeight] = this[$8b5fd53d0b275e3e$var$kCurrentWeight] - this[$8b5fd53d0b275e3e$var$kGreatestCommonDivisor];\n                if (this[$8b5fd53d0b275e3e$var$kCurrentWeight] <= 0) this[$8b5fd53d0b275e3e$var$kCurrentWeight] = this[$8b5fd53d0b275e3e$var$kMaxWeightPerServer];\n            }\n            if (pool[$8b5fd53d0b275e3e$var$kWeight] >= this[$8b5fd53d0b275e3e$var$kCurrentWeight] && !pool[$8b5fd53d0b275e3e$require$kNeedDrain]) return pool;\n        }\n        this[$8b5fd53d0b275e3e$var$kCurrentWeight] = this[$8b5fd53d0b275e3e$require$kClients][maxWeightIndex][$8b5fd53d0b275e3e$var$kWeight];\n        this[$8b5fd53d0b275e3e$var$kIndex] = maxWeightIndex;\n        return this[$8b5fd53d0b275e3e$require$kClients][maxWeightIndex];\n    }\n}\n$8b5fd53d0b275e3e$exports = $8b5fd53d0b275e3e$var$BalancedPool;\n\n\nexport {$8b5fd53d0b275e3e$exports as default};\n//# sourceMappingURL=python-version-check.8b2dc8ee.js.map\n","'use strict'\n\nconst {\n  BalancedPoolMissingUpstreamError,\n  InvalidArgumentError\n} = require('./core/errors')\nconst {\n  PoolBase,\n  kClients,\n  kNeedDrain,\n  kAddClient,\n  kRemoveClient,\n  kGetDispatcher\n} = require('./pool-base')\nconst Pool = require('./pool')\nconst { kUrl, kInterceptors } = require('./core/symbols')\nconst { parseOrigin } = require('./core/util')\nconst kFactory = Symbol('factory')\n\nconst kOptions = Symbol('options')\nconst kGreatestCommonDivisor = Symbol('kGreatestCommonDivisor')\nconst kCurrentWeight = Symbol('kCurrentWeight')\nconst kIndex = Symbol('kIndex')\nconst kWeight = Symbol('kWeight')\nconst kMaxWeightPerServer = Symbol('kMaxWeightPerServer')\nconst kErrorPenalty = Symbol('kErrorPenalty')\n\nfunction getGreatestCommonDivisor (a, b) {\n  if (b === 0) return a\n  return getGreatestCommonDivisor(b, a % b)\n}\n\nfunction defaultFactory (origin, opts) {\n  return new Pool(origin, opts)\n}\n\nclass BalancedPool extends PoolBase {\n  constructor (upstreams = [], { factory = defaultFactory, ...opts } = {}) {\n    super()\n\n    this[kOptions] = opts\n    this[kIndex] = -1\n    this[kCurrentWeight] = 0\n\n    this[kMaxWeightPerServer] = this[kOptions].maxWeightPerServer || 100\n    this[kErrorPenalty] = this[kOptions].errorPenalty || 15\n\n    if (!Array.isArray(upstreams)) {\n      upstreams = [upstreams]\n    }\n\n    if (typeof factory !== 'function') {\n      throw new InvalidArgumentError('factory must be a function.')\n    }\n\n    this[kInterceptors] = opts.interceptors && opts.interceptors.BalancedPool && Array.isArray(opts.interceptors.BalancedPool)\n      ? opts.interceptors.BalancedPool\n      : []\n    this[kFactory] = factory\n\n    for (const upstream of upstreams) {\n      this.addUpstream(upstream)\n    }\n    this._updateBalancedPoolStats()\n  }\n\n  addUpstream (upstream) {\n    const upstreamOrigin = parseOrigin(upstream).origin\n\n    if (this[kClients].find((pool) => (\n      pool[kUrl].origin === upstreamOrigin &&\n      pool.closed !== true &&\n      pool.destroyed !== true\n    ))) {\n      return this\n    }\n    const pool = this[kFactory](upstreamOrigin, Object.assign({}, this[kOptions]))\n\n    this[kAddClient](pool)\n    pool.on('connect', () => {\n      pool[kWeight] = Math.min(this[kMaxWeightPerServer], pool[kWeight] + this[kErrorPenalty])\n    })\n\n    pool.on('connectionError', () => {\n      pool[kWeight] = Math.max(1, pool[kWeight] - this[kErrorPenalty])\n      this._updateBalancedPoolStats()\n    })\n\n    pool.on('disconnect', (...args) => {\n      const err = args[2]\n      if (err && err.code === 'UND_ERR_SOCKET') {\n        // decrease the weight of the pool.\n        pool[kWeight] = Math.max(1, pool[kWeight] - this[kErrorPenalty])\n        this._updateBalancedPoolStats()\n      }\n    })\n\n    for (const client of this[kClients]) {\n      client[kWeight] = this[kMaxWeightPerServer]\n    }\n\n    this._updateBalancedPoolStats()\n\n    return this\n  }\n\n  _updateBalancedPoolStats () {\n    this[kGreatestCommonDivisor] = this[kClients].map(p => p[kWeight]).reduce(getGreatestCommonDivisor, 0)\n  }\n\n  removeUpstream (upstream) {\n    const upstreamOrigin = parseOrigin(upstream).origin\n\n    const pool = this[kClients].find((pool) => (\n      pool[kUrl].origin === upstreamOrigin &&\n      pool.closed !== true &&\n      pool.destroyed !== true\n    ))\n\n    if (pool) {\n      this[kRemoveClient](pool)\n    }\n\n    return this\n  }\n\n  get upstreams () {\n    return this[kClients]\n      .filter(dispatcher => dispatcher.closed !== true && dispatcher.destroyed !== true)\n      .map((p) => p[kUrl].origin)\n  }\n\n  [kGetDispatcher] () {\n    // We validate that pools is greater than 0,\n    // otherwise we would have to wait until an upstream\n    // is added, which might never happen.\n    if (this[kClients].length === 0) {\n      throw new BalancedPoolMissingUpstreamError()\n    }\n\n    const dispatcher = this[kClients].find(dispatcher => (\n      !dispatcher[kNeedDrain] &&\n      dispatcher.closed !== true &&\n      dispatcher.destroyed !== true\n    ))\n\n    if (!dispatcher) {\n      return\n    }\n\n    const allClientsBusy = this[kClients].map(pool => pool[kNeedDrain]).reduce((a, b) => a && b, true)\n\n    if (allClientsBusy) {\n      return\n    }\n\n    let counter = 0\n\n    let maxWeightIndex = this[kClients].findIndex(pool => !pool[kNeedDrain])\n\n    while (counter++ < this[kClients].length) {\n      this[kIndex] = (this[kIndex] + 1) % this[kClients].length\n      const pool = this[kClients][this[kIndex]]\n\n      // find pool index with the largest weight\n      if (pool[kWeight] > this[kClients][maxWeightIndex][kWeight] && !pool[kNeedDrain]) {\n        maxWeightIndex = this[kIndex]\n      }\n\n      // decrease the current weight every `this[kClients].length`.\n      if (this[kIndex] === 0) {\n        // Set the current weight to the next lower weight.\n        this[kCurrentWeight] = this[kCurrentWeight] - this[kGreatestCommonDivisor]\n\n        if (this[kCurrentWeight] <= 0) {\n          this[kCurrentWeight] = this[kMaxWeightPerServer]\n        }\n      }\n      if (pool[kWeight] >= this[kCurrentWeight] && (!pool[kNeedDrain])) {\n        return pool\n      }\n    }\n\n    this[kCurrentWeight] = this[kClients][maxWeightIndex][kWeight]\n    this[kIndex] = maxWeightIndex\n    return this[kClients][maxWeightIndex]\n  }\n}\n\nmodule.exports = BalancedPool\n"],"names":["$jdVRa$pythonversioncheckdba5a2d4js1","$jdVRa$pythonversioncheck9d13d3ddjs5","$jdVRa$pythonversioncheck91f60e5cjs","$jdVRa$pythonversioncheckebf2a848js1","$jdVRa$pythonversioncheck7ed1514ejs","$8b5fd53d0b275e3e$exports","$8b5fd53d0b275e3e$require$BalancedPoolMissingUpstreamError","$jdVRa$pythonversioncheckdba5a2d4js","BalancedPoolMissingUpstreamError","$8b5fd53d0b275e3e$require$InvalidArgumentError","InvalidArgumentError","$8b5fd53d0b275e3e$require$PoolBase","PoolBase","$8b5fd53d0b275e3e$require$kClients","$jdVRa$pythonversioncheck9d13d3ddjs1","kClients","$8b5fd53d0b275e3e$require$kNeedDrain","$jdVRa$pythonversioncheck9d13d3ddjs3","kNeedDrain","$8b5fd53d0b275e3e$require$kAddClient","$jdVRa$pythonversioncheck9d13d3ddjs","kAddClient","$8b5fd53d0b275e3e$require$kRemoveClient","$jdVRa$pythonversioncheck9d13d3ddjs4","kRemoveClient","$8b5fd53d0b275e3e$require$kGetDispatcher","$jdVRa$pythonversioncheck9d13d3ddjs2","kGetDispatcher","$8b5fd53d0b275e3e$require$kUrl","kUrl","$8b5fd53d0b275e3e$require$kInterceptors","$jdVRa$pythonversioncheckebf2a848js","kInterceptors","$8b5fd53d0b275e3e$require$parseOrigin","parseOrigin","$8b5fd53d0b275e3e$var$kFactory","Symbol","$8b5fd53d0b275e3e$var$kOptions","$8b5fd53d0b275e3e$var$kGreatestCommonDivisor","$8b5fd53d0b275e3e$var$kCurrentWeight","$8b5fd53d0b275e3e$var$kIndex","$8b5fd53d0b275e3e$var$kWeight","$8b5fd53d0b275e3e$var$kMaxWeightPerServer","$8b5fd53d0b275e3e$var$kErrorPenalty","$8b5fd53d0b275e3e$var$defaultFactory","origin","opts","upstreams","factory","maxWeightPerServer","errorPenalty","Array","isArray","upstream","interceptors","BalancedPool","addUpstream","_updateBalancedPoolStats","upstreamOrigin","find","pool","closed","destroyed","Object","assign","client","on","Math","min","max","args","err","code","map","p","reduce","$8b5fd53d0b275e3e$var$getGreatestCommonDivisor","a","b","removeUpstream","filter","dispatcher","length","counter","maxWeightIndex","findIndex","default"],"version":3,"file":"python-version-check.8b2dc8ee.js.map","sourceRoot":"../"}