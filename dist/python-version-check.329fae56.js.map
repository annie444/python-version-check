{"mappings":"A,I,E,C,ECEA,IAAM,EAAU,MAEV,EAAM,CACV,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC7C,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC7C,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC7C,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC7C,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC7C,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC7C,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC7C,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC9C,CAED,SAAS,IACP,IAAI,CAAC,MAAM,CAAG,KAAA,CAChB,CACA,EAAQ,SAAS,CAAC,KAAK,CAAG,SAAU,CAAG,EAErC,EAAM,EAAI,OAAO,CAAC,EAAS,KAC3B,IAAI,EAAM,GACN,EAAI,EAAO,EAAI,EAAS,EAAM,EAAI,MAAM,CAC5C,KAAO,EAAI,EAAK,EAAE,EACZ,AAAgB,KAAA,IAAhB,IAAI,CAAC,MAAM,CACR,CAAG,CAAC,EAAI,UAAU,CAAC,GAAG,EAKzB,IAAI,CAAC,MAAM,EAAI,CAAG,CAAC,EAAE,CACrB,EAAE,EACyB,IAAvB,IAAI,CAAC,MAAM,CAAC,MAAM,GACpB,GAAO,OAAO,YAAY,CAAC,SAAS,IAAI,CAAC,MAAM,CAAE,KACjD,IAAI,CAAC,MAAM,CAAG,KAAA,KARhB,GAAO,IAAM,IAAI,CAAC,MAAM,CACxB,IAAI,CAAC,MAAM,CAAG,KAAA,EACd,EAAE,GASgB,MAAX,CAAG,CAAC,EAAE,GACX,EAAI,IACN,GAAO,EAAI,SAAS,CAAC,EAAG,GACxB,EAAI,GAEN,IAAI,CAAC,MAAM,CAAG,GACd,EAAE,GAIN,OADI,EAAI,GAAO,AAAgB,KAAA,IAAhB,IAAI,CAAC,MAAM,EAAkB,CAAA,GAAO,EAAI,SAAS,CAAC,EAAjE,EACO,CACT,EACA,EAAQ,SAAS,CAAC,KAAK,CAAG,WACxB,IAAI,CAAC,MAAM,CAAG,KAAA,CAChB,EAEA,EAAiB,S,K,O","sources":["<anon>","node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/utils/Decoder.js"],"sourcesContent":["var $32e3086476145064$exports = {};\n'use strict';\nconst $32e3086476145064$var$RE_PLUS = /\\+/g;\nconst $32e3086476145064$var$HEX = [\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0\n];\nfunction $32e3086476145064$var$Decoder() {\n    this.buffer = undefined;\n}\n$32e3086476145064$var$Decoder.prototype.write = function(str) {\n    // Replace '+' with ' ' before decoding\n    str = str.replace($32e3086476145064$var$RE_PLUS, ' ');\n    let res = '';\n    let i = 0;\n    let p = 0;\n    const len = str.length;\n    for(; i < len; ++i){\n        if (this.buffer !== undefined) {\n            if (!$32e3086476145064$var$HEX[str.charCodeAt(i)]) {\n                res += '%' + this.buffer;\n                this.buffer = undefined;\n                --i // retry character\n                ;\n            } else {\n                this.buffer += str[i];\n                ++p;\n                if (this.buffer.length === 2) {\n                    res += String.fromCharCode(parseInt(this.buffer, 16));\n                    this.buffer = undefined;\n                }\n            }\n        } else if (str[i] === '%') {\n            if (i > p) {\n                res += str.substring(p, i);\n                p = i;\n            }\n            this.buffer = '';\n            ++p;\n        }\n    }\n    if (p < len && this.buffer === undefined) res += str.substring(p);\n    return res;\n};\n$32e3086476145064$var$Decoder.prototype.reset = function() {\n    this.buffer = undefined;\n};\n$32e3086476145064$exports = $32e3086476145064$var$Decoder;\n\n\nexport {$32e3086476145064$exports as default};\n//# sourceMappingURL=python-version-check.329fae56.js.map\n","'use strict'\n\nconst RE_PLUS = /\\+/g\n\nconst HEX = [\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,\n  0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n]\n\nfunction Decoder () {\n  this.buffer = undefined\n}\nDecoder.prototype.write = function (str) {\n  // Replace '+' with ' ' before decoding\n  str = str.replace(RE_PLUS, ' ')\n  let res = ''\n  let i = 0; let p = 0; const len = str.length\n  for (; i < len; ++i) {\n    if (this.buffer !== undefined) {\n      if (!HEX[str.charCodeAt(i)]) {\n        res += '%' + this.buffer\n        this.buffer = undefined\n        --i // retry character\n      } else {\n        this.buffer += str[i]\n        ++p\n        if (this.buffer.length === 2) {\n          res += String.fromCharCode(parseInt(this.buffer, 16))\n          this.buffer = undefined\n        }\n      }\n    } else if (str[i] === '%') {\n      if (i > p) {\n        res += str.substring(p, i)\n        p = i\n      }\n      this.buffer = ''\n      ++p\n    }\n  }\n  if (p < len && this.buffer === undefined) { res += str.substring(p) }\n  return res\n}\nDecoder.prototype.reset = function () {\n  this.buffer = undefined\n}\n\nmodule.exports = Decoder\n"],"names":["$32e3086476145064$exports","$32e3086476145064$var$RE_PLUS","$32e3086476145064$var$HEX","$32e3086476145064$var$Decoder","buffer","undefined","prototype","write","str","replace","res","i","p","len","length","charCodeAt","String","fromCharCode","parseInt","substring","reset","default"],"version":3,"file":"python-version-check.329fae56.js.map","sourceRoot":"../"}