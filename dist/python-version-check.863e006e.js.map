{"mappings":"ICyGI,C,Q,kB,C,C,wB,C,K,gB,C,I,E,C,EArGJ,IAAM,EAAwB,CAAC,MAAO,OAAQ,OAAO,CAC/C,EAA2B,IAAI,IAAI,GAInC,EAAiB,CAAC,IAAK,IAAK,IAAK,IAAK,IAAI,CAC1C,EAAoB,IAAI,IAAI,GAG5B,EAAW,CACf,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC/G,KAAM,KAAM,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACvG,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAClG,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAAQ,OAAQ,OACpG,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAChG,QACD,CAEK,EAAc,IAAI,IAAI,GAGtB,EAAiB,CACrB,GACA,cACA,6BACA,cACA,SACA,gBACA,2BACA,kCACA,aACD,CACK,EAAoB,IAAI,IAAI,GAI5B,EAAc,CAAC,MAAO,OAAQ,UAAW,QAAQ,CACjD,EAAiB,IAAI,IAAI,GAkCzB,EAAmB,CAAC,UAAW,QAAS,QAAQ,CAChD,EAAsB,IAAI,IAAI,GAE9B,EAAc,CAClB,QACA,eACA,OACA,QACA,WACA,eACA,SACA,QACA,QACA,QACA,OACA,GACD,CACK,EAAiB,IAAI,IAAI,GAkC/B,EAAiB,CACf,aAhCmB,WAAW,YAAY,EAAK,AAAA,CAAA,KAG/C,GAAI,CACF,KAAK,IACP,CAAE,MAAO,EAAK,CACZ,OAAO,OAAO,cAAc,CAAC,GAAK,WAAW,AAC/C,CACF,CAAA,IAyBE,gBAnBA,WAAW,eAAe,EAG1B,SAA0B,CAAK,CAAE,CAAmB,EAClD,GAAI,AAAqB,GAArB,UAAU,MAAM,CAClB,MAAM,AAAI,UAAU,oBAStB,OANI,AAAC,GACH,CAAA,EAAU,IApHV,CAmHF,EAGA,EAAQ,KAAK,CAAC,KAAK,GACnB,EAAQ,KAAK,CAAC,KAAK,GACnB,EAAQ,KAAK,CAAC,WAAW,CAAC,EAAO,GAAS,UACnC,AAzHL,EAyH0B,EAAQ,KAAK,EAAE,OAAO,AACpD,EAKA,YAAA,EACA,iBAAA,EACA,kBA1EwB,CACxB,mBACA,mBACA,mBACA,eAKA,iBACD,CAiEC,eAAA,EACA,gBA/FsB,CAAC,SAAU,SAAU,QAAQ,CAgGnD,YA3FkB,CAAC,WAAY,cAAe,UAAW,OAAO,CA4FhE,mBA1FyB,CAAC,OAAQ,cAAe,UAAU,CA2F3D,aAzFmB,CACnB,UACA,WACA,SACA,WACA,cACA,iBACD,CAmFC,eAAA,EACA,sBAAA,EACA,eApIqB,CAAC,IAAK,IAAK,IAAK,IAAI,CAqIzC,YAAA,EACA,SAAA,EACA,cAxEoB,CACpB,OACD,CAuEC,eAAA,EACA,YAAA,EACA,kBAAA,EACA,yBAAA,EACA,eAAA,EACA,oBAAA,EACA,kBAAA,CACF,S,K,O","sources":["<anon>","node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fetch/constants.js"],"sourcesContent":["import {MessageChannel as $dCPFY$MessageChannel, receiveMessageOnPort as $dCPFY$receiveMessageOnPort} from \"worker_threads\";\n\nvar $c293048d722329f3$exports = {};\n'use strict';\n\nvar $c293048d722329f3$require$MessageChannel = $dCPFY$MessageChannel;\nvar $c293048d722329f3$require$receiveMessageOnPort = $dCPFY$receiveMessageOnPort;\nconst $c293048d722329f3$var$corsSafeListedMethods = [\n    'GET',\n    'HEAD',\n    'POST'\n];\nconst $c293048d722329f3$var$corsSafeListedMethodsSet = new Set($c293048d722329f3$var$corsSafeListedMethods);\nconst $c293048d722329f3$var$nullBodyStatus = [\n    101,\n    204,\n    205,\n    304\n];\nconst $c293048d722329f3$var$redirectStatus = [\n    301,\n    302,\n    303,\n    307,\n    308\n];\nconst $c293048d722329f3$var$redirectStatusSet = new Set($c293048d722329f3$var$redirectStatus);\n// https://fetch.spec.whatwg.org/#block-bad-port\nconst $c293048d722329f3$var$badPorts = [\n    '1',\n    '7',\n    '9',\n    '11',\n    '13',\n    '15',\n    '17',\n    '19',\n    '20',\n    '21',\n    '22',\n    '23',\n    '25',\n    '37',\n    '42',\n    '43',\n    '53',\n    '69',\n    '77',\n    '79',\n    '87',\n    '95',\n    '101',\n    '102',\n    '103',\n    '104',\n    '109',\n    '110',\n    '111',\n    '113',\n    '115',\n    '117',\n    '119',\n    '123',\n    '135',\n    '137',\n    '139',\n    '143',\n    '161',\n    '179',\n    '389',\n    '427',\n    '465',\n    '512',\n    '513',\n    '514',\n    '515',\n    '526',\n    '530',\n    '531',\n    '532',\n    '540',\n    '548',\n    '554',\n    '556',\n    '563',\n    '587',\n    '601',\n    '636',\n    '989',\n    '990',\n    '993',\n    '995',\n    '1719',\n    '1720',\n    '1723',\n    '2049',\n    '3659',\n    '4045',\n    '5060',\n    '5061',\n    '6000',\n    '6566',\n    '6665',\n    '6666',\n    '6667',\n    '6668',\n    '6669',\n    '6697',\n    '10080'\n];\nconst $c293048d722329f3$var$badPortsSet = new Set($c293048d722329f3$var$badPorts);\n// https://w3c.github.io/webappsec-referrer-policy/#referrer-policies\nconst $c293048d722329f3$var$referrerPolicy = [\n    '',\n    'no-referrer',\n    'no-referrer-when-downgrade',\n    'same-origin',\n    'origin',\n    'strict-origin',\n    'origin-when-cross-origin',\n    'strict-origin-when-cross-origin',\n    'unsafe-url'\n];\nconst $c293048d722329f3$var$referrerPolicySet = new Set($c293048d722329f3$var$referrerPolicy);\nconst $c293048d722329f3$var$requestRedirect = [\n    'follow',\n    'manual',\n    'error'\n];\nconst $c293048d722329f3$var$safeMethods = [\n    'GET',\n    'HEAD',\n    'OPTIONS',\n    'TRACE'\n];\nconst $c293048d722329f3$var$safeMethodsSet = new Set($c293048d722329f3$var$safeMethods);\nconst $c293048d722329f3$var$requestMode = [\n    'navigate',\n    'same-origin',\n    'no-cors',\n    'cors'\n];\nconst $c293048d722329f3$var$requestCredentials = [\n    'omit',\n    'same-origin',\n    'include'\n];\nconst $c293048d722329f3$var$requestCache = [\n    'default',\n    'no-store',\n    'reload',\n    'no-cache',\n    'force-cache',\n    'only-if-cached'\n];\n// https://fetch.spec.whatwg.org/#request-body-header-name\nconst $c293048d722329f3$var$requestBodyHeader = [\n    'content-encoding',\n    'content-language',\n    'content-location',\n    'content-type',\n    // See https://github.com/nodejs/undici/issues/2021\n    // 'Content-Length' is a forbidden header name, which is typically\n    // removed in the Headers implementation. However, undici doesn't\n    // filter out headers, so we add it here.\n    'content-length'\n];\n// https://fetch.spec.whatwg.org/#enumdef-requestduplex\nconst $c293048d722329f3$var$requestDuplex = [\n    'half'\n];\n// http://fetch.spec.whatwg.org/#forbidden-method\nconst $c293048d722329f3$var$forbiddenMethods = [\n    'CONNECT',\n    'TRACE',\n    'TRACK'\n];\nconst $c293048d722329f3$var$forbiddenMethodsSet = new Set($c293048d722329f3$var$forbiddenMethods);\nconst $c293048d722329f3$var$subresource = [\n    'audio',\n    'audioworklet',\n    'font',\n    'image',\n    'manifest',\n    'paintworklet',\n    'script',\n    'style',\n    'track',\n    'video',\n    'xslt',\n    ''\n];\nconst $c293048d722329f3$var$subresourceSet = new Set($c293048d722329f3$var$subresource);\n/** @type {globalThis['DOMException']} */ const $c293048d722329f3$var$DOMException = globalThis.DOMException ?? (()=>{\n    // DOMException was only made a global in Node v17.0.0,\n    // but fetch supports >= v16.8.\n    try {\n        atob('~');\n    } catch (err) {\n        return Object.getPrototypeOf(err).constructor;\n    }\n})();\nlet $c293048d722329f3$var$channel;\n/** @type {globalThis['structuredClone']} */ const $c293048d722329f3$var$structuredClone = globalThis.structuredClone ?? // https://github.com/nodejs/node/blob/b27ae24dcc4251bad726d9d84baf678d1f707fed/lib/internal/structured_clone.js\n// structuredClone was added in v17.0.0, but fetch supports v16.8\nfunction structuredClone(value, options) {\n    if (arguments.length === 0) throw new TypeError('missing argument');\n    if (!$c293048d722329f3$var$channel) $c293048d722329f3$var$channel = new $c293048d722329f3$require$MessageChannel();\n    $c293048d722329f3$var$channel.port1.unref();\n    $c293048d722329f3$var$channel.port2.unref();\n    $c293048d722329f3$var$channel.port1.postMessage(value, options?.transfer);\n    return $c293048d722329f3$require$receiveMessageOnPort($c293048d722329f3$var$channel.port2).message;\n};\n$c293048d722329f3$exports = {\n    DOMException: $c293048d722329f3$var$DOMException,\n    structuredClone: $c293048d722329f3$var$structuredClone,\n    subresource: $c293048d722329f3$var$subresource,\n    forbiddenMethods: $c293048d722329f3$var$forbiddenMethods,\n    requestBodyHeader: $c293048d722329f3$var$requestBodyHeader,\n    referrerPolicy: $c293048d722329f3$var$referrerPolicy,\n    requestRedirect: $c293048d722329f3$var$requestRedirect,\n    requestMode: $c293048d722329f3$var$requestMode,\n    requestCredentials: $c293048d722329f3$var$requestCredentials,\n    requestCache: $c293048d722329f3$var$requestCache,\n    redirectStatus: $c293048d722329f3$var$redirectStatus,\n    corsSafeListedMethods: $c293048d722329f3$var$corsSafeListedMethods,\n    nullBodyStatus: $c293048d722329f3$var$nullBodyStatus,\n    safeMethods: $c293048d722329f3$var$safeMethods,\n    badPorts: $c293048d722329f3$var$badPorts,\n    requestDuplex: $c293048d722329f3$var$requestDuplex,\n    subresourceSet: $c293048d722329f3$var$subresourceSet,\n    badPortsSet: $c293048d722329f3$var$badPortsSet,\n    redirectStatusSet: $c293048d722329f3$var$redirectStatusSet,\n    corsSafeListedMethodsSet: $c293048d722329f3$var$corsSafeListedMethodsSet,\n    safeMethodsSet: $c293048d722329f3$var$safeMethodsSet,\n    forbiddenMethodsSet: $c293048d722329f3$var$forbiddenMethodsSet,\n    referrerPolicySet: $c293048d722329f3$var$referrerPolicySet\n};\n\n\nexport {$c293048d722329f3$exports as default};\n//# sourceMappingURL=python-version-check.863e006e.js.map\n","'use strict'\n\nconst { MessageChannel, receiveMessageOnPort } = require('worker_threads')\n\nconst corsSafeListedMethods = ['GET', 'HEAD', 'POST']\nconst corsSafeListedMethodsSet = new Set(corsSafeListedMethods)\n\nconst nullBodyStatus = [101, 204, 205, 304]\n\nconst redirectStatus = [301, 302, 303, 307, 308]\nconst redirectStatusSet = new Set(redirectStatus)\n\n// https://fetch.spec.whatwg.org/#block-bad-port\nconst badPorts = [\n  '1', '7', '9', '11', '13', '15', '17', '19', '20', '21', '22', '23', '25', '37', '42', '43', '53', '69', '77', '79',\n  '87', '95', '101', '102', '103', '104', '109', '110', '111', '113', '115', '117', '119', '123', '135', '137',\n  '139', '143', '161', '179', '389', '427', '465', '512', '513', '514', '515', '526', '530', '531', '532',\n  '540', '548', '554', '556', '563', '587', '601', '636', '989', '990', '993', '995', '1719', '1720', '1723',\n  '2049', '3659', '4045', '5060', '5061', '6000', '6566', '6665', '6666', '6667', '6668', '6669', '6697',\n  '10080'\n]\n\nconst badPortsSet = new Set(badPorts)\n\n// https://w3c.github.io/webappsec-referrer-policy/#referrer-policies\nconst referrerPolicy = [\n  '',\n  'no-referrer',\n  'no-referrer-when-downgrade',\n  'same-origin',\n  'origin',\n  'strict-origin',\n  'origin-when-cross-origin',\n  'strict-origin-when-cross-origin',\n  'unsafe-url'\n]\nconst referrerPolicySet = new Set(referrerPolicy)\n\nconst requestRedirect = ['follow', 'manual', 'error']\n\nconst safeMethods = ['GET', 'HEAD', 'OPTIONS', 'TRACE']\nconst safeMethodsSet = new Set(safeMethods)\n\nconst requestMode = ['navigate', 'same-origin', 'no-cors', 'cors']\n\nconst requestCredentials = ['omit', 'same-origin', 'include']\n\nconst requestCache = [\n  'default',\n  'no-store',\n  'reload',\n  'no-cache',\n  'force-cache',\n  'only-if-cached'\n]\n\n// https://fetch.spec.whatwg.org/#request-body-header-name\nconst requestBodyHeader = [\n  'content-encoding',\n  'content-language',\n  'content-location',\n  'content-type',\n  // See https://github.com/nodejs/undici/issues/2021\n  // 'Content-Length' is a forbidden header name, which is typically\n  // removed in the Headers implementation. However, undici doesn't\n  // filter out headers, so we add it here.\n  'content-length'\n]\n\n// https://fetch.spec.whatwg.org/#enumdef-requestduplex\nconst requestDuplex = [\n  'half'\n]\n\n// http://fetch.spec.whatwg.org/#forbidden-method\nconst forbiddenMethods = ['CONNECT', 'TRACE', 'TRACK']\nconst forbiddenMethodsSet = new Set(forbiddenMethods)\n\nconst subresource = [\n  'audio',\n  'audioworklet',\n  'font',\n  'image',\n  'manifest',\n  'paintworklet',\n  'script',\n  'style',\n  'track',\n  'video',\n  'xslt',\n  ''\n]\nconst subresourceSet = new Set(subresource)\n\n/** @type {globalThis['DOMException']} */\nconst DOMException = globalThis.DOMException ?? (() => {\n  // DOMException was only made a global in Node v17.0.0,\n  // but fetch supports >= v16.8.\n  try {\n    atob('~')\n  } catch (err) {\n    return Object.getPrototypeOf(err).constructor\n  }\n})()\n\nlet channel\n\n/** @type {globalThis['structuredClone']} */\nconst structuredClone =\n  globalThis.structuredClone ??\n  // https://github.com/nodejs/node/blob/b27ae24dcc4251bad726d9d84baf678d1f707fed/lib/internal/structured_clone.js\n  // structuredClone was added in v17.0.0, but fetch supports v16.8\n  function structuredClone (value, options = undefined) {\n    if (arguments.length === 0) {\n      throw new TypeError('missing argument')\n    }\n\n    if (!channel) {\n      channel = new MessageChannel()\n    }\n    channel.port1.unref()\n    channel.port2.unref()\n    channel.port1.postMessage(value, options?.transfer)\n    return receiveMessageOnPort(channel.port2).message\n  }\n\nmodule.exports = {\n  DOMException,\n  structuredClone,\n  subresource,\n  forbiddenMethods,\n  requestBodyHeader,\n  referrerPolicy,\n  requestRedirect,\n  requestMode,\n  requestCredentials,\n  requestCache,\n  redirectStatus,\n  corsSafeListedMethods,\n  nullBodyStatus,\n  safeMethods,\n  badPorts,\n  requestDuplex,\n  subresourceSet,\n  badPortsSet,\n  redirectStatusSet,\n  corsSafeListedMethodsSet,\n  safeMethodsSet,\n  forbiddenMethodsSet,\n  referrerPolicySet\n}\n"],"names":["$c293048d722329f3$var$channel","MessageChannel","$dCPFY$MessageChannel","receiveMessageOnPort","$dCPFY$receiveMessageOnPort","$c293048d722329f3$exports","$c293048d722329f3$var$corsSafeListedMethods","$c293048d722329f3$var$corsSafeListedMethodsSet","Set","$c293048d722329f3$var$redirectStatus","$c293048d722329f3$var$redirectStatusSet","$c293048d722329f3$var$badPorts","$c293048d722329f3$var$badPortsSet","$c293048d722329f3$var$referrerPolicy","$c293048d722329f3$var$referrerPolicySet","$c293048d722329f3$var$safeMethods","$c293048d722329f3$var$safeMethodsSet","$c293048d722329f3$var$forbiddenMethods","$c293048d722329f3$var$forbiddenMethodsSet","$c293048d722329f3$var$subresource","$c293048d722329f3$var$subresourceSet","DOMException","globalThis","atob","err","Object","getPrototypeOf","structuredClone","value","options","arguments","length","TypeError","port1","unref","port2","postMessage","transfer","$c293048d722329f3$require$receiveMessageOnPort","message","subresource","forbiddenMethods","requestBodyHeader","referrerPolicy","requestRedirect","requestMode","requestCredentials","requestCache","redirectStatus","corsSafeListedMethods","nullBodyStatus","safeMethods","badPorts","requestDuplex","subresourceSet","badPortsSet","redirectStatusSet","corsSafeListedMethodsSet","safeMethodsSet","forbiddenMethodsSet","referrerPolicySet","default"],"version":3,"file":"python-version-check.863e006e.js.map","sourceRoot":"../"}