{"mappings":"A,O,M,qD,A,Q,c,C,K,qD,A,Q,kB,C,C,qB,C,K,qD,CC0BO,eAAe,IACpB,GAAI,CACF,IAAM,EAAwB,sDAAA,QAAA,CAAc,QACtC,EAAyB,sDAAA,QAAA,CAAc,SAC7C,GAAI,CAAC,EAAe,YAClB,sDAAA,SAAA,CAAe,4BAGjB,GAAI,CAAC,EAAgB,YACnB,sDAAA,SAAA,CAAe,6BAIjB,qDAAA,KAAA,CAAW,CAAC,uBAAuB,EAAE,EAAA,CAAe,EACpD,IAAM,EAA2B,MAAM,AAAA,EAAe,GAChD,EAAsB,EAAY,IAAI,CAC5C,qDAAA,KAAA,CAAW,CAAC,eAAe,EAAE,EAAA,CAAa,EAC1C,IAAM,EAAyB,MAAM,AAAA,EAAkB,GACvD,qDAAA,KAAA,CAAW,CAAC,eAAe,EAAE,EAAA,CAAgB,EAE7C,EAAA,SAAA,CAAe,eAAgB,GAC/B,EAAA,SAAA,CAAe,kBAAmB,GAElC,qDAAA,KAAA,CAAW,CAAC,SAAS,EAAE,EAAe,uBAAuB,CAAC,EAC9D,IAAM,EAAW,MAAM,AAAA,EAAW,EAAgB,GAClD,GAAI,AAAa,OAAb,EAAmB,YACrB,sDAAA,SAAA,CAAe,CAAC,sBAAsB,EAAE,EAAA,CAAgB,EAG1D,sDAAA,IAAA,CAAU,CAAC,uBAAuB,EAAE,EAAY,EAAE,EAAE,EAAS,IAAI,CAAC,MAAA,CAAO,EACzE,IAAM,EACJ,EAAS,MAAM,CAAG,GAAI,EAAS,QAAQ,CAAC,GAC1C,EAAA,SAAA,CAAe,yBAA0B,EAC3C,CAAE,MAAO,EAAO,CAEd,GAAI,CAlDN,GACE,AAAiB,UAAjB,OAkDmB,GAjDnB,AAAU,OAiDS,GAhDnB,CAAE,CAAA,YAgDiB,CAhDJ,GACf,AAAmD,UAAnD,OAAQ,AA+CW,EA/CoB,OAAO,CAE9C,MAAM,AAAI,UAAU,8CA8ClB,sDAAA,SAAA,CAAe,EAAM,OAAO,CAC9B,CAAE,KAAM,CACN,sDAAA,SAAA,CAAe,CAAC,2BAA2B,EAAE,OAAO,GAAA,CAAQ,CAC9D,CACF,CACF,Q,K,G","sources":["<anon>","src/main.ts"],"sourcesContent":["import $dCa9K$pythonversionchecka30f15a5js4 from \"./python-version-check.a30f15a5.js\";\nimport {queryIndex as $022ca5c9575aea33$export$746251fb0c041440} from \"./python-version-check.aa9c0888.js\";\nimport {getPackageInfo as $83279610ce38fb08$export$cd17d76da7967240, getPackageVersion as $83279610ce38fb08$export$18cd124b5098d330} from \"./python-version-check.b938519f.js\";\n\n\n\n\nfunction $ed591221abffb8ad$var$assertHasMessage(error) {\n    if (typeof error !== 'object' || error === null || !('message' in error) || typeof error.message !== 'string') throw new TypeError('The error does not have a message property');\n}\nasync function $ed591221abffb8ad$export$889ea624f2cb2c57() {\n    try {\n        const pyprojectPath = $dCa9K$pythonversionchecka30f15a5js1.getInput('path');\n        const simpleIndexUrl = $dCa9K$pythonversionchecka30f15a5js1.getInput('index');\n        if (!pyprojectPath) {\n            $dCa9K$pythonversionchecka30f15a5js3.setFailed('Input \"path\" is required');\n            return;\n        }\n        if (!simpleIndexUrl) {\n            $dCa9K$pythonversionchecka30f15a5js3.setFailed('Input \"index\" is required');\n            return;\n        }\n        $dCa9K$pythonversionchecka30f15a5js.debug(`Looking for package at ${pyprojectPath}`);\n        const packageInfo = await (0, $83279610ce38fb08$export$cd17d76da7967240)(pyprojectPath);\n        const packageName = packageInfo.name;\n        $dCa9K$pythonversionchecka30f15a5js.debug(`Found package: ${packageName}`);\n        const packageVersion = await (0, $83279610ce38fb08$export$18cd124b5098d330)(packageInfo);\n        $dCa9K$pythonversionchecka30f15a5js.debug(`Found version: ${packageVersion}`);\n        $dCa9K$pythonversionchecka30f15a5js4.setOutput('package_name', packageName);\n        $dCa9K$pythonversionchecka30f15a5js4.setOutput('package_version', packageVersion);\n        $dCa9K$pythonversionchecka30f15a5js.debug(`Querying ${simpleIndexUrl} for published versions`);\n        const versions = await (0, $022ca5c9575aea33$export$746251fb0c041440)(simpleIndexUrl, packageName);\n        if (versions === null) {\n            $dCa9K$pythonversionchecka30f15a5js3.setFailed(`Failed to query index ${simpleIndexUrl}`);\n            return;\n        }\n        $dCa9K$pythonversionchecka30f15a5js2.info(`Published versions for ${packageName}: ${versions.join(', ')}`);\n        const versionExists = versions.length > 0 ? versions.includes(packageVersion) : false;\n        $dCa9K$pythonversionchecka30f15a5js4.setOutput(`current_version_exists`, versionExists);\n    } catch (error) {\n        // Fail the workflow run if an error occurs\n        try {\n            $ed591221abffb8ad$var$assertHasMessage(error);\n            $dCa9K$pythonversionchecka30f15a5js3.setFailed(error.message);\n        } catch  {\n            $dCa9K$pythonversionchecka30f15a5js3.setFailed(`An unknown error occurred: ${String(error)}`);\n        }\n    }\n}\n\n\nexport {$ed591221abffb8ad$export$889ea624f2cb2c57 as run};\n//# sourceMappingURL=python-version-check.086e2a9d.js.map\n","import * as core from '@actions/core'\nimport { queryIndex } from './query.js'\nimport {\n  getPackageInfo,\n  getPackageVersion,\n  type PackageInfo\n} from './pyproject.js'\n\nfunction assertHasMessage(\n  error: unknown\n): asserts error is { message: string } {\n  if (\n    typeof error !== 'object' ||\n    error === null ||\n    !('message' in error) ||\n    typeof (error as { message: unknown }).message !== 'string'\n  ) {\n    throw new TypeError('The error does not have a message property')\n  }\n}\n\n/**\n * The main function for the action.\n *\n * @returns Resolves when the action is complete.\n */\nexport async function run(): Promise<void> {\n  try {\n    const pyprojectPath: string = core.getInput('path')\n    const simpleIndexUrl: string = core.getInput('index')\n    if (!pyprojectPath) {\n      core.setFailed('Input \"path\" is required')\n      return\n    }\n    if (!simpleIndexUrl) {\n      core.setFailed('Input \"index\" is required')\n      return\n    }\n\n    core.debug(`Looking for package at ${pyprojectPath}`)\n    const packageInfo: PackageInfo = await getPackageInfo(pyprojectPath)\n    const packageName: string = packageInfo.name\n    core.debug(`Found package: ${packageName}`)\n    const packageVersion: string = await getPackageVersion(packageInfo)\n    core.debug(`Found version: ${packageVersion}`)\n\n    core.setOutput('package_name', packageName)\n    core.setOutput('package_version', packageVersion)\n\n    core.debug(`Querying ${simpleIndexUrl} for published versions`)\n    const versions = await queryIndex(simpleIndexUrl, packageName)\n    if (versions === null) {\n      core.setFailed(`Failed to query index ${simpleIndexUrl}`)\n      return\n    }\n    core.info(`Published versions for ${packageName}: ${versions.join(', ')}`)\n    const versionExists =\n      versions.length > 0 ? versions.includes(packageVersion) : false\n    core.setOutput(`current_version_exists`, versionExists)\n  } catch (error) {\n    // Fail the workflow run if an error occurs\n    try {\n      assertHasMessage(error)\n      core.setFailed(error.message)\n    } catch {\n      core.setFailed(`An unknown error occurred: ${String(error)}`)\n    }\n  }\n}\n"],"names":["$dCa9K$pythonversionchecka30f15a5js4","queryIndex","$022ca5c9575aea33$export$746251fb0c041440","getPackageInfo","$83279610ce38fb08$export$cd17d76da7967240","getPackageVersion","$83279610ce38fb08$export$18cd124b5098d330","$ed591221abffb8ad$export$889ea624f2cb2c57","pyprojectPath","$dCa9K$pythonversionchecka30f15a5js1","getInput","simpleIndexUrl","$dCa9K$pythonversionchecka30f15a5js3","setFailed","$dCa9K$pythonversionchecka30f15a5js","debug","packageInfo","packageName","name","packageVersion","setOutput","versions","$dCa9K$pythonversionchecka30f15a5js2","info","join","versionExists","length","includes","error","message","TypeError","String","run"],"version":3,"file":"python-version-check.086e2a9d.js.map","sourceRoot":"../"}