{"mappings":"A,O,M,qD,A,Q,M,qD,A,Q,M,qD,A,Q,M,qD,A,Q,M,qD,A,Q,M,qD,A,Q,M,qD,A,Q,M,qD,A,Q,M,qD,A,Q,M,qD,A,Q,M,qD,A,W,M,Q,A,Q,mB,C,C,mB,C,C,qB,C,C,uB,C,K,Q,A,Q,mB,C,K,Y,C,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,A,C,E,E,Q,A,E,Q,S,C,C,C,ECIM,IAAA,EAAA,sDAAA,WAAA,CAAA,EAAA,EAAA,SAAA,CAAA,EAAA,qDAAA,SAAA,CACA,EAAA,sDAAA,OAAA,CAAA,EAAA,qDAAA,IAAA,CAAA,EAAA,EAAA,WAAA,CACN,GAAM,CAAA,qBAAE,CAAoB,CAAE,CAAG,IAE3B,IAAA,EAAA,qDAAA,gBAAA,CAAA,EAAA,EAAA,UAAA,CAAA,EAAA,sDAAA,eAAA,CAAA,EAAA,sDAAA,mBAAA,CAAA,EAAA,sDAAA,qBAAA,CAOA,EAAA,sDAAA,mBAAA,CAAA,EAAA,qDAAA,wBAAA,CAAA,EAAA,sDAAA,cAAA,CAAA,EAAA,EAAA,eAAA,CAAA,EAAA,sDAAA,WAAA,CAAA,EAAA,sDAAA,kBAAA,CAAA,EAAA,sDAAA,YAAA,CAAA,EAAA,sDAAA,aAAA,CAUN,GAAM,CAAA,oBAAE,CAAmB,CAAE,CAAG,EAC1B,IAAA,EAAA,sDAAA,QAAA,CAAA,EAAA,sDAAA,OAAA,CAAA,EAAA,EAAA,MAAA,CAAA,EAAA,qDAAA,MAAA,CAAA,EAAA,sDAAA,MAAA,CACA,EAAA,EAAA,MAAA,CACA,EAAA,EAAA,eAAA,CACA,EAAA,EAAA,aAAA,CACA,EAAA,EAAA,YAAA,CAAA,EAAA,qDAAA,UAAA,CAIN,IAAI,EAAkB,WAAW,eAAe,CAE1C,EAAmB,OAAO,mBAE1B,EAAmB,IAAI,EAAqB,CAAC,CAAA,OAAE,CAAM,CAAA,MAAE,CAAK,CAA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","sources":["<anon>","node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fetch/request.js"],"sourcesContent":["import $iPOOL$pythonversioncheck152f8bbajs2 from \"./python-version-check.152f8bba.js\";\nimport $iPOOL$pythonversioncheck5597d583js2 from \"./python-version-check.5597d583.js\";\nimport $iPOOL$pythonversioncheck67cd42dfjs from \"./python-version-check.67cd42df.js\";\nimport $iPOOL$pythonversioncheck7ed1514ejs from \"./python-version-check.7ed1514e.js\";\nimport $iPOOL$pythonversioncheck3f48d3eejs4 from \"./python-version-check.3f48d3ee.js\";\nimport $iPOOL$pythonversioncheck863e006ejs7 from \"./python-version-check.863e006e.js\";\nimport $iPOOL$pythonversioncheck92c00e26js4 from \"./python-version-check.92c00e26.js\";\nimport $iPOOL$pythonversioncheck801bb0f1js from \"./python-version-check.801bb0f1.js\";\nimport $iPOOL$pythonversioncheckb40ebe18js from \"./python-version-check.b40ebe18.js\";\nimport $iPOOL$pythonversioncheck685b5bb2js from \"./python-version-check.685b5bb2.js\";\nimport $iPOOL$pythonversioncheckebf2a848js1 from \"./python-version-check.ebf2a848.js\";\nimport * as $iPOOL$assert from \"assert\";\nimport {getMaxListeners as $iPOOL$getMaxListeners, setMaxListeners as $iPOOL$setMaxListeners, getEventListeners as $iPOOL$getEventListeners, defaultMaxListeners as $iPOOL$defaultMaxListeners} from \"events\";\nimport {TransformStream as $iPOOL$TransformStream} from \"stream/web\";\n\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire5a65\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire5a65\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"bEbfC\", function(module, exports) {\n/* globals AbortController */ 'use strict';\n\nvar $87ac28518c39a30b$require$extractBody = $iPOOL$pythonversioncheck152f8bbajs1.extractBody;\nvar $87ac28518c39a30b$require$mixinBody = $iPOOL$pythonversioncheck152f8bbajs2.mixinBody;\nvar $87ac28518c39a30b$require$cloneBody = $iPOOL$pythonversioncheck152f8bbajs.cloneBody;\n\nvar $87ac28518c39a30b$require$Headers = $iPOOL$pythonversioncheck5597d583js1.Headers;\nvar $87ac28518c39a30b$require$fillHeaders = $iPOOL$pythonversioncheck5597d583js.fill;\nvar $87ac28518c39a30b$require$HeadersList = $iPOOL$pythonversioncheck5597d583js2.HeadersList;\n\nconst { FinalizationRegistry: $87ac28518c39a30b$var$FinalizationRegistry } = $iPOOL$pythonversioncheck67cd42dfjs();\n\n\nvar $87ac28518c39a30b$require$isValidHTTPToken = $iPOOL$pythonversioncheck3f48d3eejs.isValidHTTPToken;\nvar $87ac28518c39a30b$require$sameOrigin = $iPOOL$pythonversioncheck3f48d3eejs4.sameOrigin;\nvar $87ac28518c39a30b$require$normalizeMethod = $iPOOL$pythonversioncheck3f48d3eejs2.normalizeMethod;\nvar $87ac28518c39a30b$require$makePolicyContainer = $iPOOL$pythonversioncheck3f48d3eejs1.makePolicyContainer;\nvar $87ac28518c39a30b$require$normalizeMethodRecord = $iPOOL$pythonversioncheck3f48d3eejs3.normalizeMethodRecord;\n\nvar $87ac28518c39a30b$require$forbiddenMethodsSet = $iPOOL$pythonversioncheck863e006ejs1.forbiddenMethodsSet;\nvar $87ac28518c39a30b$require$corsSafeListedMethodsSet = $iPOOL$pythonversioncheck863e006ejs.corsSafeListedMethodsSet;\nvar $87ac28518c39a30b$require$referrerPolicy = $iPOOL$pythonversioncheck863e006ejs2.referrerPolicy;\nvar $87ac28518c39a30b$require$requestRedirect = $iPOOL$pythonversioncheck863e006ejs7.requestRedirect;\nvar $87ac28518c39a30b$require$requestMode = $iPOOL$pythonversioncheck863e006ejs6.requestMode;\nvar $87ac28518c39a30b$require$requestCredentials = $iPOOL$pythonversioncheck863e006ejs4.requestCredentials;\nvar $87ac28518c39a30b$require$requestCache = $iPOOL$pythonversioncheck863e006ejs3.requestCache;\nvar $87ac28518c39a30b$require$requestDuplex = $iPOOL$pythonversioncheck863e006ejs5.requestDuplex;\nconst { kEnumerableProperty: $87ac28518c39a30b$var$kEnumerableProperty } = $iPOOL$pythonversioncheck7ed1514ejs;\n\nvar $87ac28518c39a30b$require$kHeaders = $iPOOL$pythonversioncheck92c00e26js1.kHeaders;\nvar $87ac28518c39a30b$require$kSignal = $iPOOL$pythonversioncheck92c00e26js3.kSignal;\nvar $87ac28518c39a30b$require$kState = $iPOOL$pythonversioncheck92c00e26js4.kState;\nvar $87ac28518c39a30b$require$kGuard = $iPOOL$pythonversioncheck92c00e26js.kGuard;\nvar $87ac28518c39a30b$require$kRealm = $iPOOL$pythonversioncheck92c00e26js2.kRealm;\n\nvar $87ac28518c39a30b$require$webidl = $iPOOL$pythonversioncheck801bb0f1js.webidl;\n\nvar $87ac28518c39a30b$require$getGlobalOrigin = $iPOOL$pythonversioncheckb40ebe18js.getGlobalOrigin;\n\nvar $87ac28518c39a30b$require$URLSerializer = $iPOOL$pythonversioncheck685b5bb2js.URLSerializer;\n\nvar $87ac28518c39a30b$require$kHeadersList = $iPOOL$pythonversioncheckebf2a848js1.kHeadersList;\nvar $87ac28518c39a30b$require$kConstruct = $iPOOL$pythonversioncheckebf2a848js.kConstruct;\n\n\nvar $87ac28518c39a30b$require$getMaxListeners = $iPOOL$getMaxListeners;\nvar $87ac28518c39a30b$require$setMaxListeners = $iPOOL$setMaxListeners;\nvar $87ac28518c39a30b$require$getEventListeners = $iPOOL$getEventListeners;\nvar $87ac28518c39a30b$require$defaultMaxListeners = $iPOOL$defaultMaxListeners;\nlet $87ac28518c39a30b$var$TransformStream = globalThis.TransformStream;\nconst $87ac28518c39a30b$var$kAbortController = Symbol('abortController');\nconst $87ac28518c39a30b$var$requestFinalizer = new $87ac28518c39a30b$var$FinalizationRegistry(({ signal: signal, abort: abort })=>{\n    signal.removeEventListener('abort', abort);\n});\n\n// https://fetch.spec.whatwg.org/#request-class\nclass $87ac28518c39a30b$var$Request {\n    // https://fetch.spec.whatwg.org/#dom-request\n    constructor(input, init = {}){\n        if (input === $87ac28518c39a30b$require$kConstruct) return;\n        $87ac28518c39a30b$require$webidl.argumentLengthCheck(arguments, 1, {\n            header: 'Request constructor'\n        });\n        input = $87ac28518c39a30b$require$webidl.converters.RequestInfo(input);\n        init = $87ac28518c39a30b$require$webidl.converters.RequestInit(init);\n        // https://html.spec.whatwg.org/multipage/webappapis.html#environment-settings-object\n        this[$87ac28518c39a30b$require$kRealm] = {\n            settingsObject: {\n                baseUrl: $87ac28518c39a30b$require$getGlobalOrigin(),\n                get origin () {\n                    return this.baseUrl?.origin;\n                },\n                policyContainer: $87ac28518c39a30b$require$makePolicyContainer()\n            }\n        };\n        // 1. Let request be null.\n        let request = null;\n        // 2. Let fallbackMode be null.\n        let fallbackMode = null;\n        // 3. Let baseURL be this’s relevant settings object’s API base URL.\n        const baseUrl = this[$87ac28518c39a30b$require$kRealm].settingsObject.baseUrl;\n        // 4. Let signal be null.\n        let signal = null;\n        // 5. If input is a string, then:\n        if (typeof input === 'string') {\n            // 1. Let parsedURL be the result of parsing input with baseURL.\n            // 2. If parsedURL is failure, then throw a TypeError.\n            let parsedURL;\n            try {\n                parsedURL = new URL(input, baseUrl);\n            } catch (err) {\n                throw new TypeError('Failed to parse URL from ' + input, {\n                    cause: err\n                });\n            }\n            // 3. If parsedURL includes credentials, then throw a TypeError.\n            if (parsedURL.username || parsedURL.password) throw new TypeError('Request cannot be constructed from a URL that includes credentials: ' + input);\n            // 4. Set request to a new request whose URL is parsedURL.\n            request = $87ac28518c39a30b$var$makeRequest({\n                urlList: [\n                    parsedURL\n                ]\n            });\n            // 5. Set fallbackMode to \"cors\".\n            fallbackMode = 'cors';\n        } else {\n            // 6. Otherwise:\n            // 7. Assert: input is a Request object.\n            $iPOOL$assert(input instanceof $87ac28518c39a30b$var$Request);\n            // 8. Set request to input’s request.\n            request = input[$87ac28518c39a30b$require$kState];\n            // 9. Set signal to input’s signal.\n            signal = input[$87ac28518c39a30b$require$kSignal];\n        }\n        // 7. Let origin be this’s relevant settings object’s origin.\n        const origin = this[$87ac28518c39a30b$require$kRealm].settingsObject.origin;\n        // 8. Let window be \"client\".\n        let window = 'client';\n        // 9. If request’s window is an environment settings object and its origin\n        // is same origin with origin, then set window to request’s window.\n        if (request.window?.constructor?.name === 'EnvironmentSettingsObject' && $87ac28518c39a30b$require$sameOrigin(request.window, origin)) window = request.window;\n        // 10. If init[\"window\"] exists and is non-null, then throw a TypeError.\n        if (init.window != null) throw new TypeError(`'window' option '${window}' must be null`);\n        // 11. If init[\"window\"] exists, then set window to \"no-window\".\n        if ('window' in init) window = 'no-window';\n        // 12. Set request to a new request with the following properties:\n        request = $87ac28518c39a30b$var$makeRequest({\n            // URL request’s URL.\n            // undici implementation note: this is set as the first item in request's urlList in makeRequest\n            // method request’s method.\n            method: request.method,\n            // header list A copy of request’s header list.\n            // undici implementation note: headersList is cloned in makeRequest\n            headersList: request.headersList,\n            // unsafe-request flag Set.\n            unsafeRequest: request.unsafeRequest,\n            // client This’s relevant settings object.\n            client: this[$87ac28518c39a30b$require$kRealm].settingsObject,\n            window: // window window.\n            window,\n            // priority request’s priority.\n            priority: request.priority,\n            // origin request’s origin. The propagation of the origin is only significant for navigation requests\n            // being handled by a service worker. In this scenario a request can have an origin that is different\n            // from the current client.\n            origin: request.origin,\n            // referrer request’s referrer.\n            referrer: request.referrer,\n            // referrer policy request’s referrer policy.\n            referrerPolicy: request.referrerPolicy,\n            // mode request’s mode.\n            mode: request.mode,\n            // credentials mode request’s credentials mode.\n            credentials: request.credentials,\n            // cache mode request’s cache mode.\n            cache: request.cache,\n            // redirect mode request’s redirect mode.\n            redirect: request.redirect,\n            // integrity metadata request’s integrity metadata.\n            integrity: request.integrity,\n            // keepalive request’s keepalive.\n            keepalive: request.keepalive,\n            // reload-navigation flag request’s reload-navigation flag.\n            reloadNavigation: request.reloadNavigation,\n            // history-navigation flag request’s history-navigation flag.\n            historyNavigation: request.historyNavigation,\n            // URL list A clone of request’s URL list.\n            urlList: [\n                ...request.urlList\n            ]\n        });\n        const initHasKey = Object.keys(init).length !== 0;\n        // 13. If init is not empty, then:\n        if (initHasKey) {\n            // 1. If request’s mode is \"navigate\", then set it to \"same-origin\".\n            if (request.mode === 'navigate') request.mode = 'same-origin';\n            // 2. Unset request’s reload-navigation flag.\n            request.reloadNavigation = false;\n            // 3. Unset request’s history-navigation flag.\n            request.historyNavigation = false;\n            // 4. Set request’s origin to \"client\".\n            request.origin = 'client';\n            // 5. Set request’s referrer to \"client\"\n            request.referrer = 'client';\n            // 6. Set request’s referrer policy to the empty string.\n            request.referrerPolicy = '';\n            // 7. Set request’s URL to request’s current URL.\n            request.url = request.urlList[request.urlList.length - 1];\n            // 8. Set request’s URL list to « request’s URL ».\n            request.urlList = [\n                request.url\n            ];\n        }\n        // 14. If init[\"referrer\"] exists, then:\n        if (init.referrer !== undefined) {\n            // 1. Let referrer be init[\"referrer\"].\n            const referrer = init.referrer;\n            // 2. If referrer is the empty string, then set request’s referrer to \"no-referrer\".\n            if (referrer === '') request.referrer = 'no-referrer';\n            else {\n                // 1. Let parsedReferrer be the result of parsing referrer with\n                // baseURL.\n                // 2. If parsedReferrer is failure, then throw a TypeError.\n                let parsedReferrer;\n                try {\n                    parsedReferrer = new URL(referrer, baseUrl);\n                } catch (err) {\n                    throw new TypeError(`Referrer \"${referrer}\" is not a valid URL.`, {\n                        cause: err\n                    });\n                }\n                // 3. If one of the following is true\n                // - parsedReferrer’s scheme is \"about\" and path is the string \"client\"\n                // - parsedReferrer’s origin is not same origin with origin\n                // then set request’s referrer to \"client\".\n                if (parsedReferrer.protocol === 'about:' && parsedReferrer.hostname === 'client' || origin && !$87ac28518c39a30b$require$sameOrigin(parsedReferrer, this[$87ac28518c39a30b$require$kRealm].settingsObject.baseUrl)) request.referrer = 'client';\n                else // 4. Otherwise, set request’s referrer to parsedReferrer.\n                request.referrer = parsedReferrer;\n            }\n        }\n        // 15. If init[\"referrerPolicy\"] exists, then set request’s referrer policy\n        // to it.\n        if (init.referrerPolicy !== undefined) request.referrerPolicy = init.referrerPolicy;\n        // 16. Let mode be init[\"mode\"] if it exists, and fallbackMode otherwise.\n        let mode;\n        if (init.mode !== undefined) mode = init.mode;\n        else mode = fallbackMode;\n        // 17. If mode is \"navigate\", then throw a TypeError.\n        if (mode === 'navigate') throw $87ac28518c39a30b$require$webidl.errors.exception({\n            header: 'Request constructor',\n            message: 'invalid request mode navigate.'\n        });\n        // 18. If mode is non-null, set request’s mode to mode.\n        if (mode != null) request.mode = mode;\n        // 19. If init[\"credentials\"] exists, then set request’s credentials mode\n        // to it.\n        if (init.credentials !== undefined) request.credentials = init.credentials;\n        // 18. If init[\"cache\"] exists, then set request’s cache mode to it.\n        if (init.cache !== undefined) request.cache = init.cache;\n        // 21. If request’s cache mode is \"only-if-cached\" and request’s mode is\n        // not \"same-origin\", then throw a TypeError.\n        if (request.cache === 'only-if-cached' && request.mode !== 'same-origin') throw new TypeError(\"'only-if-cached' can be set only with 'same-origin' mode\");\n        // 22. If init[\"redirect\"] exists, then set request’s redirect mode to it.\n        if (init.redirect !== undefined) request.redirect = init.redirect;\n        // 23. If init[\"integrity\"] exists, then set request’s integrity metadata to it.\n        if (init.integrity != null) request.integrity = String(init.integrity);\n        // 24. If init[\"keepalive\"] exists, then set request’s keepalive to it.\n        if (init.keepalive !== undefined) request.keepalive = Boolean(init.keepalive);\n        // 25. If init[\"method\"] exists, then:\n        if (init.method !== undefined) {\n            // 1. Let method be init[\"method\"].\n            let method = init.method;\n            // 2. If method is not a method or method is a forbidden method, then\n            // throw a TypeError.\n            if (!$87ac28518c39a30b$require$isValidHTTPToken(method)) throw new TypeError(`'${method}' is not a valid HTTP method.`);\n            if ($87ac28518c39a30b$require$forbiddenMethodsSet.has(method.toUpperCase())) throw new TypeError(`'${method}' HTTP method is unsupported.`);\n            // 3. Normalize method.\n            method = $87ac28518c39a30b$require$normalizeMethodRecord[method] ?? $87ac28518c39a30b$require$normalizeMethod(method);\n            // 4. Set request’s method to method.\n            request.method = method;\n        }\n        // 26. If init[\"signal\"] exists, then set signal to it.\n        if (init.signal !== undefined) signal = init.signal;\n        // 27. Set this’s request to request.\n        this[$87ac28518c39a30b$require$kState] = request;\n        // 28. Set this’s signal to a new AbortSignal object with this’s relevant\n        // Realm.\n        // TODO: could this be simplified with AbortSignal.any\n        // (https://dom.spec.whatwg.org/#dom-abortsignal-any)\n        const ac = new AbortController();\n        this[$87ac28518c39a30b$require$kSignal] = ac.signal;\n        this[$87ac28518c39a30b$require$kSignal][$87ac28518c39a30b$require$kRealm] = this[$87ac28518c39a30b$require$kRealm];\n        // 29. If signal is not null, then make this’s signal follow signal.\n        if (signal != null) {\n            if (!signal || typeof signal.aborted !== 'boolean' || typeof signal.addEventListener !== 'function') throw new TypeError(\"Failed to construct 'Request': member signal is not of type AbortSignal.\");\n            if (signal.aborted) ac.abort(signal.reason);\n            else {\n                // Keep a strong ref to ac while request object\n                // is alive. This is needed to prevent AbortController\n                // from being prematurely garbage collected.\n                // See, https://github.com/nodejs/undici/issues/1926.\n                this[$87ac28518c39a30b$var$kAbortController] = ac;\n                const acRef = new WeakRef(ac);\n                const abort = function() {\n                    const ac = acRef.deref();\n                    if (ac !== undefined) ac.abort(this.reason);\n                };\n                // Third-party AbortControllers may not work with these.\n                // See, https://github.com/nodejs/undici/pull/1910#issuecomment-1464495619.\n                try {\n                    // If the max amount of listeners is equal to the default, increase it\n                    // This is only available in node >= v19.9.0\n                    if (typeof $87ac28518c39a30b$require$getMaxListeners === 'function' && $87ac28518c39a30b$require$getMaxListeners(signal) === $87ac28518c39a30b$require$defaultMaxListeners) $87ac28518c39a30b$require$setMaxListeners(100, signal);\n                    else if ($87ac28518c39a30b$require$getEventListeners(signal, 'abort').length >= $87ac28518c39a30b$require$defaultMaxListeners) $87ac28518c39a30b$require$setMaxListeners(100, signal);\n                } catch  {}\n                $iPOOL$pythonversioncheck7ed1514ejs.addAbortListener(signal, abort);\n                $87ac28518c39a30b$var$requestFinalizer.register(ac, {\n                    signal: signal,\n                    abort: abort\n                });\n            }\n        }\n        // 30. Set this’s headers to a new Headers object with this’s relevant\n        // Realm, whose header list is request’s header list and guard is\n        // \"request\".\n        this[$87ac28518c39a30b$require$kHeaders] = new $87ac28518c39a30b$require$Headers($87ac28518c39a30b$require$kConstruct);\n        this[$87ac28518c39a30b$require$kHeaders][$87ac28518c39a30b$require$kHeadersList] = request.headersList;\n        this[$87ac28518c39a30b$require$kHeaders][$87ac28518c39a30b$require$kGuard] = 'request';\n        this[$87ac28518c39a30b$require$kHeaders][$87ac28518c39a30b$require$kRealm] = this[$87ac28518c39a30b$require$kRealm];\n        // 31. If this’s request’s mode is \"no-cors\", then:\n        if (mode === 'no-cors') {\n            // 1. If this’s request’s method is not a CORS-safelisted method,\n            // then throw a TypeError.\n            if (!$87ac28518c39a30b$require$corsSafeListedMethodsSet.has(request.method)) throw new TypeError(`'${request.method} is unsupported in no-cors mode.`);\n            // 2. Set this’s headers’s guard to \"request-no-cors\".\n            this[$87ac28518c39a30b$require$kHeaders][$87ac28518c39a30b$require$kGuard] = 'request-no-cors';\n        }\n        // 32. If init is not empty, then:\n        if (initHasKey) {\n            /** @type {HeadersList} */ const headersList = this[$87ac28518c39a30b$require$kHeaders][$87ac28518c39a30b$require$kHeadersList];\n            // 1. Let headers be a copy of this’s headers and its associated header\n            // list.\n            // 2. If init[\"headers\"] exists, then set headers to init[\"headers\"].\n            const headers = init.headers !== undefined ? init.headers : new $87ac28518c39a30b$require$HeadersList(headersList);\n            // 3. Empty this’s headers’s header list.\n            headersList.clear();\n            // 4. If headers is a Headers object, then for each header in its header\n            // list, append header’s name/header’s value to this’s headers.\n            if (headers instanceof $87ac28518c39a30b$require$HeadersList) {\n                for (const [key, val] of headers)headersList.append(key, val);\n                // Note: Copy the `set-cookie` meta-data.\n                headersList.cookies = headers.cookies;\n            } else // 5. Otherwise, fill this’s headers with headers.\n            $87ac28518c39a30b$require$fillHeaders(this[$87ac28518c39a30b$require$kHeaders], headers);\n        }\n        // 33. Let inputBody be input’s request’s body if input is a Request\n        // object; otherwise null.\n        const inputBody = input instanceof $87ac28518c39a30b$var$Request ? input[$87ac28518c39a30b$require$kState].body : null;\n        // 34. If either init[\"body\"] exists and is non-null or inputBody is\n        // non-null, and request’s method is `GET` or `HEAD`, then throw a\n        // TypeError.\n        if ((init.body != null || inputBody != null) && (request.method === 'GET' || request.method === 'HEAD')) throw new TypeError('Request with GET/HEAD method cannot have body.');\n        // 35. Let initBody be null.\n        let initBody = null;\n        // 36. If init[\"body\"] exists and is non-null, then:\n        if (init.body != null) {\n            // 1. Let Content-Type be null.\n            // 2. Set initBody and Content-Type to the result of extracting\n            // init[\"body\"], with keepalive set to request’s keepalive.\n            const [extractedBody, contentType] = $87ac28518c39a30b$require$extractBody(init.body, request.keepalive);\n            initBody = extractedBody;\n            // 3, If Content-Type is non-null and this’s headers’s header list does\n            // not contain `Content-Type`, then append `Content-Type`/Content-Type to\n            // this’s headers.\n            if (contentType && !this[$87ac28518c39a30b$require$kHeaders][$87ac28518c39a30b$require$kHeadersList].contains('content-type')) this[$87ac28518c39a30b$require$kHeaders].append('content-type', contentType);\n        }\n        // 37. Let inputOrInitBody be initBody if it is non-null; otherwise\n        // inputBody.\n        const inputOrInitBody = initBody ?? inputBody;\n        // 38. If inputOrInitBody is non-null and inputOrInitBody’s source is\n        // null, then:\n        if (inputOrInitBody != null && inputOrInitBody.source == null) {\n            // 1. If initBody is non-null and init[\"duplex\"] does not exist,\n            //    then throw a TypeError.\n            if (initBody != null && init.duplex == null) throw new TypeError('RequestInit: duplex option is required when sending a body.');\n            // 2. If this’s request’s mode is neither \"same-origin\" nor \"cors\",\n            // then throw a TypeError.\n            if (request.mode !== 'same-origin' && request.mode !== 'cors') throw new TypeError('If request is made from ReadableStream, mode should be \"same-origin\" or \"cors\"');\n            // 3. Set this’s request’s use-CORS-preflight flag.\n            request.useCORSPreflightFlag = true;\n        }\n        // 39. Let finalBody be inputOrInitBody.\n        let finalBody = inputOrInitBody;\n        // 40. If initBody is null and inputBody is non-null, then:\n        if (initBody == null && inputBody != null) {\n            // 1. If input is unusable, then throw a TypeError.\n            if ($iPOOL$pythonversioncheck7ed1514ejs.isDisturbed(inputBody.stream) || inputBody.stream.locked) throw new TypeError('Cannot construct a Request with a Request object that has already been used.');\n            // 2. Set finalBody to the result of creating a proxy for inputBody.\n            if (!$87ac28518c39a30b$var$TransformStream) $87ac28518c39a30b$var$TransformStream = $iPOOL$TransformStream;\n            // https://streams.spec.whatwg.org/#readablestream-create-a-proxy\n            const identityTransform = new $87ac28518c39a30b$var$TransformStream();\n            inputBody.stream.pipeThrough(identityTransform);\n            finalBody = {\n                source: inputBody.source,\n                length: inputBody.length,\n                stream: identityTransform.readable\n            };\n        }\n        // 41. Set this’s request’s body to finalBody.\n        this[$87ac28518c39a30b$require$kState].body = finalBody;\n    }\n    // Returns request’s HTTP method, which is \"GET\" by default.\n    get method() {\n        $87ac28518c39a30b$require$webidl.brandCheck(this, $87ac28518c39a30b$var$Request);\n        // The method getter steps are to return this’s request’s method.\n        return this[$87ac28518c39a30b$require$kState].method;\n    }\n    // Returns the URL of request as a string.\n    get url() {\n        $87ac28518c39a30b$require$webidl.brandCheck(this, $87ac28518c39a30b$var$Request);\n        // The url getter steps are to return this’s request’s URL, serialized.\n        return $87ac28518c39a30b$require$URLSerializer(this[$87ac28518c39a30b$require$kState].url);\n    }\n    // Returns a Headers object consisting of the headers associated with request.\n    // Note that headers added in the network layer by the user agent will not\n    // be accounted for in this object, e.g., the \"Host\" header.\n    get headers() {\n        $87ac28518c39a30b$require$webidl.brandCheck(this, $87ac28518c39a30b$var$Request);\n        // The headers getter steps are to return this’s headers.\n        return this[$87ac28518c39a30b$require$kHeaders];\n    }\n    // Returns the kind of resource requested by request, e.g., \"document\"\n    // or \"script\".\n    get destination() {\n        $87ac28518c39a30b$require$webidl.brandCheck(this, $87ac28518c39a30b$var$Request);\n        // The destination getter are to return this’s request’s destination.\n        return this[$87ac28518c39a30b$require$kState].destination;\n    }\n    // Returns the referrer of request. Its value can be a same-origin URL if\n    // explicitly set in init, the empty string to indicate no referrer, and\n    // \"about:client\" when defaulting to the global’s default. This is used\n    // during fetching to determine the value of the `Referer` header of the\n    // request being made.\n    get referrer() {\n        $87ac28518c39a30b$require$webidl.brandCheck(this, $87ac28518c39a30b$var$Request);\n        // 1. If this’s request’s referrer is \"no-referrer\", then return the\n        // empty string.\n        if (this[$87ac28518c39a30b$require$kState].referrer === 'no-referrer') return '';\n        // 2. If this’s request’s referrer is \"client\", then return\n        // \"about:client\".\n        if (this[$87ac28518c39a30b$require$kState].referrer === 'client') return 'about:client';\n        // Return this’s request’s referrer, serialized.\n        return this[$87ac28518c39a30b$require$kState].referrer.toString();\n    }\n    // Returns the referrer policy associated with request.\n    // This is used during fetching to compute the value of the request’s\n    // referrer.\n    get referrerPolicy() {\n        $87ac28518c39a30b$require$webidl.brandCheck(this, $87ac28518c39a30b$var$Request);\n        // The referrerPolicy getter steps are to return this’s request’s referrer policy.\n        return this[$87ac28518c39a30b$require$kState].referrerPolicy;\n    }\n    // Returns the mode associated with request, which is a string indicating\n    // whether the request will use CORS, or will be restricted to same-origin\n    // URLs.\n    get mode() {\n        $87ac28518c39a30b$require$webidl.brandCheck(this, $87ac28518c39a30b$var$Request);\n        // The mode getter steps are to return this’s request’s mode.\n        return this[$87ac28518c39a30b$require$kState].mode;\n    }\n    // Returns the credentials mode associated with request,\n    // which is a string indicating whether credentials will be sent with the\n    // request always, never, or only when sent to a same-origin URL.\n    get credentials() {\n        // The credentials getter steps are to return this’s request’s credentials mode.\n        return this[$87ac28518c39a30b$require$kState].credentials;\n    }\n    // Returns the cache mode associated with request,\n    // which is a string indicating how the request will\n    // interact with the browser’s cache when fetching.\n    get cache() {\n        $87ac28518c39a30b$require$webidl.brandCheck(this, $87ac28518c39a30b$var$Request);\n        // The cache getter steps are to return this’s request’s cache mode.\n        return this[$87ac28518c39a30b$require$kState].cache;\n    }\n    // Returns the redirect mode associated with request,\n    // which is a string indicating how redirects for the\n    // request will be handled during fetching. A request\n    // will follow redirects by default.\n    get redirect() {\n        $87ac28518c39a30b$require$webidl.brandCheck(this, $87ac28518c39a30b$var$Request);\n        // The redirect getter steps are to return this’s request’s redirect mode.\n        return this[$87ac28518c39a30b$require$kState].redirect;\n    }\n    // Returns request’s subresource integrity metadata, which is a\n    // cryptographic hash of the resource being fetched. Its value\n    // consists of multiple hashes separated by whitespace. [SRI]\n    get integrity() {\n        $87ac28518c39a30b$require$webidl.brandCheck(this, $87ac28518c39a30b$var$Request);\n        // The integrity getter steps are to return this’s request’s integrity\n        // metadata.\n        return this[$87ac28518c39a30b$require$kState].integrity;\n    }\n    // Returns a boolean indicating whether or not request can outlive the\n    // global in which it was created.\n    get keepalive() {\n        $87ac28518c39a30b$require$webidl.brandCheck(this, $87ac28518c39a30b$var$Request);\n        // The keepalive getter steps are to return this’s request’s keepalive.\n        return this[$87ac28518c39a30b$require$kState].keepalive;\n    }\n    // Returns a boolean indicating whether or not request is for a reload\n    // navigation.\n    get isReloadNavigation() {\n        $87ac28518c39a30b$require$webidl.brandCheck(this, $87ac28518c39a30b$var$Request);\n        // The isReloadNavigation getter steps are to return true if this’s\n        // request’s reload-navigation flag is set; otherwise false.\n        return this[$87ac28518c39a30b$require$kState].reloadNavigation;\n    }\n    // Returns a boolean indicating whether or not request is for a history\n    // navigation (a.k.a. back-foward navigation).\n    get isHistoryNavigation() {\n        $87ac28518c39a30b$require$webidl.brandCheck(this, $87ac28518c39a30b$var$Request);\n        // The isHistoryNavigation getter steps are to return true if this’s request’s\n        // history-navigation flag is set; otherwise false.\n        return this[$87ac28518c39a30b$require$kState].historyNavigation;\n    }\n    // Returns the signal associated with request, which is an AbortSignal\n    // object indicating whether or not request has been aborted, and its\n    // abort event handler.\n    get signal() {\n        $87ac28518c39a30b$require$webidl.brandCheck(this, $87ac28518c39a30b$var$Request);\n        // The signal getter steps are to return this’s signal.\n        return this[$87ac28518c39a30b$require$kSignal];\n    }\n    get body() {\n        $87ac28518c39a30b$require$webidl.brandCheck(this, $87ac28518c39a30b$var$Request);\n        return this[$87ac28518c39a30b$require$kState].body ? this[$87ac28518c39a30b$require$kState].body.stream : null;\n    }\n    get bodyUsed() {\n        $87ac28518c39a30b$require$webidl.brandCheck(this, $87ac28518c39a30b$var$Request);\n        return !!this[$87ac28518c39a30b$require$kState].body && $iPOOL$pythonversioncheck7ed1514ejs.isDisturbed(this[$87ac28518c39a30b$require$kState].body.stream);\n    }\n    get duplex() {\n        $87ac28518c39a30b$require$webidl.brandCheck(this, $87ac28518c39a30b$var$Request);\n        return 'half';\n    }\n    // Returns a clone of request.\n    clone() {\n        $87ac28518c39a30b$require$webidl.brandCheck(this, $87ac28518c39a30b$var$Request);\n        // 1. If this is unusable, then throw a TypeError.\n        if (this.bodyUsed || this.body?.locked) throw new TypeError('unusable');\n        // 2. Let clonedRequest be the result of cloning this’s request.\n        const clonedRequest = $87ac28518c39a30b$var$cloneRequest(this[$87ac28518c39a30b$require$kState]);\n        // 3. Let clonedRequestObject be the result of creating a Request object,\n        // given clonedRequest, this’s headers’s guard, and this’s relevant Realm.\n        const clonedRequestObject = new $87ac28518c39a30b$var$Request($87ac28518c39a30b$require$kConstruct);\n        clonedRequestObject[$87ac28518c39a30b$require$kState] = clonedRequest;\n        clonedRequestObject[$87ac28518c39a30b$require$kRealm] = this[$87ac28518c39a30b$require$kRealm];\n        clonedRequestObject[$87ac28518c39a30b$require$kHeaders] = new $87ac28518c39a30b$require$Headers($87ac28518c39a30b$require$kConstruct);\n        clonedRequestObject[$87ac28518c39a30b$require$kHeaders][$87ac28518c39a30b$require$kHeadersList] = clonedRequest.headersList;\n        clonedRequestObject[$87ac28518c39a30b$require$kHeaders][$87ac28518c39a30b$require$kGuard] = this[$87ac28518c39a30b$require$kHeaders][$87ac28518c39a30b$require$kGuard];\n        clonedRequestObject[$87ac28518c39a30b$require$kHeaders][$87ac28518c39a30b$require$kRealm] = this[$87ac28518c39a30b$require$kHeaders][$87ac28518c39a30b$require$kRealm];\n        // 4. Make clonedRequestObject’s signal follow this’s signal.\n        const ac = new AbortController();\n        if (this.signal.aborted) ac.abort(this.signal.reason);\n        else $iPOOL$pythonversioncheck7ed1514ejs.addAbortListener(this.signal, ()=>{\n            ac.abort(this.signal.reason);\n        });\n        clonedRequestObject[$87ac28518c39a30b$require$kSignal] = ac.signal;\n        // 4. Return clonedRequestObject.\n        return clonedRequestObject;\n    }\n}\n$87ac28518c39a30b$require$mixinBody($87ac28518c39a30b$var$Request);\nfunction $87ac28518c39a30b$var$makeRequest(init) {\n    // https://fetch.spec.whatwg.org/#requests\n    const request = {\n        method: 'GET',\n        localURLsOnly: false,\n        unsafeRequest: false,\n        body: null,\n        client: null,\n        reservedClient: null,\n        replacesClientId: '',\n        window: 'client',\n        keepalive: false,\n        serviceWorkers: 'all',\n        initiator: '',\n        destination: '',\n        priority: null,\n        origin: 'client',\n        policyContainer: 'client',\n        referrer: 'client',\n        referrerPolicy: '',\n        mode: 'no-cors',\n        useCORSPreflightFlag: false,\n        credentials: 'same-origin',\n        useCredentials: false,\n        cache: 'default',\n        redirect: 'follow',\n        integrity: '',\n        cryptoGraphicsNonceMetadata: '',\n        parserMetadata: '',\n        reloadNavigation: false,\n        historyNavigation: false,\n        userActivation: false,\n        taintedOrigin: false,\n        redirectCount: 0,\n        responseTainting: 'basic',\n        preventNoCacheCacheControlHeaderModification: false,\n        done: false,\n        timingAllowFailed: false,\n        ...init,\n        headersList: init.headersList ? new $87ac28518c39a30b$require$HeadersList(init.headersList) : new $87ac28518c39a30b$require$HeadersList()\n    };\n    request.url = request.urlList[0];\n    return request;\n}\n// https://fetch.spec.whatwg.org/#concept-request-clone\nfunction $87ac28518c39a30b$var$cloneRequest(request) {\n    // To clone a request request, run these steps:\n    // 1. Let newRequest be a copy of request, except for its body.\n    const newRequest = $87ac28518c39a30b$var$makeRequest({\n        ...request,\n        body: null\n    });\n    // 2. If request’s body is non-null, set newRequest’s body to the\n    // result of cloning request’s body.\n    if (request.body != null) newRequest.body = $87ac28518c39a30b$require$cloneBody(request.body);\n    // 3. Return newRequest.\n    return newRequest;\n}\nObject.defineProperties($87ac28518c39a30b$var$Request.prototype, {\n    method: $87ac28518c39a30b$var$kEnumerableProperty,\n    url: $87ac28518c39a30b$var$kEnumerableProperty,\n    headers: $87ac28518c39a30b$var$kEnumerableProperty,\n    redirect: $87ac28518c39a30b$var$kEnumerableProperty,\n    clone: $87ac28518c39a30b$var$kEnumerableProperty,\n    signal: $87ac28518c39a30b$var$kEnumerableProperty,\n    duplex: $87ac28518c39a30b$var$kEnumerableProperty,\n    destination: $87ac28518c39a30b$var$kEnumerableProperty,\n    body: $87ac28518c39a30b$var$kEnumerableProperty,\n    bodyUsed: $87ac28518c39a30b$var$kEnumerableProperty,\n    isHistoryNavigation: $87ac28518c39a30b$var$kEnumerableProperty,\n    isReloadNavigation: $87ac28518c39a30b$var$kEnumerableProperty,\n    keepalive: $87ac28518c39a30b$var$kEnumerableProperty,\n    integrity: $87ac28518c39a30b$var$kEnumerableProperty,\n    cache: $87ac28518c39a30b$var$kEnumerableProperty,\n    credentials: $87ac28518c39a30b$var$kEnumerableProperty,\n    attribute: $87ac28518c39a30b$var$kEnumerableProperty,\n    referrerPolicy: $87ac28518c39a30b$var$kEnumerableProperty,\n    referrer: $87ac28518c39a30b$var$kEnumerableProperty,\n    mode: $87ac28518c39a30b$var$kEnumerableProperty,\n    [Symbol.toStringTag]: {\n        value: 'Request',\n        configurable: true\n    }\n});\n$87ac28518c39a30b$require$webidl.converters.Request = $87ac28518c39a30b$require$webidl.interfaceConverter($87ac28518c39a30b$var$Request);\n// https://fetch.spec.whatwg.org/#requestinfo\n$87ac28518c39a30b$require$webidl.converters.RequestInfo = function(V) {\n    if (typeof V === 'string') return $87ac28518c39a30b$require$webidl.converters.USVString(V);\n    if (V instanceof $87ac28518c39a30b$var$Request) return $87ac28518c39a30b$require$webidl.converters.Request(V);\n    return $87ac28518c39a30b$require$webidl.converters.USVString(V);\n};\n$87ac28518c39a30b$require$webidl.converters.AbortSignal = $87ac28518c39a30b$require$webidl.interfaceConverter(AbortSignal);\n// https://fetch.spec.whatwg.org/#requestinit\n$87ac28518c39a30b$require$webidl.converters.RequestInit = $87ac28518c39a30b$require$webidl.dictionaryConverter([\n    {\n        key: 'method',\n        converter: $87ac28518c39a30b$require$webidl.converters.ByteString\n    },\n    {\n        key: 'headers',\n        converter: $87ac28518c39a30b$require$webidl.converters.HeadersInit\n    },\n    {\n        key: 'body',\n        converter: $87ac28518c39a30b$require$webidl.nullableConverter($87ac28518c39a30b$require$webidl.converters.BodyInit)\n    },\n    {\n        key: 'referrer',\n        converter: $87ac28518c39a30b$require$webidl.converters.USVString\n    },\n    {\n        key: 'referrerPolicy',\n        converter: $87ac28518c39a30b$require$webidl.converters.DOMString,\n        // https://w3c.github.io/webappsec-referrer-policy/#referrer-policy\n        allowedValues: $87ac28518c39a30b$require$referrerPolicy\n    },\n    {\n        key: 'mode',\n        converter: $87ac28518c39a30b$require$webidl.converters.DOMString,\n        // https://fetch.spec.whatwg.org/#concept-request-mode\n        allowedValues: $87ac28518c39a30b$require$requestMode\n    },\n    {\n        key: 'credentials',\n        converter: $87ac28518c39a30b$require$webidl.converters.DOMString,\n        // https://fetch.spec.whatwg.org/#requestcredentials\n        allowedValues: $87ac28518c39a30b$require$requestCredentials\n    },\n    {\n        key: 'cache',\n        converter: $87ac28518c39a30b$require$webidl.converters.DOMString,\n        // https://fetch.spec.whatwg.org/#requestcache\n        allowedValues: $87ac28518c39a30b$require$requestCache\n    },\n    {\n        key: 'redirect',\n        converter: $87ac28518c39a30b$require$webidl.converters.DOMString,\n        // https://fetch.spec.whatwg.org/#requestredirect\n        allowedValues: $87ac28518c39a30b$require$requestRedirect\n    },\n    {\n        key: 'integrity',\n        converter: $87ac28518c39a30b$require$webidl.converters.DOMString\n    },\n    {\n        key: 'keepalive',\n        converter: $87ac28518c39a30b$require$webidl.converters.boolean\n    },\n    {\n        key: 'signal',\n        converter: $87ac28518c39a30b$require$webidl.nullableConverter((signal)=>$87ac28518c39a30b$require$webidl.converters.AbortSignal(signal, {\n                strict: false\n            }))\n    },\n    {\n        key: 'window',\n        converter: $87ac28518c39a30b$require$webidl.converters.any\n    },\n    {\n        key: 'duplex',\n        converter: $87ac28518c39a30b$require$webidl.converters.DOMString,\n        allowedValues: $87ac28518c39a30b$require$requestDuplex\n    }\n]);\nmodule.exports = {\n    Request: $87ac28518c39a30b$var$Request,\n    makeRequest: $87ac28518c39a30b$var$makeRequest\n};\n\n});\n\n\nparcelRequire(\"bEbfC\");\n\n//# sourceMappingURL=python-version-check.ff3942ba.js.map\n","/* globals AbortController */\n\n'use strict'\n\nconst { extractBody, mixinBody, cloneBody } = require('./body')\nconst { Headers, fill: fillHeaders, HeadersList } = require('./headers')\nconst { FinalizationRegistry } = require('../compat/dispatcher-weakref')()\nconst util = require('../core/util')\nconst {\n  isValidHTTPToken,\n  sameOrigin,\n  normalizeMethod,\n  makePolicyContainer,\n  normalizeMethodRecord\n} = require('./util')\nconst {\n  forbiddenMethodsSet,\n  corsSafeListedMethodsSet,\n  referrerPolicy,\n  requestRedirect,\n  requestMode,\n  requestCredentials,\n  requestCache,\n  requestDuplex\n} = require('./constants')\nconst { kEnumerableProperty } = util\nconst { kHeaders, kSignal, kState, kGuard, kRealm } = require('./symbols')\nconst { webidl } = require('./webidl')\nconst { getGlobalOrigin } = require('./global')\nconst { URLSerializer } = require('./dataURL')\nconst { kHeadersList, kConstruct } = require('../core/symbols')\nconst assert = require('assert')\nconst { getMaxListeners, setMaxListeners, getEventListeners, defaultMaxListeners } = require('events')\n\nlet TransformStream = globalThis.TransformStream\n\nconst kAbortController = Symbol('abortController')\n\nconst requestFinalizer = new FinalizationRegistry(({ signal, abort }) => {\n  signal.removeEventListener('abort', abort)\n})\n\n// https://fetch.spec.whatwg.org/#request-class\nclass Request {\n  // https://fetch.spec.whatwg.org/#dom-request\n  constructor (input, init = {}) {\n    if (input === kConstruct) {\n      return\n    }\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'Request constructor' })\n\n    input = webidl.converters.RequestInfo(input)\n    init = webidl.converters.RequestInit(init)\n\n    // https://html.spec.whatwg.org/multipage/webappapis.html#environment-settings-object\n    this[kRealm] = {\n      settingsObject: {\n        baseUrl: getGlobalOrigin(),\n        get origin () {\n          return this.baseUrl?.origin\n        },\n        policyContainer: makePolicyContainer()\n      }\n    }\n\n    // 1. Let request be null.\n    let request = null\n\n    // 2. Let fallbackMode be null.\n    let fallbackMode = null\n\n    // 3. Let baseURL be this’s relevant settings object’s API base URL.\n    const baseUrl = this[kRealm].settingsObject.baseUrl\n\n    // 4. Let signal be null.\n    let signal = null\n\n    // 5. If input is a string, then:\n    if (typeof input === 'string') {\n      // 1. Let parsedURL be the result of parsing input with baseURL.\n      // 2. If parsedURL is failure, then throw a TypeError.\n      let parsedURL\n      try {\n        parsedURL = new URL(input, baseUrl)\n      } catch (err) {\n        throw new TypeError('Failed to parse URL from ' + input, { cause: err })\n      }\n\n      // 3. If parsedURL includes credentials, then throw a TypeError.\n      if (parsedURL.username || parsedURL.password) {\n        throw new TypeError(\n          'Request cannot be constructed from a URL that includes credentials: ' +\n            input\n        )\n      }\n\n      // 4. Set request to a new request whose URL is parsedURL.\n      request = makeRequest({ urlList: [parsedURL] })\n\n      // 5. Set fallbackMode to \"cors\".\n      fallbackMode = 'cors'\n    } else {\n      // 6. Otherwise:\n\n      // 7. Assert: input is a Request object.\n      assert(input instanceof Request)\n\n      // 8. Set request to input’s request.\n      request = input[kState]\n\n      // 9. Set signal to input’s signal.\n      signal = input[kSignal]\n    }\n\n    // 7. Let origin be this’s relevant settings object’s origin.\n    const origin = this[kRealm].settingsObject.origin\n\n    // 8. Let window be \"client\".\n    let window = 'client'\n\n    // 9. If request’s window is an environment settings object and its origin\n    // is same origin with origin, then set window to request’s window.\n    if (\n      request.window?.constructor?.name === 'EnvironmentSettingsObject' &&\n      sameOrigin(request.window, origin)\n    ) {\n      window = request.window\n    }\n\n    // 10. If init[\"window\"] exists and is non-null, then throw a TypeError.\n    if (init.window != null) {\n      throw new TypeError(`'window' option '${window}' must be null`)\n    }\n\n    // 11. If init[\"window\"] exists, then set window to \"no-window\".\n    if ('window' in init) {\n      window = 'no-window'\n    }\n\n    // 12. Set request to a new request with the following properties:\n    request = makeRequest({\n      // URL request’s URL.\n      // undici implementation note: this is set as the first item in request's urlList in makeRequest\n      // method request’s method.\n      method: request.method,\n      // header list A copy of request’s header list.\n      // undici implementation note: headersList is cloned in makeRequest\n      headersList: request.headersList,\n      // unsafe-request flag Set.\n      unsafeRequest: request.unsafeRequest,\n      // client This’s relevant settings object.\n      client: this[kRealm].settingsObject,\n      // window window.\n      window,\n      // priority request’s priority.\n      priority: request.priority,\n      // origin request’s origin. The propagation of the origin is only significant for navigation requests\n      // being handled by a service worker. In this scenario a request can have an origin that is different\n      // from the current client.\n      origin: request.origin,\n      // referrer request’s referrer.\n      referrer: request.referrer,\n      // referrer policy request’s referrer policy.\n      referrerPolicy: request.referrerPolicy,\n      // mode request’s mode.\n      mode: request.mode,\n      // credentials mode request’s credentials mode.\n      credentials: request.credentials,\n      // cache mode request’s cache mode.\n      cache: request.cache,\n      // redirect mode request’s redirect mode.\n      redirect: request.redirect,\n      // integrity metadata request’s integrity metadata.\n      integrity: request.integrity,\n      // keepalive request’s keepalive.\n      keepalive: request.keepalive,\n      // reload-navigation flag request’s reload-navigation flag.\n      reloadNavigation: request.reloadNavigation,\n      // history-navigation flag request’s history-navigation flag.\n      historyNavigation: request.historyNavigation,\n      // URL list A clone of request’s URL list.\n      urlList: [...request.urlList]\n    })\n\n    const initHasKey = Object.keys(init).length !== 0\n\n    // 13. If init is not empty, then:\n    if (initHasKey) {\n      // 1. If request’s mode is \"navigate\", then set it to \"same-origin\".\n      if (request.mode === 'navigate') {\n        request.mode = 'same-origin'\n      }\n\n      // 2. Unset request’s reload-navigation flag.\n      request.reloadNavigation = false\n\n      // 3. Unset request’s history-navigation flag.\n      request.historyNavigation = false\n\n      // 4. Set request’s origin to \"client\".\n      request.origin = 'client'\n\n      // 5. Set request’s referrer to \"client\"\n      request.referrer = 'client'\n\n      // 6. Set request’s referrer policy to the empty string.\n      request.referrerPolicy = ''\n\n      // 7. Set request’s URL to request’s current URL.\n      request.url = request.urlList[request.urlList.length - 1]\n\n      // 8. Set request’s URL list to « request’s URL ».\n      request.urlList = [request.url]\n    }\n\n    // 14. If init[\"referrer\"] exists, then:\n    if (init.referrer !== undefined) {\n      // 1. Let referrer be init[\"referrer\"].\n      const referrer = init.referrer\n\n      // 2. If referrer is the empty string, then set request’s referrer to \"no-referrer\".\n      if (referrer === '') {\n        request.referrer = 'no-referrer'\n      } else {\n        // 1. Let parsedReferrer be the result of parsing referrer with\n        // baseURL.\n        // 2. If parsedReferrer is failure, then throw a TypeError.\n        let parsedReferrer\n        try {\n          parsedReferrer = new URL(referrer, baseUrl)\n        } catch (err) {\n          throw new TypeError(`Referrer \"${referrer}\" is not a valid URL.`, { cause: err })\n        }\n\n        // 3. If one of the following is true\n        // - parsedReferrer’s scheme is \"about\" and path is the string \"client\"\n        // - parsedReferrer’s origin is not same origin with origin\n        // then set request’s referrer to \"client\".\n        if (\n          (parsedReferrer.protocol === 'about:' && parsedReferrer.hostname === 'client') ||\n          (origin && !sameOrigin(parsedReferrer, this[kRealm].settingsObject.baseUrl))\n        ) {\n          request.referrer = 'client'\n        } else {\n          // 4. Otherwise, set request’s referrer to parsedReferrer.\n          request.referrer = parsedReferrer\n        }\n      }\n    }\n\n    // 15. If init[\"referrerPolicy\"] exists, then set request’s referrer policy\n    // to it.\n    if (init.referrerPolicy !== undefined) {\n      request.referrerPolicy = init.referrerPolicy\n    }\n\n    // 16. Let mode be init[\"mode\"] if it exists, and fallbackMode otherwise.\n    let mode\n    if (init.mode !== undefined) {\n      mode = init.mode\n    } else {\n      mode = fallbackMode\n    }\n\n    // 17. If mode is \"navigate\", then throw a TypeError.\n    if (mode === 'navigate') {\n      throw webidl.errors.exception({\n        header: 'Request constructor',\n        message: 'invalid request mode navigate.'\n      })\n    }\n\n    // 18. If mode is non-null, set request’s mode to mode.\n    if (mode != null) {\n      request.mode = mode\n    }\n\n    // 19. If init[\"credentials\"] exists, then set request’s credentials mode\n    // to it.\n    if (init.credentials !== undefined) {\n      request.credentials = init.credentials\n    }\n\n    // 18. If init[\"cache\"] exists, then set request’s cache mode to it.\n    if (init.cache !== undefined) {\n      request.cache = init.cache\n    }\n\n    // 21. If request’s cache mode is \"only-if-cached\" and request’s mode is\n    // not \"same-origin\", then throw a TypeError.\n    if (request.cache === 'only-if-cached' && request.mode !== 'same-origin') {\n      throw new TypeError(\n        \"'only-if-cached' can be set only with 'same-origin' mode\"\n      )\n    }\n\n    // 22. If init[\"redirect\"] exists, then set request’s redirect mode to it.\n    if (init.redirect !== undefined) {\n      request.redirect = init.redirect\n    }\n\n    // 23. If init[\"integrity\"] exists, then set request’s integrity metadata to it.\n    if (init.integrity != null) {\n      request.integrity = String(init.integrity)\n    }\n\n    // 24. If init[\"keepalive\"] exists, then set request’s keepalive to it.\n    if (init.keepalive !== undefined) {\n      request.keepalive = Boolean(init.keepalive)\n    }\n\n    // 25. If init[\"method\"] exists, then:\n    if (init.method !== undefined) {\n      // 1. Let method be init[\"method\"].\n      let method = init.method\n\n      // 2. If method is not a method or method is a forbidden method, then\n      // throw a TypeError.\n      if (!isValidHTTPToken(method)) {\n        throw new TypeError(`'${method}' is not a valid HTTP method.`)\n      }\n\n      if (forbiddenMethodsSet.has(method.toUpperCase())) {\n        throw new TypeError(`'${method}' HTTP method is unsupported.`)\n      }\n\n      // 3. Normalize method.\n      method = normalizeMethodRecord[method] ?? normalizeMethod(method)\n\n      // 4. Set request’s method to method.\n      request.method = method\n    }\n\n    // 26. If init[\"signal\"] exists, then set signal to it.\n    if (init.signal !== undefined) {\n      signal = init.signal\n    }\n\n    // 27. Set this’s request to request.\n    this[kState] = request\n\n    // 28. Set this’s signal to a new AbortSignal object with this’s relevant\n    // Realm.\n    // TODO: could this be simplified with AbortSignal.any\n    // (https://dom.spec.whatwg.org/#dom-abortsignal-any)\n    const ac = new AbortController()\n    this[kSignal] = ac.signal\n    this[kSignal][kRealm] = this[kRealm]\n\n    // 29. If signal is not null, then make this’s signal follow signal.\n    if (signal != null) {\n      if (\n        !signal ||\n        typeof signal.aborted !== 'boolean' ||\n        typeof signal.addEventListener !== 'function'\n      ) {\n        throw new TypeError(\n          \"Failed to construct 'Request': member signal is not of type AbortSignal.\"\n        )\n      }\n\n      if (signal.aborted) {\n        ac.abort(signal.reason)\n      } else {\n        // Keep a strong ref to ac while request object\n        // is alive. This is needed to prevent AbortController\n        // from being prematurely garbage collected.\n        // See, https://github.com/nodejs/undici/issues/1926.\n        this[kAbortController] = ac\n\n        const acRef = new WeakRef(ac)\n        const abort = function () {\n          const ac = acRef.deref()\n          if (ac !== undefined) {\n            ac.abort(this.reason)\n          }\n        }\n\n        // Third-party AbortControllers may not work with these.\n        // See, https://github.com/nodejs/undici/pull/1910#issuecomment-1464495619.\n        try {\n          // If the max amount of listeners is equal to the default, increase it\n          // This is only available in node >= v19.9.0\n          if (typeof getMaxListeners === 'function' && getMaxListeners(signal) === defaultMaxListeners) {\n            setMaxListeners(100, signal)\n          } else if (getEventListeners(signal, 'abort').length >= defaultMaxListeners) {\n            setMaxListeners(100, signal)\n          }\n        } catch {}\n\n        util.addAbortListener(signal, abort)\n        requestFinalizer.register(ac, { signal, abort })\n      }\n    }\n\n    // 30. Set this’s headers to a new Headers object with this’s relevant\n    // Realm, whose header list is request’s header list and guard is\n    // \"request\".\n    this[kHeaders] = new Headers(kConstruct)\n    this[kHeaders][kHeadersList] = request.headersList\n    this[kHeaders][kGuard] = 'request'\n    this[kHeaders][kRealm] = this[kRealm]\n\n    // 31. If this’s request’s mode is \"no-cors\", then:\n    if (mode === 'no-cors') {\n      // 1. If this’s request’s method is not a CORS-safelisted method,\n      // then throw a TypeError.\n      if (!corsSafeListedMethodsSet.has(request.method)) {\n        throw new TypeError(\n          `'${request.method} is unsupported in no-cors mode.`\n        )\n      }\n\n      // 2. Set this’s headers’s guard to \"request-no-cors\".\n      this[kHeaders][kGuard] = 'request-no-cors'\n    }\n\n    // 32. If init is not empty, then:\n    if (initHasKey) {\n      /** @type {HeadersList} */\n      const headersList = this[kHeaders][kHeadersList]\n      // 1. Let headers be a copy of this’s headers and its associated header\n      // list.\n      // 2. If init[\"headers\"] exists, then set headers to init[\"headers\"].\n      const headers = init.headers !== undefined ? init.headers : new HeadersList(headersList)\n\n      // 3. Empty this’s headers’s header list.\n      headersList.clear()\n\n      // 4. If headers is a Headers object, then for each header in its header\n      // list, append header’s name/header’s value to this’s headers.\n      if (headers instanceof HeadersList) {\n        for (const [key, val] of headers) {\n          headersList.append(key, val)\n        }\n        // Note: Copy the `set-cookie` meta-data.\n        headersList.cookies = headers.cookies\n      } else {\n        // 5. Otherwise, fill this’s headers with headers.\n        fillHeaders(this[kHeaders], headers)\n      }\n    }\n\n    // 33. Let inputBody be input’s request’s body if input is a Request\n    // object; otherwise null.\n    const inputBody = input instanceof Request ? input[kState].body : null\n\n    // 34. If either init[\"body\"] exists and is non-null or inputBody is\n    // non-null, and request’s method is `GET` or `HEAD`, then throw a\n    // TypeError.\n    if (\n      (init.body != null || inputBody != null) &&\n      (request.method === 'GET' || request.method === 'HEAD')\n    ) {\n      throw new TypeError('Request with GET/HEAD method cannot have body.')\n    }\n\n    // 35. Let initBody be null.\n    let initBody = null\n\n    // 36. If init[\"body\"] exists and is non-null, then:\n    if (init.body != null) {\n      // 1. Let Content-Type be null.\n      // 2. Set initBody and Content-Type to the result of extracting\n      // init[\"body\"], with keepalive set to request’s keepalive.\n      const [extractedBody, contentType] = extractBody(\n        init.body,\n        request.keepalive\n      )\n      initBody = extractedBody\n\n      // 3, If Content-Type is non-null and this’s headers’s header list does\n      // not contain `Content-Type`, then append `Content-Type`/Content-Type to\n      // this’s headers.\n      if (contentType && !this[kHeaders][kHeadersList].contains('content-type')) {\n        this[kHeaders].append('content-type', contentType)\n      }\n    }\n\n    // 37. Let inputOrInitBody be initBody if it is non-null; otherwise\n    // inputBody.\n    const inputOrInitBody = initBody ?? inputBody\n\n    // 38. If inputOrInitBody is non-null and inputOrInitBody’s source is\n    // null, then:\n    if (inputOrInitBody != null && inputOrInitBody.source == null) {\n      // 1. If initBody is non-null and init[\"duplex\"] does not exist,\n      //    then throw a TypeError.\n      if (initBody != null && init.duplex == null) {\n        throw new TypeError('RequestInit: duplex option is required when sending a body.')\n      }\n\n      // 2. If this’s request’s mode is neither \"same-origin\" nor \"cors\",\n      // then throw a TypeError.\n      if (request.mode !== 'same-origin' && request.mode !== 'cors') {\n        throw new TypeError(\n          'If request is made from ReadableStream, mode should be \"same-origin\" or \"cors\"'\n        )\n      }\n\n      // 3. Set this’s request’s use-CORS-preflight flag.\n      request.useCORSPreflightFlag = true\n    }\n\n    // 39. Let finalBody be inputOrInitBody.\n    let finalBody = inputOrInitBody\n\n    // 40. If initBody is null and inputBody is non-null, then:\n    if (initBody == null && inputBody != null) {\n      // 1. If input is unusable, then throw a TypeError.\n      if (util.isDisturbed(inputBody.stream) || inputBody.stream.locked) {\n        throw new TypeError(\n          'Cannot construct a Request with a Request object that has already been used.'\n        )\n      }\n\n      // 2. Set finalBody to the result of creating a proxy for inputBody.\n      if (!TransformStream) {\n        TransformStream = require('stream/web').TransformStream\n      }\n\n      // https://streams.spec.whatwg.org/#readablestream-create-a-proxy\n      const identityTransform = new TransformStream()\n      inputBody.stream.pipeThrough(identityTransform)\n      finalBody = {\n        source: inputBody.source,\n        length: inputBody.length,\n        stream: identityTransform.readable\n      }\n    }\n\n    // 41. Set this’s request’s body to finalBody.\n    this[kState].body = finalBody\n  }\n\n  // Returns request’s HTTP method, which is \"GET\" by default.\n  get method () {\n    webidl.brandCheck(this, Request)\n\n    // The method getter steps are to return this’s request’s method.\n    return this[kState].method\n  }\n\n  // Returns the URL of request as a string.\n  get url () {\n    webidl.brandCheck(this, Request)\n\n    // The url getter steps are to return this’s request’s URL, serialized.\n    return URLSerializer(this[kState].url)\n  }\n\n  // Returns a Headers object consisting of the headers associated with request.\n  // Note that headers added in the network layer by the user agent will not\n  // be accounted for in this object, e.g., the \"Host\" header.\n  get headers () {\n    webidl.brandCheck(this, Request)\n\n    // The headers getter steps are to return this’s headers.\n    return this[kHeaders]\n  }\n\n  // Returns the kind of resource requested by request, e.g., \"document\"\n  // or \"script\".\n  get destination () {\n    webidl.brandCheck(this, Request)\n\n    // The destination getter are to return this’s request’s destination.\n    return this[kState].destination\n  }\n\n  // Returns the referrer of request. Its value can be a same-origin URL if\n  // explicitly set in init, the empty string to indicate no referrer, and\n  // \"about:client\" when defaulting to the global’s default. This is used\n  // during fetching to determine the value of the `Referer` header of the\n  // request being made.\n  get referrer () {\n    webidl.brandCheck(this, Request)\n\n    // 1. If this’s request’s referrer is \"no-referrer\", then return the\n    // empty string.\n    if (this[kState].referrer === 'no-referrer') {\n      return ''\n    }\n\n    // 2. If this’s request’s referrer is \"client\", then return\n    // \"about:client\".\n    if (this[kState].referrer === 'client') {\n      return 'about:client'\n    }\n\n    // Return this’s request’s referrer, serialized.\n    return this[kState].referrer.toString()\n  }\n\n  // Returns the referrer policy associated with request.\n  // This is used during fetching to compute the value of the request’s\n  // referrer.\n  get referrerPolicy () {\n    webidl.brandCheck(this, Request)\n\n    // The referrerPolicy getter steps are to return this’s request’s referrer policy.\n    return this[kState].referrerPolicy\n  }\n\n  // Returns the mode associated with request, which is a string indicating\n  // whether the request will use CORS, or will be restricted to same-origin\n  // URLs.\n  get mode () {\n    webidl.brandCheck(this, Request)\n\n    // The mode getter steps are to return this’s request’s mode.\n    return this[kState].mode\n  }\n\n  // Returns the credentials mode associated with request,\n  // which is a string indicating whether credentials will be sent with the\n  // request always, never, or only when sent to a same-origin URL.\n  get credentials () {\n    // The credentials getter steps are to return this’s request’s credentials mode.\n    return this[kState].credentials\n  }\n\n  // Returns the cache mode associated with request,\n  // which is a string indicating how the request will\n  // interact with the browser’s cache when fetching.\n  get cache () {\n    webidl.brandCheck(this, Request)\n\n    // The cache getter steps are to return this’s request’s cache mode.\n    return this[kState].cache\n  }\n\n  // Returns the redirect mode associated with request,\n  // which is a string indicating how redirects for the\n  // request will be handled during fetching. A request\n  // will follow redirects by default.\n  get redirect () {\n    webidl.brandCheck(this, Request)\n\n    // The redirect getter steps are to return this’s request’s redirect mode.\n    return this[kState].redirect\n  }\n\n  // Returns request’s subresource integrity metadata, which is a\n  // cryptographic hash of the resource being fetched. Its value\n  // consists of multiple hashes separated by whitespace. [SRI]\n  get integrity () {\n    webidl.brandCheck(this, Request)\n\n    // The integrity getter steps are to return this’s request’s integrity\n    // metadata.\n    return this[kState].integrity\n  }\n\n  // Returns a boolean indicating whether or not request can outlive the\n  // global in which it was created.\n  get keepalive () {\n    webidl.brandCheck(this, Request)\n\n    // The keepalive getter steps are to return this’s request’s keepalive.\n    return this[kState].keepalive\n  }\n\n  // Returns a boolean indicating whether or not request is for a reload\n  // navigation.\n  get isReloadNavigation () {\n    webidl.brandCheck(this, Request)\n\n    // The isReloadNavigation getter steps are to return true if this’s\n    // request’s reload-navigation flag is set; otherwise false.\n    return this[kState].reloadNavigation\n  }\n\n  // Returns a boolean indicating whether or not request is for a history\n  // navigation (a.k.a. back-foward navigation).\n  get isHistoryNavigation () {\n    webidl.brandCheck(this, Request)\n\n    // The isHistoryNavigation getter steps are to return true if this’s request’s\n    // history-navigation flag is set; otherwise false.\n    return this[kState].historyNavigation\n  }\n\n  // Returns the signal associated with request, which is an AbortSignal\n  // object indicating whether or not request has been aborted, and its\n  // abort event handler.\n  get signal () {\n    webidl.brandCheck(this, Request)\n\n    // The signal getter steps are to return this’s signal.\n    return this[kSignal]\n  }\n\n  get body () {\n    webidl.brandCheck(this, Request)\n\n    return this[kState].body ? this[kState].body.stream : null\n  }\n\n  get bodyUsed () {\n    webidl.brandCheck(this, Request)\n\n    return !!this[kState].body && util.isDisturbed(this[kState].body.stream)\n  }\n\n  get duplex () {\n    webidl.brandCheck(this, Request)\n\n    return 'half'\n  }\n\n  // Returns a clone of request.\n  clone () {\n    webidl.brandCheck(this, Request)\n\n    // 1. If this is unusable, then throw a TypeError.\n    if (this.bodyUsed || this.body?.locked) {\n      throw new TypeError('unusable')\n    }\n\n    // 2. Let clonedRequest be the result of cloning this’s request.\n    const clonedRequest = cloneRequest(this[kState])\n\n    // 3. Let clonedRequestObject be the result of creating a Request object,\n    // given clonedRequest, this’s headers’s guard, and this’s relevant Realm.\n    const clonedRequestObject = new Request(kConstruct)\n    clonedRequestObject[kState] = clonedRequest\n    clonedRequestObject[kRealm] = this[kRealm]\n    clonedRequestObject[kHeaders] = new Headers(kConstruct)\n    clonedRequestObject[kHeaders][kHeadersList] = clonedRequest.headersList\n    clonedRequestObject[kHeaders][kGuard] = this[kHeaders][kGuard]\n    clonedRequestObject[kHeaders][kRealm] = this[kHeaders][kRealm]\n\n    // 4. Make clonedRequestObject’s signal follow this’s signal.\n    const ac = new AbortController()\n    if (this.signal.aborted) {\n      ac.abort(this.signal.reason)\n    } else {\n      util.addAbortListener(\n        this.signal,\n        () => {\n          ac.abort(this.signal.reason)\n        }\n      )\n    }\n    clonedRequestObject[kSignal] = ac.signal\n\n    // 4. Return clonedRequestObject.\n    return clonedRequestObject\n  }\n}\n\nmixinBody(Request)\n\nfunction makeRequest (init) {\n  // https://fetch.spec.whatwg.org/#requests\n  const request = {\n    method: 'GET',\n    localURLsOnly: false,\n    unsafeRequest: false,\n    body: null,\n    client: null,\n    reservedClient: null,\n    replacesClientId: '',\n    window: 'client',\n    keepalive: false,\n    serviceWorkers: 'all',\n    initiator: '',\n    destination: '',\n    priority: null,\n    origin: 'client',\n    policyContainer: 'client',\n    referrer: 'client',\n    referrerPolicy: '',\n    mode: 'no-cors',\n    useCORSPreflightFlag: false,\n    credentials: 'same-origin',\n    useCredentials: false,\n    cache: 'default',\n    redirect: 'follow',\n    integrity: '',\n    cryptoGraphicsNonceMetadata: '',\n    parserMetadata: '',\n    reloadNavigation: false,\n    historyNavigation: false,\n    userActivation: false,\n    taintedOrigin: false,\n    redirectCount: 0,\n    responseTainting: 'basic',\n    preventNoCacheCacheControlHeaderModification: false,\n    done: false,\n    timingAllowFailed: false,\n    ...init,\n    headersList: init.headersList\n      ? new HeadersList(init.headersList)\n      : new HeadersList()\n  }\n  request.url = request.urlList[0]\n  return request\n}\n\n// https://fetch.spec.whatwg.org/#concept-request-clone\nfunction cloneRequest (request) {\n  // To clone a request request, run these steps:\n\n  // 1. Let newRequest be a copy of request, except for its body.\n  const newRequest = makeRequest({ ...request, body: null })\n\n  // 2. If request’s body is non-null, set newRequest’s body to the\n  // result of cloning request’s body.\n  if (request.body != null) {\n    newRequest.body = cloneBody(request.body)\n  }\n\n  // 3. Return newRequest.\n  return newRequest\n}\n\nObject.defineProperties(Request.prototype, {\n  method: kEnumerableProperty,\n  url: kEnumerableProperty,\n  headers: kEnumerableProperty,\n  redirect: kEnumerableProperty,\n  clone: kEnumerableProperty,\n  signal: kEnumerableProperty,\n  duplex: kEnumerableProperty,\n  destination: kEnumerableProperty,\n  body: kEnumerableProperty,\n  bodyUsed: kEnumerableProperty,\n  isHistoryNavigation: kEnumerableProperty,\n  isReloadNavigation: kEnumerableProperty,\n  keepalive: kEnumerableProperty,\n  integrity: kEnumerableProperty,\n  cache: kEnumerableProperty,\n  credentials: kEnumerableProperty,\n  attribute: kEnumerableProperty,\n  referrerPolicy: kEnumerableProperty,\n  referrer: kEnumerableProperty,\n  mode: kEnumerableProperty,\n  [Symbol.toStringTag]: {\n    value: 'Request',\n    configurable: true\n  }\n})\n\nwebidl.converters.Request = webidl.interfaceConverter(\n  Request\n)\n\n// https://fetch.spec.whatwg.org/#requestinfo\nwebidl.converters.RequestInfo = function (V) {\n  if (typeof V === 'string') {\n    return webidl.converters.USVString(V)\n  }\n\n  if (V instanceof Request) {\n    return webidl.converters.Request(V)\n  }\n\n  return webidl.converters.USVString(V)\n}\n\nwebidl.converters.AbortSignal = webidl.interfaceConverter(\n  AbortSignal\n)\n\n// https://fetch.spec.whatwg.org/#requestinit\nwebidl.converters.RequestInit = webidl.dictionaryConverter([\n  {\n    key: 'method',\n    converter: webidl.converters.ByteString\n  },\n  {\n    key: 'headers',\n    converter: webidl.converters.HeadersInit\n  },\n  {\n    key: 'body',\n    converter: webidl.nullableConverter(\n      webidl.converters.BodyInit\n    )\n  },\n  {\n    key: 'referrer',\n    converter: webidl.converters.USVString\n  },\n  {\n    key: 'referrerPolicy',\n    converter: webidl.converters.DOMString,\n    // https://w3c.github.io/webappsec-referrer-policy/#referrer-policy\n    allowedValues: referrerPolicy\n  },\n  {\n    key: 'mode',\n    converter: webidl.converters.DOMString,\n    // https://fetch.spec.whatwg.org/#concept-request-mode\n    allowedValues: requestMode\n  },\n  {\n    key: 'credentials',\n    converter: webidl.converters.DOMString,\n    // https://fetch.spec.whatwg.org/#requestcredentials\n    allowedValues: requestCredentials\n  },\n  {\n    key: 'cache',\n    converter: webidl.converters.DOMString,\n    // https://fetch.spec.whatwg.org/#requestcache\n    allowedValues: requestCache\n  },\n  {\n    key: 'redirect',\n    converter: webidl.converters.DOMString,\n    // https://fetch.spec.whatwg.org/#requestredirect\n    allowedValues: requestRedirect\n  },\n  {\n    key: 'integrity',\n    converter: webidl.converters.DOMString\n  },\n  {\n    key: 'keepalive',\n    converter: webidl.converters.boolean\n  },\n  {\n    key: 'signal',\n    converter: webidl.nullableConverter(\n      (signal) => webidl.converters.AbortSignal(\n        signal,\n        { strict: false }\n      )\n    )\n  },\n  {\n    key: 'window',\n    converter: webidl.converters.any\n  },\n  {\n    key: 'duplex',\n    converter: webidl.converters.DOMString,\n    allowedValues: requestDuplex\n  }\n])\n\nmodule.exports = { Request, makeRequest }\n"],"names":["$iPOOL$pythonversioncheck152f8bbajs2","$iPOOL$pythonversioncheck5597d583js2","$iPOOL$pythonversioncheck67cd42dfjs","$iPOOL$pythonversioncheck7ed1514ejs","$iPOOL$pythonversioncheck3f48d3eejs4","$iPOOL$pythonversioncheck863e006ejs7","$iPOOL$pythonversioncheck92c00e26js4","$iPOOL$pythonversioncheck801bb0f1js","$iPOOL$pythonversioncheckb40ebe18js","$iPOOL$pythonversioncheck685b5bb2js","$iPOOL$pythonversioncheckebf2a848js1","$iPOOL$assert","getMaxListeners","$iPOOL$getMaxListeners","setMaxListeners","$iPOOL$setMaxListeners","getEventListeners","$iPOOL$getEventListeners","defaultMaxListeners","$iPOOL$defaultMaxListeners","TransformStream","$iPOOL$TransformStream","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","$87ac28518c39a30b$require$extractBody","$iPOOL$pythonversioncheck152f8bbajs1","extractBody","$87ac28518c39a30b$require$mixinBody","mixinBody","$87ac28518c39a30b$require$cloneBody","$iPOOL$pythonversioncheck152f8bbajs","cloneBody","$87ac28518c39a30b$require$Headers","$iPOOL$pythonversioncheck5597d583js1","Headers","$87ac28518c39a30b$require$fillHeaders","$iPOOL$pythonversioncheck5597d583js","fill","$87ac28518c39a30b$require$HeadersList","HeadersList","FinalizationRegistry","$87ac28518c39a30b$var$FinalizationRegistry","$87ac28518c39a30b$require$isValidHTTPToken","$iPOOL$pythonversioncheck3f48d3eejs","isValidHTTPToken","$87ac28518c39a30b$require$sameOrigin","sameOrigin","$87ac28518c39a30b$require$normalizeMethod","$iPOOL$pythonversioncheck3f48d3eejs2","normalizeMethod","$87ac28518c39a30b$require$makePolicyContainer","$iPOOL$pythonversioncheck3f48d3eejs1","makePolicyContainer","$87ac28518c39a30b$require$normalizeMethodRecord","$iPOOL$pythonversioncheck3f48d3eejs3","normalizeMethodRecord","$87ac28518c39a30b$require$forbiddenMethodsSet","$iPOOL$pythonversioncheck863e006ejs1","forbiddenMethodsSet","$87ac28518c39a30b$require$corsSafeListedMethodsSet","$iPOOL$pythonversioncheck863e006ejs","corsSafeListedMethodsSet","$87ac28518c39a30b$require$referrerPolicy","$iPOOL$pythonversioncheck863e006ejs2","referrerPolicy","$87ac28518c39a30b$require$requestRedirect","requestRedirect","$87ac28518c39a30b$require$requestMode","$iPOOL$pythonversioncheck863e006ejs6","requestMode","$87ac28518c39a30b$require$requestCredentials","$iPOOL$pythonversioncheck863e006ejs4","requestCredentials","$87ac28518c39a30b$require$requestCache","$iPOOL$pythonversioncheck863e006ejs3","requestCache","$87ac28518c39a30b$require$requestDuplex","$iPOOL$pythonversioncheck863e006ejs5","requestDuplex","kEnumerableProperty","$87ac28518c39a30b$var$kEnumerableProperty","$87ac28518c39a30b$require$kHeaders","$iPOOL$pythonversioncheck92c00e26js1","kHeaders","$87ac28518c39a30b$require$kSignal","$iPOOL$pythonversioncheck92c00e26js3","kSignal","$87ac28518c39a30b$require$kState","kState","$87ac28518c39a30b$require$kGuard","$iPOOL$pythonversioncheck92c00e26js","kGuard","$87ac28518c39a30b$require$kRealm","$iPOOL$pythonversioncheck92c00e26js2","kRealm","$87ac28518c39a30b$require$webidl","webidl","$87ac28518c39a30b$require$getGlobalOrigin","getGlobalOrigin","$87ac28518c39a30b$require$URLSerializer","URLSerializer","$87ac28518c39a30b$require$kHeadersList","kHeadersList","$87ac28518c39a30b$require$kConstruct","$iPOOL$pythonversioncheckebf2a848js","kConstruct","$87ac28518c39a30b$var$TransformStream","$87ac28518c39a30b$var$kAbortController","Symbol","$87ac28518c39a30b$var$requestFinalizer","signal","abort","removeEventListener","$87ac28518c39a30b$var$Request","input","mode","argumentLengthCheck","arguments","header","converters","RequestInfo","RequestInit","settingsObject","baseUrl","origin","policyContainer","request","fallbackMode","parsedURL","URL","TypeError","cause","username","password","$87ac28518c39a30b$var$makeRequest","urlList","window","name","method","headersList","unsafeRequest","client","priority","referrer","credentials","cache","redirect","integrity","keepalive","reloadNavigation","historyNavigation","initHasKey","Object","keys","length","url","undefined","parsedReferrer","protocol","hostname","errors","exception","message","String","Boolean","has","toUpperCase","ac","AbortController","aborted","addEventListener","reason","acRef","WeakRef","deref","$87ac28518c39a30b$require$getMaxListeners","$87ac28518c39a30b$require$setMaxListeners","$87ac28518c39a30b$require$getEventListeners","addAbortListener","headers","clear","key","val","append","cookies","inputBody","body","initBody","extractedBody","contentType","contains","inputOrInitBody","source","duplex","useCORSPreflightFlag","finalBody","isDisturbed","stream","locked","identityTransform","pipeThrough","readable","brandCheck","destination","toString","isReloadNavigation","isHistoryNavigation","bodyUsed","clone","clonedRequest","$87ac28518c39a30b$var$cloneRequest","newRequest","clonedRequestObject","localURLsOnly","reservedClient","replacesClientId","serviceWorkers","initiator","useCredentials","cryptoGraphicsNonceMetadata","parserMetadata","userActivation","taintedOrigin","redirectCount","responseTainting","preventNoCacheCacheControlHeaderModification","done","timingAllowFailed","defineProperties","prototype","attribute","toStringTag","value","configurable","Request","interfaceConverter","V","USVString","AbortSignal","dictionaryConverter","converter","ByteString","HeadersInit","nullableConverter","BodyInit","DOMString","allowedValues","boolean","strict","any","makeRequest"],"version":3,"file":"python-version-check.ff3942ba.js.map","sourceRoot":"../"}