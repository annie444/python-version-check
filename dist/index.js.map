{"mappings":"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","sources":["src/index.ts","src/main.ts","src/query.ts","src/pyproject.ts"],"sourcesContent":["/**\n * The entrypoint for the action. This file simply imports and runs the action's\n * main logic.\n */\nimport { run } from './main.js'\n\n/* istanbul ignore next */\nrun()\n","import * as core from '@actions/core'\nimport { queryIndex } from './query.js'\nimport {\n  getPackageInfo,\n  getPackageVersion,\n  type PackageInfo\n} from './pyproject.js'\n\nfunction assertHasMessage(\n  error: unknown\n): asserts error is { message: string } {\n  if (\n    typeof error !== 'object' ||\n    error === null ||\n    !('message' in error) ||\n    typeof (error as { message: unknown }).message !== 'string'\n  ) {\n    throw new TypeError('The error does not have a message property')\n  }\n}\n\n/**\n * The main function for the action.\n *\n * @returns Resolves when the action is complete.\n */\nexport async function run(): Promise<void> {\n  try {\n    const pyprojectPath: string = core.getInput('path')\n    const simpleIndexUrl: string = core.getInput('index')\n    if (!pyprojectPath) {\n      core.setFailed('Input \"path\" is required')\n      return\n    }\n    if (!simpleIndexUrl) {\n      core.setFailed('Input \"index\" is required')\n      return\n    }\n\n    core.debug(`Looking for package at ${pyprojectPath}`)\n    const packageInfo: PackageInfo = await getPackageInfo(pyprojectPath)\n    const packageName: string = packageInfo.name\n    core.debug(`Found package: ${packageName}`)\n    const packageVersion: string = await getPackageVersion(packageInfo)\n    core.debug(`Found version: ${packageVersion}`)\n\n    core.setOutput('package_name', packageName)\n    core.setOutput('package_version', packageVersion)\n\n    core.debug(`Querying ${simpleIndexUrl} for published versions`)\n    const versions = await queryIndex(simpleIndexUrl, packageName)\n    if (versions === null) {\n      core.setFailed(`Failed to query index ${simpleIndexUrl}`)\n      return\n    }\n    core.info(`Published versions for ${packageName}: ${versions.join(', ')}`)\n    const versionExists =\n      versions.length > 0 ? versions.includes(packageVersion) : false\n    core.setOutput(`current_version_exists`, versionExists)\n  } catch (error) {\n    // Fail the workflow run if an error occurs\n    try {\n      assertHasMessage(error)\n      core.setFailed(error.message)\n    } catch {\n      core.setFailed(`An unknown error occurred: ${String(error)}`)\n    }\n  }\n}\n","import * as client from '@actions/http-client'\n\nexport async function queryIndex(\n  index: string,\n  packageName: string\n): Promise<string[] | null> {\n  // Return list of versions; null on network / JSON errors.\n  const http = new client.HttpClient('pypi-versions-action', [], {\n    allowRetries: true,\n    maxRetries: 3\n  })\n  const url = `${index}/${packageName}`\n  const headers = { Accept: 'application/vnd.pypi.simple.v1+json' }\n  try {\n    const resp = await http.get(url, headers)\n    if (resp.message.statusCode === 404) {\n      return []\n    }\n    if (resp.message.statusCode && resp.message.statusCode >= 400) {\n      throw new Error(\n        `${index}: HTTP ${resp.message.statusCode} - treated as unavailable`\n      )\n    }\n    const payload = await resp.readBody()\n    const data = JSON.parse(payload)\n    const versions: Set<string> = new Set<string>()\n    for (const file of data.files) {\n      const name: string = file.filename\n      let ver = name.replace(`${packageName.replace(/-/g, '_')}-`, '')\n      ver = ver.split('-', 3)[0].replace('.tar.gz', '').replace('.zip', '')\n      versions.add(ver)\n    }\n    return new Array(...versions).sort()\n  } catch (e: unknown) {\n    const eObj = e as Error\n    throw new Error(`${index}: ${eObj.message} - treated as unavailable`)\n  }\n}\n","import * as exec from '@actions/exec'\nimport * as fs from 'node:fs'\nimport * as path from 'node:path'\nimport { load } from 'js-toml'\n\n/**\n * Asserts that the given object has a 'project' field which is an object.\n * Throws an error if the assertion fails.\n *\n * @param obj - The object to check.\n * @throws {Error} If the object does not have a 'project' field or if it is not an object.\n * @returns void\n */\nfunction assertHasProject(\n  obj: unknown\n): asserts obj is { project: Record<string, unknown> } {\n  if (!Object.hasOwn(obj as object, 'project')) {\n    throw new Error('No [project] section found in pyproject.toml')\n  }\n  if (typeof (obj as { project?: unknown }).project !== 'object') {\n    throw new Error('[project] section is not an object')\n  }\n}\n\n/**\n * Asserts that the given object has a 'name' field which is a string.\n * Throws an error if the assertion fails.\n *\n * @param obj - The object to check.\n * @throws {Error} If the object does not have a 'name' field or if it is not a string.\n * @returns void\n */\nfunction assertHasName(obj: unknown): asserts obj is { name: string } {\n  if (!Object.hasOwn(obj as object, 'name')) {\n    throw new Error('No name field in [project] section of pyproject.toml')\n  }\n  if (typeof (obj as { name?: unknown }).name !== 'string') {\n    throw new Error('name field in [project] section is not a string')\n  }\n}\n\n/**\n * Asserts that the given object has a 'version' field which is a string.\n * Throws an error if the assertion fails.\n *\n * @param obj - The object to check.\n * @throws {Error} If the object does not have a 'version' field or if it is not a string.\n * @returns void\n */\nfunction assertHasVersion(obj: unknown): asserts obj is { version: string } {\n  if (!Object.hasOwn(obj as object, 'version')) {\n    throw new Error('No version field in [project] section of pyproject.toml')\n  }\n  if (typeof (obj as { version?: unknown }).version !== 'string') {\n    throw new Error('version field in [project] section is not a string')\n  }\n}\n\n/**\n * Asserts that the given object has a 'dynamic' field which is an array of strings.\n * Throws an error if the assertion fails.\n *\n * @param obj - The object to check.\n * @throws {Error} If the object does not have a 'dynamic' field or if it is not an array of strings.\n * @returns void\n */\nfunction assertHasDynamic(obj: unknown): asserts obj is { dynamic: string[] } {\n  if (!Object.hasOwn(obj as object, 'dynamic')) {\n    throw new Error('No dynamic field in [project] section of pyproject.toml')\n  }\n  if (!Array.isArray((obj as { dynamic?: unknown }).dynamic)) {\n    throw new Error('dynamic field in [project] section is not an array')\n  }\n  for (const item of (obj as { dynamic: unknown[] }).dynamic) {\n    if (typeof item !== 'string') {\n      throw new Error(\n        'dynamic field in [project] section is not an array of strings'\n      )\n    }\n  }\n}\n\n/** Information about a Python package parsed from pyproject.toml.\n * Includes the package name, version (if specified), dynamic fields (if any),\n * and the path to the package directory.\n *\n * @example\n * ```json\n * {\n *   \"name\": \"my-package\",\n *   \"version\": \"1.0.0\",\n *   \"path\": \"/path/to/package\"\n * }\n * ```\n */\nexport interface PackageInfo {\n  name: string\n  version?: string\n  dynamic?: string[]\n  path: string\n}\n\n/**\n * Reads and parses a pyproject.toml file to extract package information.\n *\n * @param pyprojectPath - The file path to the pyproject.toml file.\n * @throws {Error} If the file does not exist, is not a file, or if required fields are missing.\n * @returns A Promise that resolves to a PackageInfo object containing the package name, version (\n * if specified), dynamic fields (if any), and the path to the package directory.\n */\nexport async function getPackageInfo(\n  pyprojectPath: string\n): Promise<PackageInfo> {\n  const stat = await fs.promises.stat(pyprojectPath)\n  if (!stat.isFile()) {\n    throw new Error(`Not a file: ${pyprojectPath}`)\n  }\n  const file = await fs.promises.readFile(pyprojectPath, 'utf8')\n  const toml = load(file)\n  assertHasProject(toml)\n  const project = toml.project as Record<string, unknown>\n  assertHasName(project)\n  const packageInfo: PackageInfo = {\n    name: project.name,\n    path: path.dirname(path.resolve(pyprojectPath))\n  }\n  try {\n    assertHasVersion(project)\n    packageInfo.version = project.version\n  } catch {\n    // version field is optional if dynamic includes \"version\"\n    // so we ignore the error here\n    // we will get the version from python instead\n    // if version is not in dynamic, we will error below\n    assertHasDynamic(project)\n    if (!project.dynamic.includes('version')) {\n      throw new Error('No version field in [project] section of pyproject.toml')\n    }\n    packageInfo.dynamic = project.dynamic\n  }\n  return packageInfo\n}\n\n/**\n * Gets the version of a Python package.\n * If the version is specified in the PackageInfo, it is returned directly.\n * If the version is dynamic, it is retrieved by installing the package and\n * importing it in Python to get the __version__ attribute.\n *\n * @param pkg - The PackageInfo object containing package details.\n * @throws {Error} If the version cannot be determined.\n * @returns A Promise that resolves to the package version as a string.\n */\nexport async function getPackageVersion(pkg: PackageInfo): Promise<string> {\n  if (pkg.version) {\n    return pkg.version\n  }\n  if (pkg.dynamic && pkg.dynamic.includes('version')) {\n    // get version from python\n    const res = await exec.getExecOutput('python3', [\n      '-m',\n      'pip',\n      'install',\n      pkg.path\n    ])\n    if (res.exitCode !== 0) {\n      throw new Error(\n        `Failed to install package at ${pkg.path}. Stdout: ${res.stdout}. Stderr: ${res.stderr}.`\n      )\n    }\n    const res2 = await exec.getExecOutput('python3', [\n      '-c',\n      `import ${pkg.name.replace(/-/g, '_')}; print(${pkg.name.replace(\n        /-/g,\n        '_'\n      )}.__version__)`\n    ])\n    if (res2.exitCode !== 0) {\n      throw new Error(\n        `Failed to get version of package ${pkg.name}. Stdout: ${res2.stdout}. Stderr: ${res2.stderr}.`\n      )\n    }\n    const version = res2.stdout.trim()\n    if (version === '') {\n      throw new Error('Failed to get version from pip')\n    }\n    return version\n  }\n  throw new Error('No version field in [project] section of pyproject.toml')\n}\n"],"names":[],"version":3,"file":"index.js.map","sourceRoot":"../"}