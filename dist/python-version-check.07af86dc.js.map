{"mappings":"A,O,M,qD,A,Q,M,qD,A,W,M,Q,C,I,E,C,ECCM,EAAA,EAAA,uBAAA,CAGA,EAAA,EAAA,WAAA,CAyCN,EAAiB,CAAE,4BAvCnB,eAA4C,CAAA,SAAE,CAAQ,CAAA,KAAE,CAAI,CAAA,YAAE,CAAW,CAAA,WAAE,CAAU,CAAA,cAAE,CAAa,CAAA,QAAE,CAAO,CAAE,EAC7G,EAAO,GAEP,IAAI,EAAS,EAAE,CACX,EAAQ,EAEZ,UAAW,IAAM,KAAS,EAGxB,GAFA,EAAO,IAAI,CAAC,GAER,AADJ,CAAA,GAAS,EAAM,MAAM,AAAN,EACH,OAAY,CACtB,EAAS,KACT,KACF,CAGF,GAAI,AAAe,MAAf,GAAsB,CAAC,GAAe,CAAC,EAAQ,YACjD,QAAQ,QAAQ,CAAC,EAAU,IAAA,EAA4B,CAAC,qBAAqB,EAAE,EAAA,EAAa,EAAgB,CAAC,EAAE,EAAE,EAAA,CAAe,CAAG,GAAA,CAAI,CAAE,EAAY,IAIvJ,GAAI,CACF,GAAI,EAAY,UAAU,CAAC,oBAAqB,CAC9C,IAAM,EAAU,KAAK,KAAK,CAAC,EAAY,OAAO,MAAM,CAAC,KACrD,QAAQ,QAAQ,CAAC,EAAU,IAAA,EAA4B,CAAC,qBAAqB,EAAE,EAAA,EAAa,EAAgB,CAAC,EAAE,EAAE,EAAA,CAAe,CAAG,GAAA,CAAI,CAAE,EAAY,EAAS,IAC9J,MACF,CAEA,GAAI,EAAY,UAAU,CAAC,SAAU,CACnC,IAAM,EAAU,EAAY,OAAO,MAAM,CAAC,IAC1C,QAAQ,QAAQ,CAAC,EAAU,IAAA,EAA4B,CAAC,qBAAqB,EAAE,EAAA,EAAa,EAAgB,CAAC,EAAE,EAAE,EAAA,CAAe,CAAG,GAAA,CAAI,CAAE,EAAY,EAAS,IAC9J,MACF,CACF,CAAE,MAAO,EAAK,CAEd,CAEA,QAAQ,QAAQ,CAAC,EAAU,IAAA,EAA4B,CAAC,qBAAqB,EAAE,EAAA,EAAa,EAAgB,CAAC,EAAE,EAAE,EAAA,CAAe,CAAG,GAAA,CAAI,CAAE,EAAY,GACvJ,CAE+C,S,K,O","sources":["<anon>","node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/api/util.js"],"sourcesContent":["import $jL7KM$pythonversioncheckdba5a2d4js from \"./python-version-check.dba5a2d4.js\";\nimport $jL7KM$pythonversioncheck7ed1514ejs from \"./python-version-check.7ed1514e.js\";\nimport * as $jL7KM$assert from \"assert\";\n\nvar $46d7b702cee52120$exports = {};\n\n\nvar $46d7b702cee52120$require$ResponseStatusCodeError = $jL7KM$pythonversioncheckdba5a2d4js.ResponseStatusCodeError;\n\nvar $46d7b702cee52120$require$toUSVString = $jL7KM$pythonversioncheck7ed1514ejs.toUSVString;\nasync function $46d7b702cee52120$var$getResolveErrorBodyCallback({ callback: callback, body: body, contentType: contentType, statusCode: statusCode, statusMessage: statusMessage, headers: headers }) {\n    $jL7KM$assert(body);\n    let chunks = [];\n    let limit = 0;\n    for await (const chunk of body){\n        chunks.push(chunk);\n        limit += chunk.length;\n        if (limit > 131072) {\n            chunks = null;\n            break;\n        }\n    }\n    if (statusCode === 204 || !contentType || !chunks) {\n        process.nextTick(callback, new $46d7b702cee52120$require$ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ''}`, statusCode, headers));\n        return;\n    }\n    try {\n        if (contentType.startsWith('application/json')) {\n            const payload = JSON.parse($46d7b702cee52120$require$toUSVString(Buffer.concat(chunks)));\n            process.nextTick(callback, new $46d7b702cee52120$require$ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ''}`, statusCode, headers, payload));\n            return;\n        }\n        if (contentType.startsWith('text/')) {\n            const payload = $46d7b702cee52120$require$toUSVString(Buffer.concat(chunks));\n            process.nextTick(callback, new $46d7b702cee52120$require$ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ''}`, statusCode, headers, payload));\n            return;\n        }\n    } catch (err) {\n    // Process in a fallback if error\n    }\n    process.nextTick(callback, new $46d7b702cee52120$require$ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ''}`, statusCode, headers));\n}\n$46d7b702cee52120$exports = {\n    getResolveErrorBodyCallback: $46d7b702cee52120$var$getResolveErrorBodyCallback\n};\n\n\nexport {$46d7b702cee52120$exports as default};\n//# sourceMappingURL=python-version-check.07af86dc.js.map\n","const assert = require('assert')\nconst {\n  ResponseStatusCodeError\n} = require('../core/errors')\nconst { toUSVString } = require('../core/util')\n\nasync function getResolveErrorBodyCallback ({ callback, body, contentType, statusCode, statusMessage, headers }) {\n  assert(body)\n\n  let chunks = []\n  let limit = 0\n\n  for await (const chunk of body) {\n    chunks.push(chunk)\n    limit += chunk.length\n    if (limit > 128 * 1024) {\n      chunks = null\n      break\n    }\n  }\n\n  if (statusCode === 204 || !contentType || !chunks) {\n    process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ''}`, statusCode, headers))\n    return\n  }\n\n  try {\n    if (contentType.startsWith('application/json')) {\n      const payload = JSON.parse(toUSVString(Buffer.concat(chunks)))\n      process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ''}`, statusCode, headers, payload))\n      return\n    }\n\n    if (contentType.startsWith('text/')) {\n      const payload = toUSVString(Buffer.concat(chunks))\n      process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ''}`, statusCode, headers, payload))\n      return\n    }\n  } catch (err) {\n    // Process in a fallback if error\n  }\n\n  process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ''}`, statusCode, headers))\n}\n\nmodule.exports = { getResolveErrorBodyCallback }\n"],"names":["$jL7KM$pythonversioncheckdba5a2d4js","$jL7KM$pythonversioncheck7ed1514ejs","$jL7KM$assert","$46d7b702cee52120$exports","$46d7b702cee52120$require$ResponseStatusCodeError","ResponseStatusCodeError","$46d7b702cee52120$require$toUSVString","toUSVString","getResolveErrorBodyCallback","callback","body","contentType","statusCode","statusMessage","headers","chunks","limit","chunk","push","length","process","nextTick","startsWith","payload","JSON","parse","Buffer","concat","err","default"],"version":3,"file":"python-version-check.07af86dc.js.map","sourceRoot":"../"}