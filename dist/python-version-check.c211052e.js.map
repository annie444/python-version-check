{"mappings":"A,O,M,qD,A,Q,M,qD,A,Q,M,qD,A,Q,M,qD,A,Q,M,qD,A,Q,M,qD,A,Q,M,qD,A,Q,M,qD,A,Q,M,qD,A,Q,M,qD,A,Q,M,qD,A,W,M,Q,A,Q,S,C,K,M,A,Q,kB,C,K,Y,C,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,A,C,E,E,Q,A,E,Q,S,C,C,C,ECEM,IAAA,EAAA,sDAAA,OAAA,CAAA,EAAA,EAAA,WAAA,CAAA,EAAA,qDAAA,IAAA,CACA,EAAA,sDAAA,WAAA,CAAA,EAAA,qDAAA,SAAA,CAAA,EAAA,EAAA,SAAA,CAEN,GAAM,CAAA,oBAAE,CAAmB,CAAE,CAAG,EAC1B,IAAA,EAAA,sDAAA,mBAAA,CAAA,EAAA,sDAAA,WAAA,CAAA,EAAA,qDAAA,SAAA,CAAA,EAAA,sDAAA,UAAA,CAAA,EAAA,EAAA,oCAAA,CAAA,EAAA,sDAAA,WAAA,CAAA,EAAA,sDAAA,gBAAA,CASA,EAAA,EAAA,iBAAA,CAAA,EAAA,sDAAA,cAAA,CAAA,EAAA,qDAAA,YAAA,CAKA,EAAA,EAAA,MAAA,CAAA,EAAA,sDAAA,QAAA,CAAA,EAAA,qDAAA,MAAA,CAAA,EAAA,sDAAA,MAAA,CACA,EAAA,EAAA,MAAA,CACA,EAAA,EAAA,QAAA,CACA,EAAA,EAAA,eAAA,CACA,EAAA,EAAA,aAAA,CACA,EAAA,EAAA,YAAA,CAAA,EAAA,qDAAA,UAAA,CAIN,IAAM,EAAiB,WAAW,cAAc,EAAI,EAC9C,EAAc,IAAI,YAAY,QAGpC,OAAM,EAEJ,OAAO,OAAS,CAEd,IAAM,EAAgB,CAAE,eAAgB,CAAC,CAAE,EAKrC,EAAiB,IAAI,EAM3B,OALA,CAAc,CAAA,EAAQ,CAAG,IACzB,CAAc,CAAA,EAAQ,CAAG,EACzB,CAAc,CAAA,EAAU,CAAA,EAAc,CAAG,CAAc,CAAA,EAAQ,CAAC,WAAW,CAC3E,CAAc,CAAA,EAAU,CAAA,EAAQ,CAAG,YACnC,CAAc,CAAA,EAAU,CAAA,EAAQ,CAAG,EAC5B,CACT,CAGA,OAAO,KAAM,CAAI,CAAE,EAAO,CAAC,CAAC,CAAE,CAC5B,EAAO,mBAAmB,CAAC,UAAW,EAAG,CAAE,OAAQ,eAAgB,GAE/D,AAAS,OAAT,GACF,CAAA,EAAO,EAAO,UAAU,CAAC,YAAY,CAAC,EADxC,EAUA,IAAM,EAAO,EALC,EAAY,MAAM,CAC9B,EAAqC,KAQjC,EAAgB,CAAE,eAAgB,CAAC,CAAE,EACrC,EAAiB,IAAI,EAS3B,OARA,CAAc,CAAA,EAAQ,CAAG,EACzB,CAAc,CAAA,EAAU,CAAA,EAAQ,CAAG,WACnC,CAAc,CAAA,EAAU,CAAA,EAAQ,CAAG,EAGnC,EAAmB,EAAgB,EAAM,CAAE,KAAM,CAAI,CAAC,EAAE,CAAE,KAAM,kBAAmB,GAG5E,CACT,CAGA,OAAO,SAAU,CAAG,CAAE,EAAS,GAAG,CAAE,CAClC,IAWI,EAXE,EAAgB,CAAE,eAAgB,CAAC,CAAE,EAE3C,EAAO,mBAAmB,CAAC,UAAW,EAAG,CAAE,OAAQ,mBAAoB,GAEvE,EAAM,EAAO,UAAU,CAAC,SAAS,CAAC,GAClC,EAAS,EAAO,UAAU,CAAC,iBAAiB,CAAC,GAO7C,GAAI,CACF,EAAY,IAAI,IAAI,EAAK,IAC3B,CAAE,MAAO,EAAK,CACZ,MAAM,OAAO,MAAM,CAAC,AAAI,UAAU,4BAA8B,GAAM,CACpE,MAAO,CACT,EACF,CAGA,GAAI,CAAC,EAAkB,GAAG,CAAC,GACzB,MAAM,AAAI,WAAW,uBAAyB,GAKhD,IAAM,EAAiB,IAAI,CAC3B,CAAA,CAAc,CAAA,EAAQ,CAAG,EACzB,CAAc,CAAA,EAAU,CAAA,EAAQ,CAAG,YACnC,CAAc,CAAA,EAAU,CAAA,EAAQ,CAAG,EAGnC,CAAc,CAAA,EAAQ,CAAC,MAAM,CAAG,EAGhC,IAAM,EAAQ,EAAiB,EAAc,IAM7C,OAHA,CAAc,CAAA,EAAQ,CAAC,WAAW,CAAC,MAAM,CAAC,WAAY,GAG/C,CACT,CAGA,YAAa,EAAO,IAAI,CAAE,EAAO,CAAC,CAAC,CAAE,CAC/B,AAAS,OAAT,GACF,CAAA,EAAO,EAAO,UAAU,CAAC,QAAQ,CAAC,EADpC,EAIA,EAAO,EAAO,UAAU,CAAC,YAAY,CAAC,GAGtC,IAAI,CAAA,EAAQ,CAAG,CAAE,eAAgB,CAAC,CAAE,EAGpC,IAAI,CAAA,EAAQ,CAAG,EAAa,CAAC,GAK7B,IAAI,CAAA,EAAU,CAAG,IAAjB,EAAA,GACA,IAAI,CAAA,EAAU,CAAA,EAAQ,CAAG,WACzB,IAAI,CAAA,EAAU,CAAA,EAAc,CAAG,IAAI,CAAA,EAAQ,CAAC,WAAW,CACvD,IAAI,CAAA,EAAU,CAAA,EAAQ,CAAG,IAAI,CAAA,EAAQ,CAGrC,IAAI,EAAe,KAGnB,GAAI,AAAQ,MAAR,EAAc,CAChB,GAAM,CAAC,EAAe,EAAK,CAAG,EAAY,GAC1C,EAAe,CAAE,KAAM,EAAe,KAAA,CAAK,CAC7C,CAGA,EAAmB,IAAI,CAAE,EAAM,EACjC,CAGA,IAAI,MAAQ,CAIV,OAHA,EAAO,UAAU,CAAC,IAAI,CAAE,GAGjB,IAAI,CAAA,EAAQ,CAAC,IAAI,AAC1B,CAGA,IAAI,KAAO,CACT,EAAO,UAAU,CAAC,IAAI,CAAE,GAExB,IAAM,EAAU,IAAI,CAAA,EAAQ,CAAC,OAAO,CAK9B,EAAM,CAAO,CAAC,EAAQ,MAAM,CAAG,EAAE,EAAI,YAE3C,AAAI,AAAQ,OAAR,EACK,GAGF,EAAc,EAAK,CAAA,EAC5B,CAGA,IAAI,YAAc,CAKhB,OAJA,EAAO,UAAU,CAAC,IAAI,CAAE,GAIjB,IAAI,CAAA,EAAQ,CAAC,OAAO,CAAC,MAAM,CAAG,CACvC,CAGA,IAAI,QAAU,CAIZ,OAHA,EAAO,UAAU,CAAC,IAAI,CAAE,GAGjB,IAAI,CAAA,EAAQ,CAAC,MAAM,AAC5B,CAGA,IAAI,IAAM,CAKR,OAJA,EAAO,UAAU,CAAC,IAAI,CAAE,GAIjB,IAAI,CAAA,EAAQ,CAAC,MAAM,EAAI,KAAO,IAAI,CAAA,EAAQ,CAAC,MAAM,EAAI,GAC9D,CAGA,IAAI,YAAc,CAKhB,OAJA,EAAO,UAAU,CAAC,IAAI,CAAE,GAIjB,IAAI,CAAA,EAAQ,CAAC,UAAU,AAChC,CAGA,IAAI,SAAW,CAIb,OAHA,EAAO,UAAU,CAAC,IAAI,CAAE,GAGjB,IAAI,CAAA,EAAU,AACvB,CAEA,IAAI,MAAQ,CAGV,OAFA,EAAO,UAAU,CAAC,IAAI,CAAE,GAEjB,IAAI,CAAA,EAAQ,CAAC,IAAI,CAAG,IAAI,CAAA,EAAQ,CAAC,IAAI,CAAC,MAAM,CAAG,IACxD,CAEA,IAAI,UAAY,CAGd,OAFA,EAAO,UAAU,CAAC,IAAI,CAAE,GAEjB,CAAC,CAAC,IAAI,CAAA,EAAQ,CAAC,IAAI,EAAI,EAAK,WAAW,CAAC,IAAI,CAAA,EAAQ,CAAC,IAAI,CAAC,MAAM,CACzE,CAGA,OAAS,CAIP,GAHA,EAAO,UAAU,CAAC,IAAI,CAAE,GAGpB,IAAI,CAAC,QAAQ,EAAK,IAAI,CAAC,IAAI,EAAI,IAAI,CAAC,IAAI,CAAC,MAAM,CACjD,MAAM,EAAO,MAAM,CAAC,SAAS,CAAC,CAC5B,OAAQ,iBACR,QAAS,iCACX,GAIF,IAAM,EAAiB,EAAc,IAAI,CAAA,EAAQ,EAI3C,EAAuB,IAAI,EAOjC,OANA,CAAoB,CAAA,EAAQ,CAAG,EAC/B,CAAoB,CAAA,EAAQ,CAAG,IAAI,CAAA,EAAQ,CAC3C,CAAoB,CAAA,EAAU,CAAA,EAAc,CAAG,EAAe,WAAW,CACzE,CAAoB,CAAA,EAAU,CAAA,EAAQ,CAAG,IAAI,CAAA,EAAU,CAAA,EAAQ,CAC/D,CAAoB,CAAA,EAAU,CAAA,EAAQ,CAAG,IAAI,CAAA,EAAU,CAAA,EAAQ,CAExD,CACT,CACF,CA4BA,SAAS,EAAe,CAAQ,EAM9B,GAAI,EAAS,gBAAgB,CAC3B,OAAO,EACL,EAAc,EAAS,gBAAgB,EACvC,EAAS,IAAI,EAKjB,IAAM,EAAc,EAAa,CAAE,GAAG,CAAQ,CAAE,KAAM,IAAK,GAS3D,OALI,AAAiB,MAAjB,EAAS,IAAI,EACf,CAAA,EAAY,IAAI,CAAG,EAAU,EAAS,IAAI,CAAA,EAIrC,CACT,CAEA,SAAS,EAAc,CAAI,EACzB,MAAO,CACL,QAAS,CAAA,EACT,eAAgB,CAAA,EAChB,kBAAmB,CAAA,EACnB,2BAA4B,CAAA,EAC5B,KAAM,UACN,OAAQ,IACR,WAAY,KACZ,WAAY,GACZ,WAAY,GACZ,GAAG,CAAI,CACP,YAAa,EAAK,WAAW,CACzB,IAAA,EAAgB,EAAK,WAAW,EAChC,IAFJ,EAGA,QAAS,EAAK,OAAO,CAAG,IAAI,EAAK,OAAO,CAAC,CAAG,EAAE,AAChD,CACF,CAEA,SAAS,EAAkB,CAAM,EAE/B,OAAO,EAAa,CAClB,KAAM,QACN,OAAQ,EACR,MAAO,AAJO,EAAY,GAKtB,EACA,AAAI,MAAM,EAAS,OAAO,GAAU,GACxC,QAAS,GAAU,AAAgB,eAAhB,EAAO,IAAI,AAChC,EACF,CAEA,SAAS,EAAsB,CAAQ,CAAE,CAAK,EAM5C,OALA,EAAQ,CACN,iBAAkB,EAClB,GAAG,CAAK,AACV,EAEO,IAAI,MAAM,EAAU,CACzB,IAAA,CAAK,EAAQ,IACJ,KAAK,EAAQ,CAAK,CAAC,EAAE,CAAG,CAAM,CAAC,EAAE,CAE1C,IAAA,CAAK,EAAQ,EAAG,KACd,EAAO,CAAE,CAAA,KAAK,CAAA,GACd,CAAM,CAAC,EAAE,CAAG,EACL,CAAA,EAEX,EACF,CAGA,SAAS,EAAgB,CAAQ,CAAE,CAAI,QAGrC,AAAI,AAAS,UAAT,EAMK,EAAqB,EAAU,CACpC,KAAM,QACN,YAAa,EAAS,WAAW,AACnC,GACS,AAAS,SAAT,EAOF,EAAqB,EAAU,CACpC,KAAM,OACN,YAAa,EAAS,WAAW,AACnC,GACS,AAAS,WAAT,EAKF,EAAqB,EAAU,CACpC,KAAM,SACN,QAAS,OAAO,MAAM,CAAC,EAAE,EACzB,OAAQ,EACR,WAAY,GACZ,KAAM,IACR,GACS,AAAS,mBAAT,EAKF,EAAqB,EAAU,CACpC,KAAM,iBACN,OAAQ,EACR,WAAY,GACZ,YAAa,EAAE,CACf,KAAM,IACR,QAEA,EAAO,CAAA,EAEX,CAeA,SAAS,EAAoB,CAAQ,CAAE,CAAI,CAAE,CAAI,EAG/C,GAAI,AAAgB,OAAhB,EAAK,MAAM,EAAc,CAAA,EAAK,MAAM,CAAG,KAAO,EAAK,MAAM,CAAG,GAAA,EAC9D,MAAM,AAAI,WAAW,iEAKvB,GAAI,eAAgB,GAAQ,AAAmB,MAAnB,EAAK,UAAU,EAGrC,CAAC,EAAoB,OAAO,EAAK,UAAU,GAC7C,MAAM,AAAI,UAAU,sBAoBxB,GAfI,WAAY,GAAQ,AAAe,MAAf,EAAK,MAAM,EACjC,CAAA,CAAQ,CAAA,EAAQ,CAAC,MAAM,CAAG,EAAK,MAAM,AAAN,EAI7B,eAAgB,GAAQ,AAAmB,MAAnB,EAAK,UAAU,EACzC,CAAA,CAAQ,CAAA,EAAQ,CAAC,UAAU,CAAG,EAAK,UAAU,AAAV,EAIjC,YAAa,GAAQ,AAAgB,MAAhB,EAAK,OAAO,EACnC,EAAK,CAAQ,CAAA,EAAU,CAAE,EAAK,OAAO,EAInC,EAAM,CAER,GAAI,EAAe,QAAQ,CAAC,EAAS,MAAM,EACzC,MAAM,EAAO,MAAM,CAAC,SAAS,CAAC,CAC5B,OAAQ,uBACR,QAAS,gCAAkC,EAAS,MAAM,AAC5D,EAIF,CAAA,CAAQ,CAAA,EAAQ,CAAC,IAAI,CAAG,EAAK,IAAI,CAI7B,AAAa,MAAb,EAAK,IAAI,EAAa,CAAQ,CAAA,EAAQ,CAAC,WAAW,CAAC,QAAQ,CAAC,iBAC9D,CAAQ,CAAA,EAAQ,CAAC,WAAW,CAAC,MAAM,CAAC,eAAgB,EAAK,IAAI,CAEjE,CACF,CA3NA,EAAU,GAEV,OAAO,gBAAgB,CAAC,EAAS,SAAS,CAAE,CAC1C,KAAM,EACN,IAAK,EACL,OAAQ,EACR,GAAI,EACJ,WAAY,EACZ,WAAY,EACZ,QAAS,EACT,MAAO,EACP,KAAM,EACN,SAAU,EACV,CAAC,OAAO,WAAW,CAAC,CAAE,CACpB,MAAO,WACP,aAAc,CAAA,CAChB,CACF,GAEA,OAAO,gBAAgB,CAAC,EAAU,CAChC,KAAM,EACN,SAAU,EACV,MAAO,CACT,GAsMA,EAAO,UAAU,CAAC,cAAc,CAAG,EAAO,kBAAkB,CAC1D,GAGF,EAAO,UAAU,CAAC,QAAQ,CAAG,EAAO,kBAAkB,CAAtD,GAIA,EAAO,UAAU,CAAC,eAAe,CAAG,EAAO,kBAAkB,CAC3D,iBAIF,EAAO,UAAU,CAAC,sBAAsB,CAAG,SAAU,CAAC,QACpD,AAAI,AAAa,UAAb,OAAO,EACF,EAAO,UAAU,CAAC,SAAS,CAAC,GAGjC,EAAW,GACN,EAAO,UAAU,CAAC,IAAI,CAAC,EAAG,CAAE,OAAQ,CAAA,CAAM,GAG/C,AAzeA,EAyeM,aAAa,CAAC,IAAM,AAze1B,EAyegC,YAAY,CAAC,IAAM,AAzenD,EAyeyD,UAAU,CAAC,GAC/D,EAAO,UAAU,CAAC,YAAY,CAAC,GAGpC,EAAK,cAAc,CAAC,GACf,EAAO,UAAU,CAAC,QAAQ,CAAC,EAAG,CAAE,OAAQ,CAAA,CAAM,GAGnD,aAAa,gBACR,EAAO,UAAU,CAAC,eAAe,CAAC,GAGpC,EAAO,UAAU,CAAC,SAAS,CAAC,EACrC,EAGA,EAAO,UAAU,CAAC,QAAQ,CAAG,SAAU,CAAC,SACtC,AAAI,aAAa,EACR,EAAO,UAAU,CAAC,cAAc,CAAC,GAKtC,GAAG,CAAC,OAAO,aAAa,CAAC,CACpB,EAGF,EAAO,UAAU,CAAC,sBAAsB,CAAC,EAClD,EAEA,EAAO,UAAU,CAAC,YAAY,CAAG,EAAO,mBAAmB,CAAC,CAC1D,CACE,IAAK,SACL,UAAW,EAAO,UAAU,CAAC,iBAAiB,CAC9C,aAAc,GAChB,EACA,CACE,IAAK,aACL,UAAW,EAAO,UAAU,CAAC,UAAU,CACvC,aAAc,EAChB,EACA,CACE,IAAK,UACL,UAAW,EAAO,UAAU,CAAC,WAAW,AAC1C,EACD,EAED,EAAA,OAAA,CAAiB,CACf,iBAAA,EACA,aAAA,EACA,4BAzIF,SAAsC,CAAW,CAAE,EAAM,IAAI,EAM3D,OAJA,EAAO,EAAY,IAIZ,EAAU,GACb,EAAiB,OAAO,MAAM,CAAC,IAAA,EAAiB,6BAA8B,cAAe,CAAE,MAAO,CAAI,IAC1G,EAAiB,OAAO,MAAM,CAAC,IAAA,EAAiB,0BAA2B,CAAE,MAAO,CAAI,GAC9F,EAiIE,eAAA,EACA,SAAA,EACA,cAAA,CACF,C,G,E","sources":["<anon>","node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fetch/response.js"],"sourcesContent":["import $5nCFS$pythonversioncheck5597d583js2 from \"./python-version-check.5597d583.js\";\nimport $5nCFS$pythonversioncheck152f8bbajs2 from \"./python-version-check.152f8bba.js\";\nimport $5nCFS$pythonversioncheck7ed1514ejs from \"./python-version-check.7ed1514e.js\";\nimport $5nCFS$pythonversioncheck3f48d3eejs6 from \"./python-version-check.3f48d3ee.js\";\nimport $5nCFS$pythonversioncheck863e006ejs2 from \"./python-version-check.863e006e.js\";\nimport $5nCFS$pythonversioncheck92c00e26js3 from \"./python-version-check.92c00e26.js\";\nimport $5nCFS$pythonversioncheck801bb0f1js from \"./python-version-check.801bb0f1.js\";\nimport $5nCFS$pythonversioncheck34871282js from \"./python-version-check.34871282.js\";\nimport $5nCFS$pythonversioncheckb40ebe18js from \"./python-version-check.b40ebe18.js\";\nimport $5nCFS$pythonversioncheck685b5bb2js from \"./python-version-check.685b5bb2.js\";\nimport $5nCFS$pythonversioncheckebf2a848js1 from \"./python-version-check.ebf2a848.js\";\nimport * as $5nCFS$assert from \"assert\";\nimport {types as $5nCFS$types} from \"util\";\nimport {ReadableStream as $5nCFS$ReadableStream} from \"stream/web\";\n\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire5a65\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire5a65\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"9zviE\", function(module, exports) {\n'use strict';\n\nvar $6f7fa96c40be915e$require$Headers = $5nCFS$pythonversioncheck5597d583js1.Headers;\nvar $6f7fa96c40be915e$require$HeadersList = $5nCFS$pythonversioncheck5597d583js2.HeadersList;\nvar $6f7fa96c40be915e$require$fill = $5nCFS$pythonversioncheck5597d583js.fill;\n\nvar $6f7fa96c40be915e$require$extractBody = $5nCFS$pythonversioncheck152f8bbajs1.extractBody;\nvar $6f7fa96c40be915e$require$cloneBody = $5nCFS$pythonversioncheck152f8bbajs.cloneBody;\nvar $6f7fa96c40be915e$require$mixinBody = $5nCFS$pythonversioncheck152f8bbajs2.mixinBody;\n\nconst { kEnumerableProperty: $6f7fa96c40be915e$var$kEnumerableProperty } = $5nCFS$pythonversioncheck7ed1514ejs;\n\nvar $6f7fa96c40be915e$require$isValidReasonPhrase = $5nCFS$pythonversioncheck3f48d3eejs5.isValidReasonPhrase;\nvar $6f7fa96c40be915e$require$isCancelled = $5nCFS$pythonversioncheck3f48d3eejs2.isCancelled;\nvar $6f7fa96c40be915e$require$isAborted = $5nCFS$pythonversioncheck3f48d3eejs.isAborted;\nvar $6f7fa96c40be915e$require$isBlobLike = $5nCFS$pythonversioncheck3f48d3eejs1.isBlobLike;\nvar $6f7fa96c40be915e$require$serializeJavascriptValueToJSONString = $5nCFS$pythonversioncheck3f48d3eejs6.serializeJavascriptValueToJSONString;\nvar $6f7fa96c40be915e$require$isErrorLike = $5nCFS$pythonversioncheck3f48d3eejs3.isErrorLike;\nvar $6f7fa96c40be915e$require$isomorphicEncode = $5nCFS$pythonversioncheck3f48d3eejs4.isomorphicEncode;\n\nvar $6f7fa96c40be915e$require$redirectStatusSet = $5nCFS$pythonversioncheck863e006ejs2.redirectStatusSet;\nvar $6f7fa96c40be915e$require$nullBodyStatus = $5nCFS$pythonversioncheck863e006ejs1.nullBodyStatus;\nvar $6f7fa96c40be915e$require$DOMException = $5nCFS$pythonversioncheck863e006ejs.DOMException;\n\nvar $6f7fa96c40be915e$require$kState = $5nCFS$pythonversioncheck92c00e26js3.kState;\nvar $6f7fa96c40be915e$require$kHeaders = $5nCFS$pythonversioncheck92c00e26js1.kHeaders;\nvar $6f7fa96c40be915e$require$kGuard = $5nCFS$pythonversioncheck92c00e26js.kGuard;\nvar $6f7fa96c40be915e$require$kRealm = $5nCFS$pythonversioncheck92c00e26js2.kRealm;\n\nvar $6f7fa96c40be915e$require$webidl = $5nCFS$pythonversioncheck801bb0f1js.webidl;\n\nvar $6f7fa96c40be915e$require$FormData = $5nCFS$pythonversioncheck34871282js.FormData;\n\nvar $6f7fa96c40be915e$require$getGlobalOrigin = $5nCFS$pythonversioncheckb40ebe18js.getGlobalOrigin;\n\nvar $6f7fa96c40be915e$require$URLSerializer = $5nCFS$pythonversioncheck685b5bb2js.URLSerializer;\n\nvar $6f7fa96c40be915e$require$kHeadersList = $5nCFS$pythonversioncheckebf2a848js1.kHeadersList;\nvar $6f7fa96c40be915e$require$kConstruct = $5nCFS$pythonversioncheckebf2a848js.kConstruct;\n\n\nvar $6f7fa96c40be915e$require$types = $5nCFS$types;\n\nconst $6f7fa96c40be915e$var$ReadableStream = globalThis.ReadableStream || $5nCFS$ReadableStream;\nconst $6f7fa96c40be915e$var$textEncoder = new TextEncoder('utf-8');\n// https://fetch.spec.whatwg.org/#response-class\nclass $6f7fa96c40be915e$var$Response {\n    // Creates network error Response.\n    static error() {\n        // TODO\n        const relevantRealm = {\n            settingsObject: {}\n        };\n        // The static error() method steps are to return the result of creating a\n        // Response object, given a new network error, \"immutable\", and this’s\n        // relevant Realm.\n        const responseObject = new $6f7fa96c40be915e$var$Response();\n        responseObject[$6f7fa96c40be915e$require$kState] = $6f7fa96c40be915e$var$makeNetworkError();\n        responseObject[$6f7fa96c40be915e$require$kRealm] = relevantRealm;\n        responseObject[$6f7fa96c40be915e$require$kHeaders][$6f7fa96c40be915e$require$kHeadersList] = responseObject[$6f7fa96c40be915e$require$kState].headersList;\n        responseObject[$6f7fa96c40be915e$require$kHeaders][$6f7fa96c40be915e$require$kGuard] = 'immutable';\n        responseObject[$6f7fa96c40be915e$require$kHeaders][$6f7fa96c40be915e$require$kRealm] = relevantRealm;\n        return responseObject;\n    }\n    // https://fetch.spec.whatwg.org/#dom-response-json\n    static json(data, init = {}) {\n        $6f7fa96c40be915e$require$webidl.argumentLengthCheck(arguments, 1, {\n            header: 'Response.json'\n        });\n        if (init !== null) init = $6f7fa96c40be915e$require$webidl.converters.ResponseInit(init);\n        // 1. Let bytes the result of running serialize a JavaScript value to JSON bytes on data.\n        const bytes = $6f7fa96c40be915e$var$textEncoder.encode($6f7fa96c40be915e$require$serializeJavascriptValueToJSONString(data));\n        // 2. Let body be the result of extracting bytes.\n        const body = $6f7fa96c40be915e$require$extractBody(bytes);\n        // 3. Let responseObject be the result of creating a Response object, given a new response,\n        //    \"response\", and this’s relevant Realm.\n        const relevantRealm = {\n            settingsObject: {}\n        };\n        const responseObject = new $6f7fa96c40be915e$var$Response();\n        responseObject[$6f7fa96c40be915e$require$kRealm] = relevantRealm;\n        responseObject[$6f7fa96c40be915e$require$kHeaders][$6f7fa96c40be915e$require$kGuard] = 'response';\n        responseObject[$6f7fa96c40be915e$require$kHeaders][$6f7fa96c40be915e$require$kRealm] = relevantRealm;\n        // 4. Perform initialize a response given responseObject, init, and (body, \"application/json\").\n        $6f7fa96c40be915e$var$initializeResponse(responseObject, init, {\n            body: body[0],\n            type: 'application/json'\n        });\n        // 5. Return responseObject.\n        return responseObject;\n    }\n    // Creates a redirect Response that redirects to url with status status.\n    static redirect(url, status = 302) {\n        const relevantRealm = {\n            settingsObject: {}\n        };\n        $6f7fa96c40be915e$require$webidl.argumentLengthCheck(arguments, 1, {\n            header: 'Response.redirect'\n        });\n        url = $6f7fa96c40be915e$require$webidl.converters.USVString(url);\n        status = $6f7fa96c40be915e$require$webidl.converters['unsigned short'](status);\n        // 1. Let parsedURL be the result of parsing url with current settings\n        // object’s API base URL.\n        // 2. If parsedURL is failure, then throw a TypeError.\n        // TODO: base-URL?\n        let parsedURL;\n        try {\n            parsedURL = new URL(url, $6f7fa96c40be915e$require$getGlobalOrigin());\n        } catch (err) {\n            throw Object.assign(new TypeError('Failed to parse URL from ' + url), {\n                cause: err\n            });\n        }\n        // 3. If status is not a redirect status, then throw a RangeError.\n        if (!$6f7fa96c40be915e$require$redirectStatusSet.has(status)) throw new RangeError('Invalid status code ' + status);\n        // 4. Let responseObject be the result of creating a Response object,\n        // given a new response, \"immutable\", and this’s relevant Realm.\n        const responseObject = new $6f7fa96c40be915e$var$Response();\n        responseObject[$6f7fa96c40be915e$require$kRealm] = relevantRealm;\n        responseObject[$6f7fa96c40be915e$require$kHeaders][$6f7fa96c40be915e$require$kGuard] = 'immutable';\n        responseObject[$6f7fa96c40be915e$require$kHeaders][$6f7fa96c40be915e$require$kRealm] = relevantRealm;\n        // 5. Set responseObject’s response’s status to status.\n        responseObject[$6f7fa96c40be915e$require$kState].status = status;\n        // 6. Let value be parsedURL, serialized and isomorphic encoded.\n        const value = $6f7fa96c40be915e$require$isomorphicEncode($6f7fa96c40be915e$require$URLSerializer(parsedURL));\n        // 7. Append `Location`/value to responseObject’s response’s header list.\n        responseObject[$6f7fa96c40be915e$require$kState].headersList.append('location', value);\n        // 8. Return responseObject.\n        return responseObject;\n    }\n    // https://fetch.spec.whatwg.org/#dom-response\n    constructor(body = null, init = {}){\n        if (body !== null) body = $6f7fa96c40be915e$require$webidl.converters.BodyInit(body);\n        init = $6f7fa96c40be915e$require$webidl.converters.ResponseInit(init);\n        // TODO\n        this[$6f7fa96c40be915e$require$kRealm] = {\n            settingsObject: {}\n        };\n        // 1. Set this’s response to a new response.\n        this[$6f7fa96c40be915e$require$kState] = $6f7fa96c40be915e$var$makeResponse({});\n        // 2. Set this’s headers to a new Headers object with this’s relevant\n        // Realm, whose header list is this’s response’s header list and guard\n        // is \"response\".\n        this[$6f7fa96c40be915e$require$kHeaders] = new $6f7fa96c40be915e$require$Headers($6f7fa96c40be915e$require$kConstruct);\n        this[$6f7fa96c40be915e$require$kHeaders][$6f7fa96c40be915e$require$kGuard] = 'response';\n        this[$6f7fa96c40be915e$require$kHeaders][$6f7fa96c40be915e$require$kHeadersList] = this[$6f7fa96c40be915e$require$kState].headersList;\n        this[$6f7fa96c40be915e$require$kHeaders][$6f7fa96c40be915e$require$kRealm] = this[$6f7fa96c40be915e$require$kRealm];\n        // 3. Let bodyWithType be null.\n        let bodyWithType = null;\n        // 4. If body is non-null, then set bodyWithType to the result of extracting body.\n        if (body != null) {\n            const [extractedBody, type] = $6f7fa96c40be915e$require$extractBody(body);\n            bodyWithType = {\n                body: extractedBody,\n                type: type\n            };\n        }\n        // 5. Perform initialize a response given this, init, and bodyWithType.\n        $6f7fa96c40be915e$var$initializeResponse(this, init, bodyWithType);\n    }\n    // Returns response’s type, e.g., \"cors\".\n    get type() {\n        $6f7fa96c40be915e$require$webidl.brandCheck(this, $6f7fa96c40be915e$var$Response);\n        // The type getter steps are to return this’s response’s type.\n        return this[$6f7fa96c40be915e$require$kState].type;\n    }\n    // Returns response’s URL, if it has one; otherwise the empty string.\n    get url() {\n        $6f7fa96c40be915e$require$webidl.brandCheck(this, $6f7fa96c40be915e$var$Response);\n        const urlList = this[$6f7fa96c40be915e$require$kState].urlList;\n        // The url getter steps are to return the empty string if this’s\n        // response’s URL is null; otherwise this’s response’s URL,\n        // serialized with exclude fragment set to true.\n        const url = urlList[urlList.length - 1] ?? null;\n        if (url === null) return '';\n        return $6f7fa96c40be915e$require$URLSerializer(url, true);\n    }\n    // Returns whether response was obtained through a redirect.\n    get redirected() {\n        $6f7fa96c40be915e$require$webidl.brandCheck(this, $6f7fa96c40be915e$var$Response);\n        // The redirected getter steps are to return true if this’s response’s URL\n        // list has more than one item; otherwise false.\n        return this[$6f7fa96c40be915e$require$kState].urlList.length > 1;\n    }\n    // Returns response’s status.\n    get status() {\n        $6f7fa96c40be915e$require$webidl.brandCheck(this, $6f7fa96c40be915e$var$Response);\n        // The status getter steps are to return this’s response’s status.\n        return this[$6f7fa96c40be915e$require$kState].status;\n    }\n    // Returns whether response’s status is an ok status.\n    get ok() {\n        $6f7fa96c40be915e$require$webidl.brandCheck(this, $6f7fa96c40be915e$var$Response);\n        // The ok getter steps are to return true if this’s response’s status is an\n        // ok status; otherwise false.\n        return this[$6f7fa96c40be915e$require$kState].status >= 200 && this[$6f7fa96c40be915e$require$kState].status <= 299;\n    }\n    // Returns response’s status message.\n    get statusText() {\n        $6f7fa96c40be915e$require$webidl.brandCheck(this, $6f7fa96c40be915e$var$Response);\n        // The statusText getter steps are to return this’s response’s status\n        // message.\n        return this[$6f7fa96c40be915e$require$kState].statusText;\n    }\n    // Returns response’s headers as Headers.\n    get headers() {\n        $6f7fa96c40be915e$require$webidl.brandCheck(this, $6f7fa96c40be915e$var$Response);\n        // The headers getter steps are to return this’s headers.\n        return this[$6f7fa96c40be915e$require$kHeaders];\n    }\n    get body() {\n        $6f7fa96c40be915e$require$webidl.brandCheck(this, $6f7fa96c40be915e$var$Response);\n        return this[$6f7fa96c40be915e$require$kState].body ? this[$6f7fa96c40be915e$require$kState].body.stream : null;\n    }\n    get bodyUsed() {\n        $6f7fa96c40be915e$require$webidl.brandCheck(this, $6f7fa96c40be915e$var$Response);\n        return !!this[$6f7fa96c40be915e$require$kState].body && $5nCFS$pythonversioncheck7ed1514ejs.isDisturbed(this[$6f7fa96c40be915e$require$kState].body.stream);\n    }\n    // Returns a clone of response.\n    clone() {\n        $6f7fa96c40be915e$require$webidl.brandCheck(this, $6f7fa96c40be915e$var$Response);\n        // 1. If this is unusable, then throw a TypeError.\n        if (this.bodyUsed || this.body && this.body.locked) throw $6f7fa96c40be915e$require$webidl.errors.exception({\n            header: 'Response.clone',\n            message: 'Body has already been consumed.'\n        });\n        // 2. Let clonedResponse be the result of cloning this’s response.\n        const clonedResponse = $6f7fa96c40be915e$var$cloneResponse(this[$6f7fa96c40be915e$require$kState]);\n        // 3. Return the result of creating a Response object, given\n        // clonedResponse, this’s headers’s guard, and this’s relevant Realm.\n        const clonedResponseObject = new $6f7fa96c40be915e$var$Response();\n        clonedResponseObject[$6f7fa96c40be915e$require$kState] = clonedResponse;\n        clonedResponseObject[$6f7fa96c40be915e$require$kRealm] = this[$6f7fa96c40be915e$require$kRealm];\n        clonedResponseObject[$6f7fa96c40be915e$require$kHeaders][$6f7fa96c40be915e$require$kHeadersList] = clonedResponse.headersList;\n        clonedResponseObject[$6f7fa96c40be915e$require$kHeaders][$6f7fa96c40be915e$require$kGuard] = this[$6f7fa96c40be915e$require$kHeaders][$6f7fa96c40be915e$require$kGuard];\n        clonedResponseObject[$6f7fa96c40be915e$require$kHeaders][$6f7fa96c40be915e$require$kRealm] = this[$6f7fa96c40be915e$require$kHeaders][$6f7fa96c40be915e$require$kRealm];\n        return clonedResponseObject;\n    }\n}\n$6f7fa96c40be915e$require$mixinBody($6f7fa96c40be915e$var$Response);\nObject.defineProperties($6f7fa96c40be915e$var$Response.prototype, {\n    type: $6f7fa96c40be915e$var$kEnumerableProperty,\n    url: $6f7fa96c40be915e$var$kEnumerableProperty,\n    status: $6f7fa96c40be915e$var$kEnumerableProperty,\n    ok: $6f7fa96c40be915e$var$kEnumerableProperty,\n    redirected: $6f7fa96c40be915e$var$kEnumerableProperty,\n    statusText: $6f7fa96c40be915e$var$kEnumerableProperty,\n    headers: $6f7fa96c40be915e$var$kEnumerableProperty,\n    clone: $6f7fa96c40be915e$var$kEnumerableProperty,\n    body: $6f7fa96c40be915e$var$kEnumerableProperty,\n    bodyUsed: $6f7fa96c40be915e$var$kEnumerableProperty,\n    [Symbol.toStringTag]: {\n        value: 'Response',\n        configurable: true\n    }\n});\nObject.defineProperties($6f7fa96c40be915e$var$Response, {\n    json: $6f7fa96c40be915e$var$kEnumerableProperty,\n    redirect: $6f7fa96c40be915e$var$kEnumerableProperty,\n    error: $6f7fa96c40be915e$var$kEnumerableProperty\n});\n// https://fetch.spec.whatwg.org/#concept-response-clone\nfunction $6f7fa96c40be915e$var$cloneResponse(response) {\n    // To clone a response response, run these steps:\n    // 1. If response is a filtered response, then return a new identical\n    // filtered response whose internal response is a clone of response’s\n    // internal response.\n    if (response.internalResponse) return $6f7fa96c40be915e$var$filterResponse($6f7fa96c40be915e$var$cloneResponse(response.internalResponse), response.type);\n    // 2. Let newResponse be a copy of response, except for its body.\n    const newResponse = $6f7fa96c40be915e$var$makeResponse({\n        ...response,\n        body: null\n    });\n    // 3. If response’s body is non-null, then set newResponse’s body to the\n    // result of cloning response’s body.\n    if (response.body != null) newResponse.body = $6f7fa96c40be915e$require$cloneBody(response.body);\n    // 4. Return newResponse.\n    return newResponse;\n}\nfunction $6f7fa96c40be915e$var$makeResponse(init) {\n    return {\n        aborted: false,\n        rangeRequested: false,\n        timingAllowPassed: false,\n        requestIncludesCredentials: false,\n        type: 'default',\n        status: 200,\n        timingInfo: null,\n        cacheState: '',\n        statusText: '',\n        ...init,\n        headersList: init.headersList ? new $6f7fa96c40be915e$require$HeadersList(init.headersList) : new $6f7fa96c40be915e$require$HeadersList(),\n        urlList: init.urlList ? [\n            ...init.urlList\n        ] : []\n    };\n}\nfunction $6f7fa96c40be915e$var$makeNetworkError(reason) {\n    const isError = $6f7fa96c40be915e$require$isErrorLike(reason);\n    return $6f7fa96c40be915e$var$makeResponse({\n        type: 'error',\n        status: 0,\n        error: isError ? reason : new Error(reason ? String(reason) : reason),\n        aborted: reason && reason.name === 'AbortError'\n    });\n}\nfunction $6f7fa96c40be915e$var$makeFilteredResponse(response, state) {\n    state = {\n        internalResponse: response,\n        ...state\n    };\n    return new Proxy(response, {\n        get (target, p) {\n            return p in state ? state[p] : target[p];\n        },\n        set (target, p, value) {\n            $5nCFS$assert(!(p in state));\n            target[p] = value;\n            return true;\n        }\n    });\n}\n// https://fetch.spec.whatwg.org/#concept-filtered-response\nfunction $6f7fa96c40be915e$var$filterResponse(response, type) {\n    // Set response to the following filtered response with response as its\n    // internal response, depending on request’s response tainting:\n    if (type === 'basic') // A basic filtered response is a filtered response whose type is \"basic\"\n    // and header list excludes any headers in internal response’s header list\n    // whose name is a forbidden response-header name.\n    // Note: undici does not implement forbidden response-header names\n    return $6f7fa96c40be915e$var$makeFilteredResponse(response, {\n        type: 'basic',\n        headersList: response.headersList\n    });\n    else if (type === 'cors') // A CORS filtered response is a filtered response whose type is \"cors\"\n    // and header list excludes any headers in internal response’s header\n    // list whose name is not a CORS-safelisted response-header name, given\n    // internal response’s CORS-exposed header-name list.\n    // Note: undici does not implement CORS-safelisted response-header names\n    return $6f7fa96c40be915e$var$makeFilteredResponse(response, {\n        type: 'cors',\n        headersList: response.headersList\n    });\n    else if (type === 'opaque') // An opaque filtered response is a filtered response whose type is\n    // \"opaque\", URL list is the empty list, status is 0, status message\n    // is the empty byte sequence, header list is empty, and body is null.\n    return $6f7fa96c40be915e$var$makeFilteredResponse(response, {\n        type: 'opaque',\n        urlList: Object.freeze([]),\n        status: 0,\n        statusText: '',\n        body: null\n    });\n    else if (type === 'opaqueredirect') // An opaque-redirect filtered response is a filtered response whose type\n    // is \"opaqueredirect\", status is 0, status message is the empty byte\n    // sequence, header list is empty, and body is null.\n    return $6f7fa96c40be915e$var$makeFilteredResponse(response, {\n        type: 'opaqueredirect',\n        status: 0,\n        statusText: '',\n        headersList: [],\n        body: null\n    });\n    else $5nCFS$assert(false);\n}\n// https://fetch.spec.whatwg.org/#appropriate-network-error\nfunction $6f7fa96c40be915e$var$makeAppropriateNetworkError(fetchParams, err = null) {\n    // 1. Assert: fetchParams is canceled.\n    $5nCFS$assert($6f7fa96c40be915e$require$isCancelled(fetchParams));\n    // 2. Return an aborted network error if fetchParams is aborted;\n    // otherwise return a network error.\n    return $6f7fa96c40be915e$require$isAborted(fetchParams) ? $6f7fa96c40be915e$var$makeNetworkError(Object.assign(new $6f7fa96c40be915e$require$DOMException('The operation was aborted.', 'AbortError'), {\n        cause: err\n    })) : $6f7fa96c40be915e$var$makeNetworkError(Object.assign(new $6f7fa96c40be915e$require$DOMException('Request was cancelled.'), {\n        cause: err\n    }));\n}\n// https://whatpr.org/fetch/1392.html#initialize-a-response\nfunction $6f7fa96c40be915e$var$initializeResponse(response, init, body) {\n    // 1. If init[\"status\"] is not in the range 200 to 599, inclusive, then\n    //    throw a RangeError.\n    if (init.status !== null && (init.status < 200 || init.status > 599)) throw new RangeError('init[\"status\"] must be in the range of 200 to 599, inclusive.');\n    // 2. If init[\"statusText\"] does not match the reason-phrase token production,\n    //    then throw a TypeError.\n    if ('statusText' in init && init.statusText != null) {\n        // See, https://datatracker.ietf.org/doc/html/rfc7230#section-3.1.2:\n        //   reason-phrase  = *( HTAB / SP / VCHAR / obs-text )\n        if (!$6f7fa96c40be915e$require$isValidReasonPhrase(String(init.statusText))) throw new TypeError('Invalid statusText');\n    }\n    // 3. Set response’s response’s status to init[\"status\"].\n    if ('status' in init && init.status != null) response[$6f7fa96c40be915e$require$kState].status = init.status;\n    // 4. Set response’s response’s status message to init[\"statusText\"].\n    if ('statusText' in init && init.statusText != null) response[$6f7fa96c40be915e$require$kState].statusText = init.statusText;\n    // 5. If init[\"headers\"] exists, then fill response’s headers with init[\"headers\"].\n    if ('headers' in init && init.headers != null) $6f7fa96c40be915e$require$fill(response[$6f7fa96c40be915e$require$kHeaders], init.headers);\n    // 6. If body was given, then:\n    if (body) {\n        // 1. If response's status is a null body status, then throw a TypeError.\n        if ($6f7fa96c40be915e$require$nullBodyStatus.includes(response.status)) throw $6f7fa96c40be915e$require$webidl.errors.exception({\n            header: 'Response constructor',\n            message: 'Invalid response status code ' + response.status\n        });\n        // 2. Set response's body to body's body.\n        response[$6f7fa96c40be915e$require$kState].body = body.body;\n        // 3. If body's type is non-null and response's header list does not contain\n        //    `Content-Type`, then append (`Content-Type`, body's type) to response's header list.\n        if (body.type != null && !response[$6f7fa96c40be915e$require$kState].headersList.contains('Content-Type')) response[$6f7fa96c40be915e$require$kState].headersList.append('content-type', body.type);\n    }\n}\n$6f7fa96c40be915e$require$webidl.converters.ReadableStream = $6f7fa96c40be915e$require$webidl.interfaceConverter($6f7fa96c40be915e$var$ReadableStream);\n$6f7fa96c40be915e$require$webidl.converters.FormData = $6f7fa96c40be915e$require$webidl.interfaceConverter($6f7fa96c40be915e$require$FormData);\n$6f7fa96c40be915e$require$webidl.converters.URLSearchParams = $6f7fa96c40be915e$require$webidl.interfaceConverter(URLSearchParams);\n// https://fetch.spec.whatwg.org/#typedefdef-xmlhttprequestbodyinit\n$6f7fa96c40be915e$require$webidl.converters.XMLHttpRequestBodyInit = function(V) {\n    if (typeof V === 'string') return $6f7fa96c40be915e$require$webidl.converters.USVString(V);\n    if ($6f7fa96c40be915e$require$isBlobLike(V)) return $6f7fa96c40be915e$require$webidl.converters.Blob(V, {\n        strict: false\n    });\n    if ($6f7fa96c40be915e$require$types.isArrayBuffer(V) || $6f7fa96c40be915e$require$types.isTypedArray(V) || $6f7fa96c40be915e$require$types.isDataView(V)) return $6f7fa96c40be915e$require$webidl.converters.BufferSource(V);\n    if ($5nCFS$pythonversioncheck7ed1514ejs.isFormDataLike(V)) return $6f7fa96c40be915e$require$webidl.converters.FormData(V, {\n        strict: false\n    });\n    if (V instanceof URLSearchParams) return $6f7fa96c40be915e$require$webidl.converters.URLSearchParams(V);\n    return $6f7fa96c40be915e$require$webidl.converters.DOMString(V);\n};\n// https://fetch.spec.whatwg.org/#bodyinit\n$6f7fa96c40be915e$require$webidl.converters.BodyInit = function(V) {\n    if (V instanceof $6f7fa96c40be915e$var$ReadableStream) return $6f7fa96c40be915e$require$webidl.converters.ReadableStream(V);\n    // Note: the spec doesn't include async iterables,\n    // this is an undici extension.\n    if (V?.[Symbol.asyncIterator]) return V;\n    return $6f7fa96c40be915e$require$webidl.converters.XMLHttpRequestBodyInit(V);\n};\n$6f7fa96c40be915e$require$webidl.converters.ResponseInit = $6f7fa96c40be915e$require$webidl.dictionaryConverter([\n    {\n        key: 'status',\n        converter: $6f7fa96c40be915e$require$webidl.converters['unsigned short'],\n        defaultValue: 200\n    },\n    {\n        key: 'statusText',\n        converter: $6f7fa96c40be915e$require$webidl.converters.ByteString,\n        defaultValue: ''\n    },\n    {\n        key: 'headers',\n        converter: $6f7fa96c40be915e$require$webidl.converters.HeadersInit\n    }\n]);\nmodule.exports = {\n    makeNetworkError: $6f7fa96c40be915e$var$makeNetworkError,\n    makeResponse: $6f7fa96c40be915e$var$makeResponse,\n    makeAppropriateNetworkError: $6f7fa96c40be915e$var$makeAppropriateNetworkError,\n    filterResponse: $6f7fa96c40be915e$var$filterResponse,\n    Response: $6f7fa96c40be915e$var$Response,\n    cloneResponse: $6f7fa96c40be915e$var$cloneResponse\n};\n\n});\n\n\nparcelRequire(\"9zviE\");\n\n//# sourceMappingURL=python-version-check.c211052e.js.map\n","'use strict'\n\nconst { Headers, HeadersList, fill } = require('./headers')\nconst { extractBody, cloneBody, mixinBody } = require('./body')\nconst util = require('../core/util')\nconst { kEnumerableProperty } = util\nconst {\n  isValidReasonPhrase,\n  isCancelled,\n  isAborted,\n  isBlobLike,\n  serializeJavascriptValueToJSONString,\n  isErrorLike,\n  isomorphicEncode\n} = require('./util')\nconst {\n  redirectStatusSet,\n  nullBodyStatus,\n  DOMException\n} = require('./constants')\nconst { kState, kHeaders, kGuard, kRealm } = require('./symbols')\nconst { webidl } = require('./webidl')\nconst { FormData } = require('./formdata')\nconst { getGlobalOrigin } = require('./global')\nconst { URLSerializer } = require('./dataURL')\nconst { kHeadersList, kConstruct } = require('../core/symbols')\nconst assert = require('assert')\nconst { types } = require('util')\n\nconst ReadableStream = globalThis.ReadableStream || require('stream/web').ReadableStream\nconst textEncoder = new TextEncoder('utf-8')\n\n// https://fetch.spec.whatwg.org/#response-class\nclass Response {\n  // Creates network error Response.\n  static error () {\n    // TODO\n    const relevantRealm = { settingsObject: {} }\n\n    // The static error() method steps are to return the result of creating a\n    // Response object, given a new network error, \"immutable\", and this’s\n    // relevant Realm.\n    const responseObject = new Response()\n    responseObject[kState] = makeNetworkError()\n    responseObject[kRealm] = relevantRealm\n    responseObject[kHeaders][kHeadersList] = responseObject[kState].headersList\n    responseObject[kHeaders][kGuard] = 'immutable'\n    responseObject[kHeaders][kRealm] = relevantRealm\n    return responseObject\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-response-json\n  static json (data, init = {}) {\n    webidl.argumentLengthCheck(arguments, 1, { header: 'Response.json' })\n\n    if (init !== null) {\n      init = webidl.converters.ResponseInit(init)\n    }\n\n    // 1. Let bytes the result of running serialize a JavaScript value to JSON bytes on data.\n    const bytes = textEncoder.encode(\n      serializeJavascriptValueToJSONString(data)\n    )\n\n    // 2. Let body be the result of extracting bytes.\n    const body = extractBody(bytes)\n\n    // 3. Let responseObject be the result of creating a Response object, given a new response,\n    //    \"response\", and this’s relevant Realm.\n    const relevantRealm = { settingsObject: {} }\n    const responseObject = new Response()\n    responseObject[kRealm] = relevantRealm\n    responseObject[kHeaders][kGuard] = 'response'\n    responseObject[kHeaders][kRealm] = relevantRealm\n\n    // 4. Perform initialize a response given responseObject, init, and (body, \"application/json\").\n    initializeResponse(responseObject, init, { body: body[0], type: 'application/json' })\n\n    // 5. Return responseObject.\n    return responseObject\n  }\n\n  // Creates a redirect Response that redirects to url with status status.\n  static redirect (url, status = 302) {\n    const relevantRealm = { settingsObject: {} }\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'Response.redirect' })\n\n    url = webidl.converters.USVString(url)\n    status = webidl.converters['unsigned short'](status)\n\n    // 1. Let parsedURL be the result of parsing url with current settings\n    // object’s API base URL.\n    // 2. If parsedURL is failure, then throw a TypeError.\n    // TODO: base-URL?\n    let parsedURL\n    try {\n      parsedURL = new URL(url, getGlobalOrigin())\n    } catch (err) {\n      throw Object.assign(new TypeError('Failed to parse URL from ' + url), {\n        cause: err\n      })\n    }\n\n    // 3. If status is not a redirect status, then throw a RangeError.\n    if (!redirectStatusSet.has(status)) {\n      throw new RangeError('Invalid status code ' + status)\n    }\n\n    // 4. Let responseObject be the result of creating a Response object,\n    // given a new response, \"immutable\", and this’s relevant Realm.\n    const responseObject = new Response()\n    responseObject[kRealm] = relevantRealm\n    responseObject[kHeaders][kGuard] = 'immutable'\n    responseObject[kHeaders][kRealm] = relevantRealm\n\n    // 5. Set responseObject’s response’s status to status.\n    responseObject[kState].status = status\n\n    // 6. Let value be parsedURL, serialized and isomorphic encoded.\n    const value = isomorphicEncode(URLSerializer(parsedURL))\n\n    // 7. Append `Location`/value to responseObject’s response’s header list.\n    responseObject[kState].headersList.append('location', value)\n\n    // 8. Return responseObject.\n    return responseObject\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-response\n  constructor (body = null, init = {}) {\n    if (body !== null) {\n      body = webidl.converters.BodyInit(body)\n    }\n\n    init = webidl.converters.ResponseInit(init)\n\n    // TODO\n    this[kRealm] = { settingsObject: {} }\n\n    // 1. Set this’s response to a new response.\n    this[kState] = makeResponse({})\n\n    // 2. Set this’s headers to a new Headers object with this’s relevant\n    // Realm, whose header list is this’s response’s header list and guard\n    // is \"response\".\n    this[kHeaders] = new Headers(kConstruct)\n    this[kHeaders][kGuard] = 'response'\n    this[kHeaders][kHeadersList] = this[kState].headersList\n    this[kHeaders][kRealm] = this[kRealm]\n\n    // 3. Let bodyWithType be null.\n    let bodyWithType = null\n\n    // 4. If body is non-null, then set bodyWithType to the result of extracting body.\n    if (body != null) {\n      const [extractedBody, type] = extractBody(body)\n      bodyWithType = { body: extractedBody, type }\n    }\n\n    // 5. Perform initialize a response given this, init, and bodyWithType.\n    initializeResponse(this, init, bodyWithType)\n  }\n\n  // Returns response’s type, e.g., \"cors\".\n  get type () {\n    webidl.brandCheck(this, Response)\n\n    // The type getter steps are to return this’s response’s type.\n    return this[kState].type\n  }\n\n  // Returns response’s URL, if it has one; otherwise the empty string.\n  get url () {\n    webidl.brandCheck(this, Response)\n\n    const urlList = this[kState].urlList\n\n    // The url getter steps are to return the empty string if this’s\n    // response’s URL is null; otherwise this’s response’s URL,\n    // serialized with exclude fragment set to true.\n    const url = urlList[urlList.length - 1] ?? null\n\n    if (url === null) {\n      return ''\n    }\n\n    return URLSerializer(url, true)\n  }\n\n  // Returns whether response was obtained through a redirect.\n  get redirected () {\n    webidl.brandCheck(this, Response)\n\n    // The redirected getter steps are to return true if this’s response’s URL\n    // list has more than one item; otherwise false.\n    return this[kState].urlList.length > 1\n  }\n\n  // Returns response’s status.\n  get status () {\n    webidl.brandCheck(this, Response)\n\n    // The status getter steps are to return this’s response’s status.\n    return this[kState].status\n  }\n\n  // Returns whether response’s status is an ok status.\n  get ok () {\n    webidl.brandCheck(this, Response)\n\n    // The ok getter steps are to return true if this’s response’s status is an\n    // ok status; otherwise false.\n    return this[kState].status >= 200 && this[kState].status <= 299\n  }\n\n  // Returns response’s status message.\n  get statusText () {\n    webidl.brandCheck(this, Response)\n\n    // The statusText getter steps are to return this’s response’s status\n    // message.\n    return this[kState].statusText\n  }\n\n  // Returns response’s headers as Headers.\n  get headers () {\n    webidl.brandCheck(this, Response)\n\n    // The headers getter steps are to return this’s headers.\n    return this[kHeaders]\n  }\n\n  get body () {\n    webidl.brandCheck(this, Response)\n\n    return this[kState].body ? this[kState].body.stream : null\n  }\n\n  get bodyUsed () {\n    webidl.brandCheck(this, Response)\n\n    return !!this[kState].body && util.isDisturbed(this[kState].body.stream)\n  }\n\n  // Returns a clone of response.\n  clone () {\n    webidl.brandCheck(this, Response)\n\n    // 1. If this is unusable, then throw a TypeError.\n    if (this.bodyUsed || (this.body && this.body.locked)) {\n      throw webidl.errors.exception({\n        header: 'Response.clone',\n        message: 'Body has already been consumed.'\n      })\n    }\n\n    // 2. Let clonedResponse be the result of cloning this’s response.\n    const clonedResponse = cloneResponse(this[kState])\n\n    // 3. Return the result of creating a Response object, given\n    // clonedResponse, this’s headers’s guard, and this’s relevant Realm.\n    const clonedResponseObject = new Response()\n    clonedResponseObject[kState] = clonedResponse\n    clonedResponseObject[kRealm] = this[kRealm]\n    clonedResponseObject[kHeaders][kHeadersList] = clonedResponse.headersList\n    clonedResponseObject[kHeaders][kGuard] = this[kHeaders][kGuard]\n    clonedResponseObject[kHeaders][kRealm] = this[kHeaders][kRealm]\n\n    return clonedResponseObject\n  }\n}\n\nmixinBody(Response)\n\nObject.defineProperties(Response.prototype, {\n  type: kEnumerableProperty,\n  url: kEnumerableProperty,\n  status: kEnumerableProperty,\n  ok: kEnumerableProperty,\n  redirected: kEnumerableProperty,\n  statusText: kEnumerableProperty,\n  headers: kEnumerableProperty,\n  clone: kEnumerableProperty,\n  body: kEnumerableProperty,\n  bodyUsed: kEnumerableProperty,\n  [Symbol.toStringTag]: {\n    value: 'Response',\n    configurable: true\n  }\n})\n\nObject.defineProperties(Response, {\n  json: kEnumerableProperty,\n  redirect: kEnumerableProperty,\n  error: kEnumerableProperty\n})\n\n// https://fetch.spec.whatwg.org/#concept-response-clone\nfunction cloneResponse (response) {\n  // To clone a response response, run these steps:\n\n  // 1. If response is a filtered response, then return a new identical\n  // filtered response whose internal response is a clone of response’s\n  // internal response.\n  if (response.internalResponse) {\n    return filterResponse(\n      cloneResponse(response.internalResponse),\n      response.type\n    )\n  }\n\n  // 2. Let newResponse be a copy of response, except for its body.\n  const newResponse = makeResponse({ ...response, body: null })\n\n  // 3. If response’s body is non-null, then set newResponse’s body to the\n  // result of cloning response’s body.\n  if (response.body != null) {\n    newResponse.body = cloneBody(response.body)\n  }\n\n  // 4. Return newResponse.\n  return newResponse\n}\n\nfunction makeResponse (init) {\n  return {\n    aborted: false,\n    rangeRequested: false,\n    timingAllowPassed: false,\n    requestIncludesCredentials: false,\n    type: 'default',\n    status: 200,\n    timingInfo: null,\n    cacheState: '',\n    statusText: '',\n    ...init,\n    headersList: init.headersList\n      ? new HeadersList(init.headersList)\n      : new HeadersList(),\n    urlList: init.urlList ? [...init.urlList] : []\n  }\n}\n\nfunction makeNetworkError (reason) {\n  const isError = isErrorLike(reason)\n  return makeResponse({\n    type: 'error',\n    status: 0,\n    error: isError\n      ? reason\n      : new Error(reason ? String(reason) : reason),\n    aborted: reason && reason.name === 'AbortError'\n  })\n}\n\nfunction makeFilteredResponse (response, state) {\n  state = {\n    internalResponse: response,\n    ...state\n  }\n\n  return new Proxy(response, {\n    get (target, p) {\n      return p in state ? state[p] : target[p]\n    },\n    set (target, p, value) {\n      assert(!(p in state))\n      target[p] = value\n      return true\n    }\n  })\n}\n\n// https://fetch.spec.whatwg.org/#concept-filtered-response\nfunction filterResponse (response, type) {\n  // Set response to the following filtered response with response as its\n  // internal response, depending on request’s response tainting:\n  if (type === 'basic') {\n    // A basic filtered response is a filtered response whose type is \"basic\"\n    // and header list excludes any headers in internal response’s header list\n    // whose name is a forbidden response-header name.\n\n    // Note: undici does not implement forbidden response-header names\n    return makeFilteredResponse(response, {\n      type: 'basic',\n      headersList: response.headersList\n    })\n  } else if (type === 'cors') {\n    // A CORS filtered response is a filtered response whose type is \"cors\"\n    // and header list excludes any headers in internal response’s header\n    // list whose name is not a CORS-safelisted response-header name, given\n    // internal response’s CORS-exposed header-name list.\n\n    // Note: undici does not implement CORS-safelisted response-header names\n    return makeFilteredResponse(response, {\n      type: 'cors',\n      headersList: response.headersList\n    })\n  } else if (type === 'opaque') {\n    // An opaque filtered response is a filtered response whose type is\n    // \"opaque\", URL list is the empty list, status is 0, status message\n    // is the empty byte sequence, header list is empty, and body is null.\n\n    return makeFilteredResponse(response, {\n      type: 'opaque',\n      urlList: Object.freeze([]),\n      status: 0,\n      statusText: '',\n      body: null\n    })\n  } else if (type === 'opaqueredirect') {\n    // An opaque-redirect filtered response is a filtered response whose type\n    // is \"opaqueredirect\", status is 0, status message is the empty byte\n    // sequence, header list is empty, and body is null.\n\n    return makeFilteredResponse(response, {\n      type: 'opaqueredirect',\n      status: 0,\n      statusText: '',\n      headersList: [],\n      body: null\n    })\n  } else {\n    assert(false)\n  }\n}\n\n// https://fetch.spec.whatwg.org/#appropriate-network-error\nfunction makeAppropriateNetworkError (fetchParams, err = null) {\n  // 1. Assert: fetchParams is canceled.\n  assert(isCancelled(fetchParams))\n\n  // 2. Return an aborted network error if fetchParams is aborted;\n  // otherwise return a network error.\n  return isAborted(fetchParams)\n    ? makeNetworkError(Object.assign(new DOMException('The operation was aborted.', 'AbortError'), { cause: err }))\n    : makeNetworkError(Object.assign(new DOMException('Request was cancelled.'), { cause: err }))\n}\n\n// https://whatpr.org/fetch/1392.html#initialize-a-response\nfunction initializeResponse (response, init, body) {\n  // 1. If init[\"status\"] is not in the range 200 to 599, inclusive, then\n  //    throw a RangeError.\n  if (init.status !== null && (init.status < 200 || init.status > 599)) {\n    throw new RangeError('init[\"status\"] must be in the range of 200 to 599, inclusive.')\n  }\n\n  // 2. If init[\"statusText\"] does not match the reason-phrase token production,\n  //    then throw a TypeError.\n  if ('statusText' in init && init.statusText != null) {\n    // See, https://datatracker.ietf.org/doc/html/rfc7230#section-3.1.2:\n    //   reason-phrase  = *( HTAB / SP / VCHAR / obs-text )\n    if (!isValidReasonPhrase(String(init.statusText))) {\n      throw new TypeError('Invalid statusText')\n    }\n  }\n\n  // 3. Set response’s response’s status to init[\"status\"].\n  if ('status' in init && init.status != null) {\n    response[kState].status = init.status\n  }\n\n  // 4. Set response’s response’s status message to init[\"statusText\"].\n  if ('statusText' in init && init.statusText != null) {\n    response[kState].statusText = init.statusText\n  }\n\n  // 5. If init[\"headers\"] exists, then fill response’s headers with init[\"headers\"].\n  if ('headers' in init && init.headers != null) {\n    fill(response[kHeaders], init.headers)\n  }\n\n  // 6. If body was given, then:\n  if (body) {\n    // 1. If response's status is a null body status, then throw a TypeError.\n    if (nullBodyStatus.includes(response.status)) {\n      throw webidl.errors.exception({\n        header: 'Response constructor',\n        message: 'Invalid response status code ' + response.status\n      })\n    }\n\n    // 2. Set response's body to body's body.\n    response[kState].body = body.body\n\n    // 3. If body's type is non-null and response's header list does not contain\n    //    `Content-Type`, then append (`Content-Type`, body's type) to response's header list.\n    if (body.type != null && !response[kState].headersList.contains('Content-Type')) {\n      response[kState].headersList.append('content-type', body.type)\n    }\n  }\n}\n\nwebidl.converters.ReadableStream = webidl.interfaceConverter(\n  ReadableStream\n)\n\nwebidl.converters.FormData = webidl.interfaceConverter(\n  FormData\n)\n\nwebidl.converters.URLSearchParams = webidl.interfaceConverter(\n  URLSearchParams\n)\n\n// https://fetch.spec.whatwg.org/#typedefdef-xmlhttprequestbodyinit\nwebidl.converters.XMLHttpRequestBodyInit = function (V) {\n  if (typeof V === 'string') {\n    return webidl.converters.USVString(V)\n  }\n\n  if (isBlobLike(V)) {\n    return webidl.converters.Blob(V, { strict: false })\n  }\n\n  if (types.isArrayBuffer(V) || types.isTypedArray(V) || types.isDataView(V)) {\n    return webidl.converters.BufferSource(V)\n  }\n\n  if (util.isFormDataLike(V)) {\n    return webidl.converters.FormData(V, { strict: false })\n  }\n\n  if (V instanceof URLSearchParams) {\n    return webidl.converters.URLSearchParams(V)\n  }\n\n  return webidl.converters.DOMString(V)\n}\n\n// https://fetch.spec.whatwg.org/#bodyinit\nwebidl.converters.BodyInit = function (V) {\n  if (V instanceof ReadableStream) {\n    return webidl.converters.ReadableStream(V)\n  }\n\n  // Note: the spec doesn't include async iterables,\n  // this is an undici extension.\n  if (V?.[Symbol.asyncIterator]) {\n    return V\n  }\n\n  return webidl.converters.XMLHttpRequestBodyInit(V)\n}\n\nwebidl.converters.ResponseInit = webidl.dictionaryConverter([\n  {\n    key: 'status',\n    converter: webidl.converters['unsigned short'],\n    defaultValue: 200\n  },\n  {\n    key: 'statusText',\n    converter: webidl.converters.ByteString,\n    defaultValue: ''\n  },\n  {\n    key: 'headers',\n    converter: webidl.converters.HeadersInit\n  }\n])\n\nmodule.exports = {\n  makeNetworkError,\n  makeResponse,\n  makeAppropriateNetworkError,\n  filterResponse,\n  Response,\n  cloneResponse\n}\n"],"names":["$5nCFS$pythonversioncheck5597d583js2","$5nCFS$pythonversioncheck152f8bbajs2","$5nCFS$pythonversioncheck7ed1514ejs","$5nCFS$pythonversioncheck3f48d3eejs6","$5nCFS$pythonversioncheck863e006ejs2","$5nCFS$pythonversioncheck92c00e26js3","$5nCFS$pythonversioncheck801bb0f1js","$5nCFS$pythonversioncheck34871282js","$5nCFS$pythonversioncheckb40ebe18js","$5nCFS$pythonversioncheck685b5bb2js","$5nCFS$pythonversioncheckebf2a848js1","$5nCFS$assert","types","$5nCFS$types","ReadableStream","$5nCFS$ReadableStream","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","$6f7fa96c40be915e$require$Headers","$5nCFS$pythonversioncheck5597d583js1","Headers","$6f7fa96c40be915e$require$HeadersList","HeadersList","$6f7fa96c40be915e$require$fill","$5nCFS$pythonversioncheck5597d583js","fill","$6f7fa96c40be915e$require$extractBody","$5nCFS$pythonversioncheck152f8bbajs1","extractBody","$6f7fa96c40be915e$require$cloneBody","$5nCFS$pythonversioncheck152f8bbajs","cloneBody","$6f7fa96c40be915e$require$mixinBody","mixinBody","kEnumerableProperty","$6f7fa96c40be915e$var$kEnumerableProperty","$6f7fa96c40be915e$require$isValidReasonPhrase","$5nCFS$pythonversioncheck3f48d3eejs5","isValidReasonPhrase","$6f7fa96c40be915e$require$isCancelled","$5nCFS$pythonversioncheck3f48d3eejs2","isCancelled","$6f7fa96c40be915e$require$isAborted","$5nCFS$pythonversioncheck3f48d3eejs","isAborted","$6f7fa96c40be915e$require$isBlobLike","$5nCFS$pythonversioncheck3f48d3eejs1","isBlobLike","$6f7fa96c40be915e$require$serializeJavascriptValueToJSONString","serializeJavascriptValueToJSONString","$6f7fa96c40be915e$require$isErrorLike","$5nCFS$pythonversioncheck3f48d3eejs3","isErrorLike","$6f7fa96c40be915e$require$isomorphicEncode","$5nCFS$pythonversioncheck3f48d3eejs4","isomorphicEncode","$6f7fa96c40be915e$require$redirectStatusSet","redirectStatusSet","$6f7fa96c40be915e$require$nullBodyStatus","$5nCFS$pythonversioncheck863e006ejs1","nullBodyStatus","$6f7fa96c40be915e$require$DOMException","$5nCFS$pythonversioncheck863e006ejs","DOMException","$6f7fa96c40be915e$require$kState","kState","$6f7fa96c40be915e$require$kHeaders","$5nCFS$pythonversioncheck92c00e26js1","kHeaders","$6f7fa96c40be915e$require$kGuard","$5nCFS$pythonversioncheck92c00e26js","kGuard","$6f7fa96c40be915e$require$kRealm","$5nCFS$pythonversioncheck92c00e26js2","kRealm","$6f7fa96c40be915e$require$webidl","webidl","$6f7fa96c40be915e$require$FormData","FormData","$6f7fa96c40be915e$require$getGlobalOrigin","getGlobalOrigin","$6f7fa96c40be915e$require$URLSerializer","URLSerializer","$6f7fa96c40be915e$require$kHeadersList","kHeadersList","$6f7fa96c40be915e$require$kConstruct","$5nCFS$pythonversioncheckebf2a848js","kConstruct","$6f7fa96c40be915e$var$ReadableStream","$6f7fa96c40be915e$var$textEncoder","TextEncoder","$6f7fa96c40be915e$var$Response","error","relevantRealm","settingsObject","responseObject","$6f7fa96c40be915e$var$makeNetworkError","headersList","json","data","argumentLengthCheck","arguments","header","converters","ResponseInit","body","encode","$6f7fa96c40be915e$var$initializeResponse","type","redirect","url","status","parsedURL","USVString","URL","Object","assign","TypeError","cause","has","RangeError","value","append","BodyInit","$6f7fa96c40be915e$var$makeResponse","bodyWithType","extractedBody","brandCheck","urlList","length","redirected","ok","statusText","headers","stream","bodyUsed","isDisturbed","clone","locked","errors","exception","message","clonedResponse","$6f7fa96c40be915e$var$cloneResponse","clonedResponseObject","response","internalResponse","$6f7fa96c40be915e$var$filterResponse","newResponse","aborted","rangeRequested","timingAllowPassed","requestIncludesCredentials","timingInfo","cacheState","reason","isError","String","name","$6f7fa96c40be915e$var$makeFilteredResponse","state","Proxy","get","target","p","set","freeze","includes","contains","defineProperties","prototype","Symbol","toStringTag","configurable","interfaceConverter","URLSearchParams","XMLHttpRequestBodyInit","V","Blob","strict","$6f7fa96c40be915e$require$types","isArrayBuffer","isTypedArray","isDataView","BufferSource","isFormDataLike","DOMString","asyncIterator","dictionaryConverter","key","converter","defaultValue","ByteString","HeadersInit","makeNetworkError","makeResponse","makeAppropriateNetworkError","fetchParams","filterResponse","Response","cloneResponse"],"version":3,"file":"python-version-check.c211052e.js.map","sourceRoot":"../"}