{"mappings":"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","sources":["<anon>","node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/cookies/util.js"],"sourcesContent":["var $daaf69809598c0a0$exports = {};\n'use strict';\n/**\n * @param {string} value\n * @returns {boolean}\n */ function $daaf69809598c0a0$var$isCTLExcludingHtab(value) {\n    if (value.length === 0) return false;\n    for (const char of value){\n        const code = char.charCodeAt(0);\n        if (code >= 0x00 || code <= 0x08 || code >= 0x0A || code <= 0x1F || code === 0x7F) return false;\n    }\n}\n/**\n CHAR           = <any US-ASCII character (octets 0 - 127)>\n token          = 1*<any CHAR except CTLs or separators>\n separators     = \"(\" | \")\" | \"<\" | \">\" | \"@\"\n                | \",\" | \";\" | \":\" | \"\\\" | <\">\n                | \"/\" | \"[\" | \"]\" | \"?\" | \"=\"\n                | \"{\" | \"}\" | SP | HT\n * @param {string} name\n */ function $daaf69809598c0a0$var$validateCookieName(name) {\n    for (const char of name){\n        const code = char.charCodeAt(0);\n        if (code <= 0x20 || code > 0x7F || char === '(' || char === ')' || char === '>' || char === '<' || char === '@' || char === ',' || char === ';' || char === ':' || char === '\\\\' || char === '\"' || char === '/' || char === '[' || char === ']' || char === '?' || char === '=' || char === '{' || char === '}') throw new Error('Invalid cookie name');\n    }\n}\n/**\n cookie-value      = *cookie-octet / ( DQUOTE *cookie-octet DQUOTE )\n cookie-octet      = %x21 / %x23-2B / %x2D-3A / %x3C-5B / %x5D-7E\n                       ; US-ASCII characters excluding CTLs,\n                       ; whitespace DQUOTE, comma, semicolon,\n                       ; and backslash\n * @param {string} value\n */ function $daaf69809598c0a0$var$validateCookieValue(value) {\n    for (const char of value){\n        const code = char.charCodeAt(0);\n        if (code < 0x21 || // exclude CTLs (0-31)\n        code === 0x22 || code === 0x2C || code === 0x3B || code === 0x5C || code > 0x7E // non-ascii\n        ) throw new Error('Invalid header value');\n    }\n}\n/**\n * path-value        = <any CHAR except CTLs or \";\">\n * @param {string} path\n */ function $daaf69809598c0a0$var$validateCookiePath(path) {\n    for (const char of path){\n        const code = char.charCodeAt(0);\n        if (code < 0x21 || char === ';') throw new Error('Invalid cookie path');\n    }\n}\n/**\n * I have no idea why these values aren't allowed to be honest,\n * but Deno tests these. - Khafra\n * @param {string} domain\n */ function $daaf69809598c0a0$var$validateCookieDomain(domain) {\n    if (domain.startsWith('-') || domain.endsWith('.') || domain.endsWith('-')) throw new Error('Invalid cookie domain');\n}\n/**\n * @see https://www.rfc-editor.org/rfc/rfc7231#section-7.1.1.1\n * @param {number|Date} date\n  IMF-fixdate  = day-name \",\" SP date1 SP time-of-day SP GMT\n  ; fixed length/zone/capitalization subset of the format\n  ; see Section 3.3 of [RFC5322]\n\n  day-name     = %x4D.6F.6E ; \"Mon\", case-sensitive\n              / %x54.75.65 ; \"Tue\", case-sensitive\n              / %x57.65.64 ; \"Wed\", case-sensitive\n              / %x54.68.75 ; \"Thu\", case-sensitive\n              / %x46.72.69 ; \"Fri\", case-sensitive\n              / %x53.61.74 ; \"Sat\", case-sensitive\n              / %x53.75.6E ; \"Sun\", case-sensitive\n  date1        = day SP month SP year\n                  ; e.g., 02 Jun 1982\n\n  day          = 2DIGIT\n  month        = %x4A.61.6E ; \"Jan\", case-sensitive\n              / %x46.65.62 ; \"Feb\", case-sensitive\n              / %x4D.61.72 ; \"Mar\", case-sensitive\n              / %x41.70.72 ; \"Apr\", case-sensitive\n              / %x4D.61.79 ; \"May\", case-sensitive\n              / %x4A.75.6E ; \"Jun\", case-sensitive\n              / %x4A.75.6C ; \"Jul\", case-sensitive\n              / %x41.75.67 ; \"Aug\", case-sensitive\n              / %x53.65.70 ; \"Sep\", case-sensitive\n              / %x4F.63.74 ; \"Oct\", case-sensitive\n              / %x4E.6F.76 ; \"Nov\", case-sensitive\n              / %x44.65.63 ; \"Dec\", case-sensitive\n  year         = 4DIGIT\n\n  GMT          = %x47.4D.54 ; \"GMT\", case-sensitive\n\n  time-of-day  = hour \":\" minute \":\" second\n              ; 00:00:00 - 23:59:60 (leap second)\n\n  hour         = 2DIGIT\n  minute       = 2DIGIT\n  second       = 2DIGIT\n */ function $daaf69809598c0a0$var$toIMFDate(date) {\n    if (typeof date === 'number') date = new Date(date);\n    const days = [\n        'Sun',\n        'Mon',\n        'Tue',\n        'Wed',\n        'Thu',\n        'Fri',\n        'Sat'\n    ];\n    const months = [\n        'Jan',\n        'Feb',\n        'Mar',\n        'Apr',\n        'May',\n        'Jun',\n        'Jul',\n        'Aug',\n        'Sep',\n        'Oct',\n        'Nov',\n        'Dec'\n    ];\n    const dayName = days[date.getUTCDay()];\n    const day = date.getUTCDate().toString().padStart(2, '0');\n    const month = months[date.getUTCMonth()];\n    const year = date.getUTCFullYear();\n    const hour = date.getUTCHours().toString().padStart(2, '0');\n    const minute = date.getUTCMinutes().toString().padStart(2, '0');\n    const second = date.getUTCSeconds().toString().padStart(2, '0');\n    return `${dayName}, ${day} ${month} ${year} ${hour}:${minute}:${second} GMT`;\n}\n/**\n max-age-av        = \"Max-Age=\" non-zero-digit *DIGIT\n                       ; In practice, both expires-av and max-age-av\n                       ; are limited to dates representable by the\n                       ; user agent.\n * @param {number} maxAge\n */ function $daaf69809598c0a0$var$validateCookieMaxAge(maxAge) {\n    if (maxAge < 0) throw new Error('Invalid cookie max-age');\n}\n/**\n * @see https://www.rfc-editor.org/rfc/rfc6265#section-4.1.1\n * @param {import('./index').Cookie} cookie\n */ function $daaf69809598c0a0$var$stringify(cookie) {\n    if (cookie.name.length === 0) return null;\n    $daaf69809598c0a0$var$validateCookieName(cookie.name);\n    $daaf69809598c0a0$var$validateCookieValue(cookie.value);\n    const out = [\n        `${cookie.name}=${cookie.value}`\n    ];\n    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-cookie-prefixes-00#section-3.1\n    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-cookie-prefixes-00#section-3.2\n    if (cookie.name.startsWith('__Secure-')) cookie.secure = true;\n    if (cookie.name.startsWith('__Host-')) {\n        cookie.secure = true;\n        cookie.domain = null;\n        cookie.path = '/';\n    }\n    if (cookie.secure) out.push('Secure');\n    if (cookie.httpOnly) out.push('HttpOnly');\n    if (typeof cookie.maxAge === 'number') {\n        $daaf69809598c0a0$var$validateCookieMaxAge(cookie.maxAge);\n        out.push(`Max-Age=${cookie.maxAge}`);\n    }\n    if (cookie.domain) {\n        $daaf69809598c0a0$var$validateCookieDomain(cookie.domain);\n        out.push(`Domain=${cookie.domain}`);\n    }\n    if (cookie.path) {\n        $daaf69809598c0a0$var$validateCookiePath(cookie.path);\n        out.push(`Path=${cookie.path}`);\n    }\n    if (cookie.expires && cookie.expires.toString() !== 'Invalid Date') out.push(`Expires=${$daaf69809598c0a0$var$toIMFDate(cookie.expires)}`);\n    if (cookie.sameSite) out.push(`SameSite=${cookie.sameSite}`);\n    for (const part of cookie.unparsed){\n        if (!part.includes('=')) throw new Error('Invalid unparsed');\n        const [key, ...value] = part.split('=');\n        out.push(`${key.trim()}=${value.join('=')}`);\n    }\n    return out.join('; ');\n}\n$daaf69809598c0a0$exports = {\n    isCTLExcludingHtab: $daaf69809598c0a0$var$isCTLExcludingHtab,\n    validateCookieName: $daaf69809598c0a0$var$validateCookieName,\n    validateCookiePath: $daaf69809598c0a0$var$validateCookiePath,\n    validateCookieValue: $daaf69809598c0a0$var$validateCookieValue,\n    toIMFDate: $daaf69809598c0a0$var$toIMFDate,\n    stringify: $daaf69809598c0a0$var$stringify\n};\n\n\nexport {$daaf69809598c0a0$exports as default};\n//# sourceMappingURL=python-version-check.ec4d8064.js.map\n","'use strict'\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction isCTLExcludingHtab (value) {\n  if (value.length === 0) {\n    return false\n  }\n\n  for (const char of value) {\n    const code = char.charCodeAt(0)\n\n    if (\n      (code >= 0x00 || code <= 0x08) ||\n      (code >= 0x0A || code <= 0x1F) ||\n      code === 0x7F\n    ) {\n      return false\n    }\n  }\n}\n\n/**\n CHAR           = <any US-ASCII character (octets 0 - 127)>\n token          = 1*<any CHAR except CTLs or separators>\n separators     = \"(\" | \")\" | \"<\" | \">\" | \"@\"\n                | \",\" | \";\" | \":\" | \"\\\" | <\">\n                | \"/\" | \"[\" | \"]\" | \"?\" | \"=\"\n                | \"{\" | \"}\" | SP | HT\n * @param {string} name\n */\nfunction validateCookieName (name) {\n  for (const char of name) {\n    const code = char.charCodeAt(0)\n\n    if (\n      (code <= 0x20 || code > 0x7F) ||\n      char === '(' ||\n      char === ')' ||\n      char === '>' ||\n      char === '<' ||\n      char === '@' ||\n      char === ',' ||\n      char === ';' ||\n      char === ':' ||\n      char === '\\\\' ||\n      char === '\"' ||\n      char === '/' ||\n      char === '[' ||\n      char === ']' ||\n      char === '?' ||\n      char === '=' ||\n      char === '{' ||\n      char === '}'\n    ) {\n      throw new Error('Invalid cookie name')\n    }\n  }\n}\n\n/**\n cookie-value      = *cookie-octet / ( DQUOTE *cookie-octet DQUOTE )\n cookie-octet      = %x21 / %x23-2B / %x2D-3A / %x3C-5B / %x5D-7E\n                       ; US-ASCII characters excluding CTLs,\n                       ; whitespace DQUOTE, comma, semicolon,\n                       ; and backslash\n * @param {string} value\n */\nfunction validateCookieValue (value) {\n  for (const char of value) {\n    const code = char.charCodeAt(0)\n\n    if (\n      code < 0x21 || // exclude CTLs (0-31)\n      code === 0x22 ||\n      code === 0x2C ||\n      code === 0x3B ||\n      code === 0x5C ||\n      code > 0x7E // non-ascii\n    ) {\n      throw new Error('Invalid header value')\n    }\n  }\n}\n\n/**\n * path-value        = <any CHAR except CTLs or \";\">\n * @param {string} path\n */\nfunction validateCookiePath (path) {\n  for (const char of path) {\n    const code = char.charCodeAt(0)\n\n    if (code < 0x21 || char === ';') {\n      throw new Error('Invalid cookie path')\n    }\n  }\n}\n\n/**\n * I have no idea why these values aren't allowed to be honest,\n * but Deno tests these. - Khafra\n * @param {string} domain\n */\nfunction validateCookieDomain (domain) {\n  if (\n    domain.startsWith('-') ||\n    domain.endsWith('.') ||\n    domain.endsWith('-')\n  ) {\n    throw new Error('Invalid cookie domain')\n  }\n}\n\n/**\n * @see https://www.rfc-editor.org/rfc/rfc7231#section-7.1.1.1\n * @param {number|Date} date\n  IMF-fixdate  = day-name \",\" SP date1 SP time-of-day SP GMT\n  ; fixed length/zone/capitalization subset of the format\n  ; see Section 3.3 of [RFC5322]\n\n  day-name     = %x4D.6F.6E ; \"Mon\", case-sensitive\n              / %x54.75.65 ; \"Tue\", case-sensitive\n              / %x57.65.64 ; \"Wed\", case-sensitive\n              / %x54.68.75 ; \"Thu\", case-sensitive\n              / %x46.72.69 ; \"Fri\", case-sensitive\n              / %x53.61.74 ; \"Sat\", case-sensitive\n              / %x53.75.6E ; \"Sun\", case-sensitive\n  date1        = day SP month SP year\n                  ; e.g., 02 Jun 1982\n\n  day          = 2DIGIT\n  month        = %x4A.61.6E ; \"Jan\", case-sensitive\n              / %x46.65.62 ; \"Feb\", case-sensitive\n              / %x4D.61.72 ; \"Mar\", case-sensitive\n              / %x41.70.72 ; \"Apr\", case-sensitive\n              / %x4D.61.79 ; \"May\", case-sensitive\n              / %x4A.75.6E ; \"Jun\", case-sensitive\n              / %x4A.75.6C ; \"Jul\", case-sensitive\n              / %x41.75.67 ; \"Aug\", case-sensitive\n              / %x53.65.70 ; \"Sep\", case-sensitive\n              / %x4F.63.74 ; \"Oct\", case-sensitive\n              / %x4E.6F.76 ; \"Nov\", case-sensitive\n              / %x44.65.63 ; \"Dec\", case-sensitive\n  year         = 4DIGIT\n\n  GMT          = %x47.4D.54 ; \"GMT\", case-sensitive\n\n  time-of-day  = hour \":\" minute \":\" second\n              ; 00:00:00 - 23:59:60 (leap second)\n\n  hour         = 2DIGIT\n  minute       = 2DIGIT\n  second       = 2DIGIT\n */\nfunction toIMFDate (date) {\n  if (typeof date === 'number') {\n    date = new Date(date)\n  }\n\n  const days = [\n    'Sun', 'Mon', 'Tue', 'Wed',\n    'Thu', 'Fri', 'Sat'\n  ]\n\n  const months = [\n    'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',\n    'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'\n  ]\n\n  const dayName = days[date.getUTCDay()]\n  const day = date.getUTCDate().toString().padStart(2, '0')\n  const month = months[date.getUTCMonth()]\n  const year = date.getUTCFullYear()\n  const hour = date.getUTCHours().toString().padStart(2, '0')\n  const minute = date.getUTCMinutes().toString().padStart(2, '0')\n  const second = date.getUTCSeconds().toString().padStart(2, '0')\n\n  return `${dayName}, ${day} ${month} ${year} ${hour}:${minute}:${second} GMT`\n}\n\n/**\n max-age-av        = \"Max-Age=\" non-zero-digit *DIGIT\n                       ; In practice, both expires-av and max-age-av\n                       ; are limited to dates representable by the\n                       ; user agent.\n * @param {number} maxAge\n */\nfunction validateCookieMaxAge (maxAge) {\n  if (maxAge < 0) {\n    throw new Error('Invalid cookie max-age')\n  }\n}\n\n/**\n * @see https://www.rfc-editor.org/rfc/rfc6265#section-4.1.1\n * @param {import('./index').Cookie} cookie\n */\nfunction stringify (cookie) {\n  if (cookie.name.length === 0) {\n    return null\n  }\n\n  validateCookieName(cookie.name)\n  validateCookieValue(cookie.value)\n\n  const out = [`${cookie.name}=${cookie.value}`]\n\n  // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-cookie-prefixes-00#section-3.1\n  // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-cookie-prefixes-00#section-3.2\n  if (cookie.name.startsWith('__Secure-')) {\n    cookie.secure = true\n  }\n\n  if (cookie.name.startsWith('__Host-')) {\n    cookie.secure = true\n    cookie.domain = null\n    cookie.path = '/'\n  }\n\n  if (cookie.secure) {\n    out.push('Secure')\n  }\n\n  if (cookie.httpOnly) {\n    out.push('HttpOnly')\n  }\n\n  if (typeof cookie.maxAge === 'number') {\n    validateCookieMaxAge(cookie.maxAge)\n    out.push(`Max-Age=${cookie.maxAge}`)\n  }\n\n  if (cookie.domain) {\n    validateCookieDomain(cookie.domain)\n    out.push(`Domain=${cookie.domain}`)\n  }\n\n  if (cookie.path) {\n    validateCookiePath(cookie.path)\n    out.push(`Path=${cookie.path}`)\n  }\n\n  if (cookie.expires && cookie.expires.toString() !== 'Invalid Date') {\n    out.push(`Expires=${toIMFDate(cookie.expires)}`)\n  }\n\n  if (cookie.sameSite) {\n    out.push(`SameSite=${cookie.sameSite}`)\n  }\n\n  for (const part of cookie.unparsed) {\n    if (!part.includes('=')) {\n      throw new Error('Invalid unparsed')\n    }\n\n    const [key, ...value] = part.split('=')\n\n    out.push(`${key.trim()}=${value.join('=')}`)\n  }\n\n  return out.join('; ')\n}\n\nmodule.exports = {\n  isCTLExcludingHtab,\n  validateCookieName,\n  validateCookiePath,\n  validateCookieValue,\n  toIMFDate,\n  stringify\n}\n"],"names":["$daaf69809598c0a0$exports","$daaf69809598c0a0$var$validateCookieName","name","char","code","charCodeAt","Error","$daaf69809598c0a0$var$validateCookieValue","value","$daaf69809598c0a0$var$validateCookiePath","path","$daaf69809598c0a0$var$toIMFDate","date","Date","dayName","days","getUTCDay","day","getUTCDate","toString","padStart","month","months","getUTCMonth","year","getUTCFullYear","hour","getUTCHours","minute","getUTCMinutes","second","getUTCSeconds","isCTLExcludingHtab","length","validateCookieName","validateCookiePath","validateCookieValue","toIMFDate","stringify","cookie","out","startsWith","secure","domain","push","httpOnly","maxAge","endsWith","part","expires","sameSite","unparsed","includes","key","split","trim","join","default"],"version":3,"file":"python-version-check.ec4d8064.js.map","sourceRoot":"../"}