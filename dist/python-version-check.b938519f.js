import r from"./python-version-check.d99cbe59.js";import o from"./python-version-check.45fea75e.js";import{promises as t}from"node:fs";import{dirname as e,resolve as i}from"node:path";async function n(r){if(!(await t.stat(r)).isFile())throw Error(`Not a file: ${r}`);let n=await t.readFile(r,"utf8");try{let t=o.parse(n);if(!Object.hasOwn(t,"project"))throw Error("No [project] section found in pyproject.toml");if("object"!=typeof t.project)throw Error("[project] section is not an object");let a=t.project;if(!Object.hasOwn(a,"name"))throw Error("No name field in [project] section of pyproject.toml");if("string"!=typeof a.name)throw Error("name field in [project] section is not a string");let c={name:a.name,path:e(i(r))};try{if(!Object.hasOwn(a,"version"))throw Error("No version field in [project] section of pyproject.toml");if("string"!=typeof a.version)throw Error("version field in [project] section is not a string");c.version=a.version}catch{if(!Object.hasOwn(a,"dynamic"))throw Error("No dynamic field in [project] section of pyproject.toml");if(!Array.isArray(a.dynamic))throw Error("dynamic field in [project] section is not an array");for(let r of a.dynamic)if("string"!=typeof r)throw Error("dynamic field in [project] section is not an array of strings");if(!a.dynamic.includes("version"))throw Error("No version field in [project] section of pyproject.toml");c.dynamic=a.dynamic}return c}catch(o){if(Object.hasOwn(o,"line")&&Object.hasOwn(o,"column"))throw Error(`Failed to parse ${r} as TOML: ${o.message} ad line ${o.line}, column ${o.column}`);throw o}}async function a(o){if(o.version)return o.version;if(o.dynamic&&o.dynamic.includes("version")){let t=await r.getExecOutput("python3",["-m","pip","install",o.path]);if(0!==t.exitCode)throw Error(`Failed to install package at ${o.path}. Stdout: ${t.stdout}. Stderr: ${t.stderr}.`);let e=await r.getExecOutput("python3",["-c",`import ${o.name.replace(/-/g,"_")}; print(${o.name.replace(/-/g,"_")}.__version__)`]);if(0!==e.exitCode)throw Error(`Failed to get version of package ${o.name}. Stdout: ${e.stdout}. Stderr: ${e.stderr}.`);let i=e.stdout.trim();if(""===i)throw Error("Failed to get version from pip");return i}throw Error("No version field in [project] section of pyproject.toml")}export{n as getPackageInfo,a as getPackageVersion};
//# sourceMappingURL=python-version-check.b938519f.js.map
