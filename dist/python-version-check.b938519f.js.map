{"mappings":"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","sources":["<anon>","src/pyproject.ts"],"sourcesContent":["import $kzg47$pythonversioncheckd99cbe59js from \"./python-version-check.d99cbe59.js\";\nimport $kzg47$pythonversioncheck45fea75ejs from \"./python-version-check.45fea75e.js\";\nimport {promises as $kzg47$promises} from \"node:fs\";\nimport {dirname as $kzg47$dirname, resolve as $kzg47$resolve} from \"node:path\";\n\n\n\n\n\n/**\n * Asserts that the given object has a 'project' field which is an object.\n * Throws an error if the assertion fails.\n *\n * @param obj - The object to check.\n * @throws {Error} If the object does not have a 'project' field or if it is not an object.\n * @returns void\n */ function $83279610ce38fb08$var$assertHasProject(obj) {\n    if (!Object.hasOwn(obj, 'project')) throw new Error('No [project] section found in pyproject.toml');\n    if (typeof obj.project !== 'object') throw new Error('[project] section is not an object');\n}\n/**\n * Asserts that the given object has a 'name' field which is a string.\n * Throws an error if the assertion fails.\n *\n * @param obj - The object to check.\n * @throws {Error} If the object does not have a 'name' field or if it is not a string.\n * @returns void\n */ function $83279610ce38fb08$var$assertHasName(obj) {\n    if (!Object.hasOwn(obj, 'name')) throw new Error('No name field in [project] section of pyproject.toml');\n    if (typeof obj.name !== 'string') throw new Error('name field in [project] section is not a string');\n}\n/**\n * Asserts that the given object has a 'version' field which is a string.\n * Throws an error if the assertion fails.\n *\n * @param obj - The object to check.\n * @throws {Error} If the object does not have a 'version' field or if it is not a string.\n * @returns void\n */ function $83279610ce38fb08$var$assertHasVersion(obj) {\n    if (!Object.hasOwn(obj, 'version')) throw new Error('No version field in [project] section of pyproject.toml');\n    if (typeof obj.version !== 'string') throw new Error('version field in [project] section is not a string');\n}\n/**\n * Asserts that the given object has a 'dynamic' field which is an array of strings.\n * Throws an error if the assertion fails.\n *\n * @param obj - The object to check.\n * @throws {Error} If the object does not have a 'dynamic' field or if it is not an array of strings.\n * @returns void\n */ function $83279610ce38fb08$var$assertHasDynamic(obj) {\n    if (!Object.hasOwn(obj, 'dynamic')) throw new Error('No dynamic field in [project] section of pyproject.toml');\n    if (!Array.isArray(obj.dynamic)) throw new Error('dynamic field in [project] section is not an array');\n    for (const item of obj.dynamic){\n        if (typeof item !== 'string') throw new Error('dynamic field in [project] section is not an array of strings');\n    }\n}\nasync function $83279610ce38fb08$export$cd17d76da7967240(pyprojectPath) {\n    const stat = await $kzg47$promises.stat(pyprojectPath);\n    if (!stat.isFile()) throw new Error(`Not a file: ${pyprojectPath}`);\n    const file = await $kzg47$promises.readFile(pyprojectPath, 'utf8');\n    try {\n        const obj = $kzg47$pythonversioncheck45fea75ejs.parse(file);\n        $83279610ce38fb08$var$assertHasProject(obj);\n        const project = obj.project;\n        $83279610ce38fb08$var$assertHasName(project);\n        const packageInfo = {\n            name: project.name,\n            path: $kzg47$dirname($kzg47$resolve(pyprojectPath))\n        };\n        try {\n            $83279610ce38fb08$var$assertHasVersion(project);\n            packageInfo.version = project.version;\n        } catch  {\n            // version field is optional if dynamic includes \"version\"\n            // so we ignore the error here\n            // we will get the version from python instead\n            // if version is not in dynamic, we will error below\n            $83279610ce38fb08$var$assertHasDynamic(project);\n            if (!project.dynamic.includes('version')) throw new Error('No version field in [project] section of pyproject.toml');\n            packageInfo.dynamic = project.dynamic;\n        }\n        return packageInfo;\n    } catch (error) {\n        if (Object.hasOwn(error, 'line') && Object.hasOwn(error, 'column')) throw new Error(`Failed to parse ${pyprojectPath} as TOML: ${error.message} ad line ${error.line}, column ${error.column}`);\n        throw error;\n    }\n}\nasync function $83279610ce38fb08$export$18cd124b5098d330(pkg) {\n    if (pkg.version) return pkg.version;\n    if (pkg.dynamic && pkg.dynamic.includes('version')) {\n        // get version from python\n        const res = await $kzg47$pythonversioncheckd99cbe59js.getExecOutput('python3', [\n            '-m',\n            'pip',\n            'install',\n            pkg.path\n        ]);\n        if (res.exitCode !== 0) throw new Error(`Failed to install package at ${pkg.path}. Stdout: ${res.stdout}. Stderr: ${res.stderr}.`);\n        const res2 = await $kzg47$pythonversioncheckd99cbe59js.getExecOutput('python3', [\n            '-c',\n            `import ${pkg.name.replace(/-/g, '_')}; print(${pkg.name.replace(/-/g, '_')}.__version__)`\n        ]);\n        if (res2.exitCode !== 0) throw new Error(`Failed to get version of package ${pkg.name}. Stdout: ${res2.stdout}. Stderr: ${res2.stderr}.`);\n        const version = res2.stdout.trim();\n        if (version === '') throw new Error('Failed to get version from pip');\n        return version;\n    }\n    throw new Error('No version field in [project] section of pyproject.toml');\n}\n\n\nexport {$83279610ce38fb08$export$cd17d76da7967240 as getPackageInfo, $83279610ce38fb08$export$18cd124b5098d330 as getPackageVersion};\n//# sourceMappingURL=python-version-check.b938519f.js.map\n","import * as exec from '@actions/exec'\nimport * as fs from 'node:fs'\nimport * as path from 'node:path'\nimport * as toml from 'toml'\n\n/**\n * Asserts that the given object has a 'project' field which is an object.\n * Throws an error if the assertion fails.\n *\n * @param obj - The object to check.\n * @throws {Error} If the object does not have a 'project' field or if it is not an object.\n * @returns void\n */\nfunction assertHasProject(\n  obj: unknown\n): asserts obj is { project: Record<string, unknown> } {\n  if (!Object.hasOwn(obj as object, 'project')) {\n    throw new Error('No [project] section found in pyproject.toml')\n  }\n  if (typeof (obj as { project?: unknown }).project !== 'object') {\n    throw new Error('[project] section is not an object')\n  }\n}\n\n/**\n * Asserts that the given object has a 'name' field which is a string.\n * Throws an error if the assertion fails.\n *\n * @param obj - The object to check.\n * @throws {Error} If the object does not have a 'name' field or if it is not a string.\n * @returns void\n */\nfunction assertHasName(obj: unknown): asserts obj is { name: string } {\n  if (!Object.hasOwn(obj as object, 'name')) {\n    throw new Error('No name field in [project] section of pyproject.toml')\n  }\n  if (typeof (obj as { name?: unknown }).name !== 'string') {\n    throw new Error('name field in [project] section is not a string')\n  }\n}\n\n/**\n * Asserts that the given object has a 'version' field which is a string.\n * Throws an error if the assertion fails.\n *\n * @param obj - The object to check.\n * @throws {Error} If the object does not have a 'version' field or if it is not a string.\n * @returns void\n */\nfunction assertHasVersion(obj: unknown): asserts obj is { version: string } {\n  if (!Object.hasOwn(obj as object, 'version')) {\n    throw new Error('No version field in [project] section of pyproject.toml')\n  }\n  if (typeof (obj as { version?: unknown }).version !== 'string') {\n    throw new Error('version field in [project] section is not a string')\n  }\n}\n\n/**\n * Asserts that the given object has a 'dynamic' field which is an array of strings.\n * Throws an error if the assertion fails.\n *\n * @param obj - The object to check.\n * @throws {Error} If the object does not have a 'dynamic' field or if it is not an array of strings.\n * @returns void\n */\nfunction assertHasDynamic(obj: unknown): asserts obj is { dynamic: string[] } {\n  if (!Object.hasOwn(obj as object, 'dynamic')) {\n    throw new Error('No dynamic field in [project] section of pyproject.toml')\n  }\n  if (!Array.isArray((obj as { dynamic?: unknown }).dynamic)) {\n    throw new Error('dynamic field in [project] section is not an array')\n  }\n  for (const item of (obj as { dynamic: unknown[] }).dynamic) {\n    if (typeof item !== 'string') {\n      throw new Error(\n        'dynamic field in [project] section is not an array of strings'\n      )\n    }\n  }\n}\n\n/** Information about a Python package parsed from pyproject.toml.\n * Includes the package name, version (if specified), dynamic fields (if any),\n * and the path to the package directory.\n *\n * @example\n * ```json\n * {\n *   \"name\": \"my-package\",\n *   \"version\": \"1.0.0\",\n *   \"path\": \"/path/to/package\"\n * }\n * ```\n */\nexport interface PackageInfo {\n  name: string\n  version?: string\n  dynamic?: string[]\n  path: string\n}\n\n/**\n * Reads and parses a pyproject.toml file to extract package information.\n *\n * @param pyprojectPath - The file path to the pyproject.toml file.\n * @throws {Error} If the file does not exist, is not a file, or if required fields are missing.\n * @returns A Promise that resolves to a PackageInfo object containing the package name, version (\n * if specified), dynamic fields (if any), and the path to the package directory.\n */\nexport async function getPackageInfo(\n  pyprojectPath: string\n): Promise<PackageInfo> {\n  const stat = await fs.promises.stat(pyprojectPath)\n  if (!stat.isFile()) {\n    throw new Error(`Not a file: ${pyprojectPath}`)\n  }\n  const file = await fs.promises.readFile(pyprojectPath, 'utf8')\n  try {\n    const obj = toml.parse(file)\n    assertHasProject(obj)\n    const project = obj.project as Record<string, unknown>\n    assertHasName(project)\n    const packageInfo: PackageInfo = {\n      name: project.name,\n      path: path.dirname(path.resolve(pyprojectPath))\n    }\n    try {\n      assertHasVersion(project)\n      packageInfo.version = project.version\n    } catch {\n      // version field is optional if dynamic includes \"version\"\n      // so we ignore the error here\n      // we will get the version from python instead\n      // if version is not in dynamic, we will error below\n      assertHasDynamic(project)\n      if (!project.dynamic.includes('version')) {\n        throw new Error(\n          'No version field in [project] section of pyproject.toml'\n        )\n      }\n      packageInfo.dynamic = project.dynamic\n    }\n    return packageInfo\n  } catch (error) {\n    if (\n      Object.hasOwn(error as object, 'line') &&\n      Object.hasOwn(error as object, 'column')\n    ) {\n      throw new Error(\n        `Failed to parse ${pyprojectPath} as TOML: ${(error as Error).message} ad line ${(error as { line: number }).line}, column ${\n          (error as { column: number }).column\n        }`\n      )\n    }\n    throw error\n  }\n}\n\n/**\n * Gets the version of a Python package.\n * If the version is specified in the PackageInfo, it is returned directly.\n * If the version is dynamic, it is retrieved by installing the package and\n * importing it in Python to get the __version__ attribute.\n *\n * @param pkg - The PackageInfo object containing package details.\n * @throws {Error} If the version cannot be determined.\n * @returns A Promise that resolves to the package version as a string.\n */\nexport async function getPackageVersion(pkg: PackageInfo): Promise<string> {\n  if (pkg.version) {\n    return pkg.version\n  }\n  if (pkg.dynamic && pkg.dynamic.includes('version')) {\n    // get version from python\n    const res = await exec.getExecOutput('python3', [\n      '-m',\n      'pip',\n      'install',\n      pkg.path\n    ])\n    if (res.exitCode !== 0) {\n      throw new Error(\n        `Failed to install package at ${pkg.path}. Stdout: ${res.stdout}. Stderr: ${res.stderr}.`\n      )\n    }\n    const res2 = await exec.getExecOutput('python3', [\n      '-c',\n      `import ${pkg.name.replace(/-/g, '_')}; print(${pkg.name.replace(\n        /-/g,\n        '_'\n      )}.__version__)`\n    ])\n    if (res2.exitCode !== 0) {\n      throw new Error(\n        `Failed to get version of package ${pkg.name}. Stdout: ${res2.stdout}. Stderr: ${res2.stderr}.`\n      )\n    }\n    const version = res2.stdout.trim()\n    if (version === '') {\n      throw new Error('Failed to get version from pip')\n    }\n    return version\n  }\n  throw new Error('No version field in [project] section of pyproject.toml')\n}\n"],"names":["$kzg47$pythonversioncheckd99cbe59js","$kzg47$pythonversioncheck45fea75ejs","promises","$kzg47$promises","dirname","$kzg47$dirname","resolve","$kzg47$resolve","$83279610ce38fb08$export$cd17d76da7967240","pyprojectPath","stat","isFile","Error","file","readFile","obj","parse","Object","hasOwn","project","name","packageInfo","path","version","Array","isArray","dynamic","item","includes","error","message","line","column","$83279610ce38fb08$export$18cd124b5098d330","pkg","res","getExecOutput","exitCode","stdout","stderr","res2","replace","trim","getPackageInfo","getPackageVersion"],"version":3,"file":"python-version-check.b938519f.js.map","sourceRoot":"../"}