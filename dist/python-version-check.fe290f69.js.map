{"mappings":"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","sources":["<anon>","node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/deps/dicer/lib/HeaderParser.js"],"sourcesContent":["import $ldnhp$pythonversionchecke046c214js from \"./python-version-check.e046c214.js\";\nimport $ldnhp$pythonversioncheck2d65d83fjs from \"./python-version-check.2d65d83f.js\";\nimport {EventEmitter as $ldnhp$EventEmitter} from \"node:events\";\nimport {inherits as $ldnhp$inherits} from \"node:util\";\n\nvar $8b02ee30d5b4ecab$exports = {};\n'use strict';\n\nvar $8b02ee30d5b4ecab$require$EventEmitter = $ldnhp$EventEmitter;\n\nvar $8b02ee30d5b4ecab$require$inherits = $ldnhp$inherits;\n\n\nconst $8b02ee30d5b4ecab$var$B_DCRLF = Buffer.from('\\r\\n\\r\\n');\nconst $8b02ee30d5b4ecab$var$RE_CRLF = /\\r\\n/g;\nconst $8b02ee30d5b4ecab$var$RE_HDR = /^([^:]+):[ \\t]?([\\x00-\\xFF]+)?$/ // eslint-disable-line no-control-regex\n;\nfunction $8b02ee30d5b4ecab$var$HeaderParser(cfg) {\n    $8b02ee30d5b4ecab$require$EventEmitter.call(this);\n    cfg = cfg || {};\n    const self = this;\n    this.nread = 0;\n    this.maxed = false;\n    this.npairs = 0;\n    this.maxHeaderPairs = $ldnhp$pythonversionchecke046c214js(cfg, 'maxHeaderPairs', 2000);\n    this.maxHeaderSize = $ldnhp$pythonversionchecke046c214js(cfg, 'maxHeaderSize', 81920);\n    this.buffer = '';\n    this.header = {};\n    this.finished = false;\n    this.ss = new $ldnhp$pythonversioncheck2d65d83fjs($8b02ee30d5b4ecab$var$B_DCRLF);\n    this.ss.on('info', function(isMatch, data, start, end) {\n        if (data && !self.maxed) {\n            if (self.nread + end - start >= self.maxHeaderSize) {\n                end = self.maxHeaderSize - self.nread + start;\n                self.nread = self.maxHeaderSize;\n                self.maxed = true;\n            } else self.nread += end - start;\n            self.buffer += data.toString('binary', start, end);\n        }\n        if (isMatch) self._finish();\n    });\n}\n$8b02ee30d5b4ecab$require$inherits($8b02ee30d5b4ecab$var$HeaderParser, $8b02ee30d5b4ecab$require$EventEmitter);\n$8b02ee30d5b4ecab$var$HeaderParser.prototype.push = function(data) {\n    const r = this.ss.push(data);\n    if (this.finished) return r;\n};\n$8b02ee30d5b4ecab$var$HeaderParser.prototype.reset = function() {\n    this.finished = false;\n    this.buffer = '';\n    this.header = {};\n    this.ss.reset();\n};\n$8b02ee30d5b4ecab$var$HeaderParser.prototype._finish = function() {\n    if (this.buffer) this._parseHeader();\n    this.ss.matches = this.ss.maxMatches;\n    const header = this.header;\n    this.header = {};\n    this.buffer = '';\n    this.finished = true;\n    this.nread = this.npairs = 0;\n    this.maxed = false;\n    this.emit('header', header);\n};\n$8b02ee30d5b4ecab$var$HeaderParser.prototype._parseHeader = function() {\n    if (this.npairs === this.maxHeaderPairs) return;\n    const lines = this.buffer.split($8b02ee30d5b4ecab$var$RE_CRLF);\n    const len = lines.length;\n    let m, h;\n    for(var i = 0; i < len; ++i){\n        if (lines[i].length === 0) continue;\n        if (lines[i][0] === '\\t' || lines[i][0] === ' ') // folded header content\n        // RFC2822 says to just remove the CRLF and not the whitespace following\n        // it, so we follow the RFC and include the leading whitespace ...\n        {\n            if (h) {\n                this.header[h][this.header[h].length - 1] += lines[i];\n                continue;\n            }\n        }\n        const posColon = lines[i].indexOf(':');\n        if (posColon === -1 || posColon === 0) return;\n        m = $8b02ee30d5b4ecab$var$RE_HDR.exec(lines[i]);\n        h = m[1].toLowerCase();\n        this.header[h] = this.header[h] || [];\n        this.header[h].push(m[2] || '');\n        if (++this.npairs === this.maxHeaderPairs) break;\n    }\n};\n$8b02ee30d5b4ecab$exports = $8b02ee30d5b4ecab$var$HeaderParser;\n\n\nexport {$8b02ee30d5b4ecab$exports as default};\n//# sourceMappingURL=python-version-check.fe290f69.js.map\n","'use strict'\n\nconst EventEmitter = require('node:events').EventEmitter\nconst inherits = require('node:util').inherits\nconst getLimit = require('../../../lib/utils/getLimit')\n\nconst StreamSearch = require('../../streamsearch/sbmh')\n\nconst B_DCRLF = Buffer.from('\\r\\n\\r\\n')\nconst RE_CRLF = /\\r\\n/g\nconst RE_HDR = /^([^:]+):[ \\t]?([\\x00-\\xFF]+)?$/ // eslint-disable-line no-control-regex\n\nfunction HeaderParser (cfg) {\n  EventEmitter.call(this)\n\n  cfg = cfg || {}\n  const self = this\n  this.nread = 0\n  this.maxed = false\n  this.npairs = 0\n  this.maxHeaderPairs = getLimit(cfg, 'maxHeaderPairs', 2000)\n  this.maxHeaderSize = getLimit(cfg, 'maxHeaderSize', 80 * 1024)\n  this.buffer = ''\n  this.header = {}\n  this.finished = false\n  this.ss = new StreamSearch(B_DCRLF)\n  this.ss.on('info', function (isMatch, data, start, end) {\n    if (data && !self.maxed) {\n      if (self.nread + end - start >= self.maxHeaderSize) {\n        end = self.maxHeaderSize - self.nread + start\n        self.nread = self.maxHeaderSize\n        self.maxed = true\n      } else { self.nread += (end - start) }\n\n      self.buffer += data.toString('binary', start, end)\n    }\n    if (isMatch) { self._finish() }\n  })\n}\ninherits(HeaderParser, EventEmitter)\n\nHeaderParser.prototype.push = function (data) {\n  const r = this.ss.push(data)\n  if (this.finished) { return r }\n}\n\nHeaderParser.prototype.reset = function () {\n  this.finished = false\n  this.buffer = ''\n  this.header = {}\n  this.ss.reset()\n}\n\nHeaderParser.prototype._finish = function () {\n  if (this.buffer) { this._parseHeader() }\n  this.ss.matches = this.ss.maxMatches\n  const header = this.header\n  this.header = {}\n  this.buffer = ''\n  this.finished = true\n  this.nread = this.npairs = 0\n  this.maxed = false\n  this.emit('header', header)\n}\n\nHeaderParser.prototype._parseHeader = function () {\n  if (this.npairs === this.maxHeaderPairs) { return }\n\n  const lines = this.buffer.split(RE_CRLF)\n  const len = lines.length\n  let m, h\n\n  for (var i = 0; i < len; ++i) { // eslint-disable-line no-var\n    if (lines[i].length === 0) { continue }\n    if (lines[i][0] === '\\t' || lines[i][0] === ' ') {\n      // folded header content\n      // RFC2822 says to just remove the CRLF and not the whitespace following\n      // it, so we follow the RFC and include the leading whitespace ...\n      if (h) {\n        this.header[h][this.header[h].length - 1] += lines[i]\n        continue\n      }\n    }\n\n    const posColon = lines[i].indexOf(':')\n    if (\n      posColon === -1 ||\n      posColon === 0\n    ) {\n      return\n    }\n    m = RE_HDR.exec(lines[i])\n    h = m[1].toLowerCase()\n    this.header[h] = this.header[h] || []\n    this.header[h].push((m[2] || ''))\n    if (++this.npairs === this.maxHeaderPairs) { break }\n  }\n}\n\nmodule.exports = HeaderParser\n"],"names":["$ldnhp$pythonversionchecke046c214js","$ldnhp$pythonversioncheck2d65d83fjs","EventEmitter","$ldnhp$EventEmitter","inherits","$ldnhp$inherits","$8b02ee30d5b4ecab$exports","$8b02ee30d5b4ecab$var$B_DCRLF","Buffer","from","$8b02ee30d5b4ecab$var$RE_CRLF","$8b02ee30d5b4ecab$var$RE_HDR","$8b02ee30d5b4ecab$var$HeaderParser","cfg","$8b02ee30d5b4ecab$require$EventEmitter","call","self","nread","maxed","npairs","maxHeaderPairs","maxHeaderSize","buffer","header","finished","ss","on","isMatch","data","start","end","toString","_finish","$8b02ee30d5b4ecab$require$inherits","prototype","push","r","reset","_parseHeader","matches","maxMatches","emit","m","h","lines","split","len","length","i","posColon","indexOf","exec","toLowerCase","default"],"version":3,"file":"python-version-check.fe290f69.js.map","sourceRoot":"../"}