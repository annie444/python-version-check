{"mappings":"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","sources":["<anon>","node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/mock/mock-agent.js"],"sourcesContent":["import $kquNL$pythonversioncheckebf2a848js from \"./python-version-check.ebf2a848.js\";\nimport $kquNL$pythonversioncheckc2bfca41js from \"./python-version-check.c2bfca41.js\";\nimport $kquNL$pythonversioncheck32039d93js8 from \"./python-version-check.32039d93.js\";\nimport $kquNL$pythonversioncheckdb8ab2ecjs from \"./python-version-check.db8ab2ec.js\";\nimport $kquNL$pythonversioncheckbf240021js from \"./python-version-check.bf240021.js\";\nimport $kquNL$pythonversioncheck3b10f8a1js1 from \"./python-version-check.3b10f8a1.js\";\nimport $kquNL$pythonversioncheckdba5a2d4js1 from \"./python-version-check.dba5a2d4.js\";\nimport $kquNL$pythonversioncheck8a1cf8f2js from \"./python-version-check.8a1cf8f2.js\";\nimport $kquNL$pythonversioncheckdc34f68ejs from \"./python-version-check.dc34f68e.js\";\nimport $kquNL$pythonversionchecke16482cfjs from \"./python-version-check.e16482cf.js\";\n\nvar $ca5177b86490f3b7$exports = {};\n'use strict';\n\nvar $ca5177b86490f3b7$require$kClients = $kquNL$pythonversioncheckebf2a848js.kClients;\n\n\nvar $ca5177b86490f3b7$require$kAgent = $kquNL$pythonversioncheck32039d93js.kAgent;\nvar $ca5177b86490f3b7$require$kMockAgentSet = $kquNL$pythonversioncheck32039d93js6.kMockAgentSet;\nvar $ca5177b86490f3b7$require$kMockAgentGet = $kquNL$pythonversioncheck32039d93js5.kMockAgentGet;\nvar $ca5177b86490f3b7$require$kDispatches = $kquNL$pythonversioncheck32039d93js1.kDispatches;\nvar $ca5177b86490f3b7$require$kIsMockActive = $kquNL$pythonversioncheck32039d93js4.kIsMockActive;\nvar $ca5177b86490f3b7$require$kNetConnect = $kquNL$pythonversioncheck32039d93js7.kNetConnect;\nvar $ca5177b86490f3b7$require$kGetNetConnect = $kquNL$pythonversioncheck32039d93js3.kGetNetConnect;\nvar $ca5177b86490f3b7$require$kOptions = $kquNL$pythonversioncheck32039d93js8.kOptions;\nvar $ca5177b86490f3b7$require$kFactory = $kquNL$pythonversioncheck32039d93js2.kFactory;\n\n\n\nvar $ca5177b86490f3b7$require$matchValue = $kquNL$pythonversioncheck3b10f8a1js1.matchValue;\nvar $ca5177b86490f3b7$require$buildMockOptions = $kquNL$pythonversioncheck3b10f8a1js.buildMockOptions;\n\nvar $ca5177b86490f3b7$require$InvalidArgumentError = $kquNL$pythonversioncheckdba5a2d4js.InvalidArgumentError;\nvar $ca5177b86490f3b7$require$UndiciError = $kquNL$pythonversioncheckdba5a2d4js1.UndiciError;\n\n\n\nclass $ca5177b86490f3b7$var$FakeWeakRef {\n    constructor(value){\n        this.value = value;\n    }\n    deref() {\n        return this.value;\n    }\n}\nclass $ca5177b86490f3b7$var$MockAgent extends $kquNL$pythonversioncheck8a1cf8f2js {\n    constructor(opts){\n        super(opts);\n        this[$ca5177b86490f3b7$require$kNetConnect] = true;\n        this[$ca5177b86490f3b7$require$kIsMockActive] = true;\n        // Instantiate Agent and encapsulate\n        if (opts && opts.agent && typeof opts.agent.dispatch !== 'function') throw new $ca5177b86490f3b7$require$InvalidArgumentError('Argument opts.agent must implement Agent');\n        const agent = opts && opts.agent ? opts.agent : new $kquNL$pythonversioncheckc2bfca41js(opts);\n        this[$ca5177b86490f3b7$require$kAgent] = agent;\n        this[$ca5177b86490f3b7$require$kClients] = agent[$ca5177b86490f3b7$require$kClients];\n        this[$ca5177b86490f3b7$require$kOptions] = $ca5177b86490f3b7$require$buildMockOptions(opts);\n    }\n    get(origin) {\n        let dispatcher = this[$ca5177b86490f3b7$require$kMockAgentGet](origin);\n        if (!dispatcher) {\n            dispatcher = this[$ca5177b86490f3b7$require$kFactory](origin);\n            this[$ca5177b86490f3b7$require$kMockAgentSet](origin, dispatcher);\n        }\n        return dispatcher;\n    }\n    dispatch(opts, handler) {\n        // Call MockAgent.get to perform additional setup before dispatching as normal\n        this.get(opts.origin);\n        return this[$ca5177b86490f3b7$require$kAgent].dispatch(opts, handler);\n    }\n    async close() {\n        await this[$ca5177b86490f3b7$require$kAgent].close();\n        this[$ca5177b86490f3b7$require$kClients].clear();\n    }\n    deactivate() {\n        this[$ca5177b86490f3b7$require$kIsMockActive] = false;\n    }\n    activate() {\n        this[$ca5177b86490f3b7$require$kIsMockActive] = true;\n    }\n    enableNetConnect(matcher) {\n        if (typeof matcher === 'string' || typeof matcher === 'function' || matcher instanceof RegExp) {\n            if (Array.isArray(this[$ca5177b86490f3b7$require$kNetConnect])) this[$ca5177b86490f3b7$require$kNetConnect].push(matcher);\n            else this[$ca5177b86490f3b7$require$kNetConnect] = [\n                matcher\n            ];\n        } else if (typeof matcher === 'undefined') this[$ca5177b86490f3b7$require$kNetConnect] = true;\n        else throw new $ca5177b86490f3b7$require$InvalidArgumentError('Unsupported matcher. Must be one of String|Function|RegExp.');\n    }\n    disableNetConnect() {\n        this[$ca5177b86490f3b7$require$kNetConnect] = false;\n    }\n    // This is required to bypass issues caused by using global symbols - see:\n    // https://github.com/nodejs/undici/issues/1447\n    get isMockActive() {\n        return this[$ca5177b86490f3b7$require$kIsMockActive];\n    }\n    [$ca5177b86490f3b7$require$kMockAgentSet](origin, dispatcher) {\n        this[$ca5177b86490f3b7$require$kClients].set(origin, new $ca5177b86490f3b7$var$FakeWeakRef(dispatcher));\n    }\n    [$ca5177b86490f3b7$require$kFactory](origin) {\n        const mockOptions = Object.assign({\n            agent: this\n        }, this[$ca5177b86490f3b7$require$kOptions]);\n        return this[$ca5177b86490f3b7$require$kOptions] && this[$ca5177b86490f3b7$require$kOptions].connections === 1 ? new $kquNL$pythonversioncheckdb8ab2ecjs(origin, mockOptions) : new $kquNL$pythonversioncheckbf240021js(origin, mockOptions);\n    }\n    [$ca5177b86490f3b7$require$kMockAgentGet](origin) {\n        // First check if we can immediately find it\n        const ref = this[$ca5177b86490f3b7$require$kClients].get(origin);\n        if (ref) return ref.deref();\n        // If the origin is not a string create a dummy parent pool and return to user\n        if (typeof origin !== 'string') {\n            const dispatcher = this[$ca5177b86490f3b7$require$kFactory]('http://localhost:9999');\n            this[$ca5177b86490f3b7$require$kMockAgentSet](origin, dispatcher);\n            return dispatcher;\n        }\n        // If we match, create a pool and assign the same dispatches\n        for (const [keyMatcher, nonExplicitRef] of Array.from(this[$ca5177b86490f3b7$require$kClients])){\n            const nonExplicitDispatcher = nonExplicitRef.deref();\n            if (nonExplicitDispatcher && typeof keyMatcher !== 'string' && $ca5177b86490f3b7$require$matchValue(keyMatcher, origin)) {\n                const dispatcher = this[$ca5177b86490f3b7$require$kFactory](origin);\n                this[$ca5177b86490f3b7$require$kMockAgentSet](origin, dispatcher);\n                dispatcher[$ca5177b86490f3b7$require$kDispatches] = nonExplicitDispatcher[$ca5177b86490f3b7$require$kDispatches];\n                return dispatcher;\n            }\n        }\n    }\n    [$ca5177b86490f3b7$require$kGetNetConnect]() {\n        return this[$ca5177b86490f3b7$require$kNetConnect];\n    }\n    pendingInterceptors() {\n        const mockAgentClients = this[$ca5177b86490f3b7$require$kClients];\n        return Array.from(mockAgentClients.entries()).flatMap(([origin, scope])=>scope.deref()[$ca5177b86490f3b7$require$kDispatches].map((dispatch)=>({\n                    ...dispatch,\n                    origin: origin\n                }))).filter(({ pending: pending })=>pending);\n    }\n    assertNoPendingInterceptors({ pendingInterceptorsFormatter: pendingInterceptorsFormatter = new $kquNL$pythonversionchecke16482cfjs() } = {}) {\n        const pending = this.pendingInterceptors();\n        if (pending.length === 0) return;\n        const pluralizer = new $kquNL$pythonversioncheckdc34f68ejs('interceptor', 'interceptors').pluralize(pending.length);\n        throw new $ca5177b86490f3b7$require$UndiciError(`\n${pluralizer.count} ${pluralizer.noun} ${pluralizer.is} pending:\n\n${pendingInterceptorsFormatter.format(pending)}\n`.trim());\n    }\n}\n$ca5177b86490f3b7$exports = $ca5177b86490f3b7$var$MockAgent;\n\n\nexport {$ca5177b86490f3b7$exports as default};\n//# sourceMappingURL=python-version-check.252dd520.js.map\n","'use strict'\n\nconst { kClients } = require('../core/symbols')\nconst Agent = require('../agent')\nconst {\n  kAgent,\n  kMockAgentSet,\n  kMockAgentGet,\n  kDispatches,\n  kIsMockActive,\n  kNetConnect,\n  kGetNetConnect,\n  kOptions,\n  kFactory\n} = require('./mock-symbols')\nconst MockClient = require('./mock-client')\nconst MockPool = require('./mock-pool')\nconst { matchValue, buildMockOptions } = require('./mock-utils')\nconst { InvalidArgumentError, UndiciError } = require('../core/errors')\nconst Dispatcher = require('../dispatcher')\nconst Pluralizer = require('./pluralizer')\nconst PendingInterceptorsFormatter = require('./pending-interceptors-formatter')\n\nclass FakeWeakRef {\n  constructor (value) {\n    this.value = value\n  }\n\n  deref () {\n    return this.value\n  }\n}\n\nclass MockAgent extends Dispatcher {\n  constructor (opts) {\n    super(opts)\n\n    this[kNetConnect] = true\n    this[kIsMockActive] = true\n\n    // Instantiate Agent and encapsulate\n    if ((opts && opts.agent && typeof opts.agent.dispatch !== 'function')) {\n      throw new InvalidArgumentError('Argument opts.agent must implement Agent')\n    }\n    const agent = opts && opts.agent ? opts.agent : new Agent(opts)\n    this[kAgent] = agent\n\n    this[kClients] = agent[kClients]\n    this[kOptions] = buildMockOptions(opts)\n  }\n\n  get (origin) {\n    let dispatcher = this[kMockAgentGet](origin)\n\n    if (!dispatcher) {\n      dispatcher = this[kFactory](origin)\n      this[kMockAgentSet](origin, dispatcher)\n    }\n    return dispatcher\n  }\n\n  dispatch (opts, handler) {\n    // Call MockAgent.get to perform additional setup before dispatching as normal\n    this.get(opts.origin)\n    return this[kAgent].dispatch(opts, handler)\n  }\n\n  async close () {\n    await this[kAgent].close()\n    this[kClients].clear()\n  }\n\n  deactivate () {\n    this[kIsMockActive] = false\n  }\n\n  activate () {\n    this[kIsMockActive] = true\n  }\n\n  enableNetConnect (matcher) {\n    if (typeof matcher === 'string' || typeof matcher === 'function' || matcher instanceof RegExp) {\n      if (Array.isArray(this[kNetConnect])) {\n        this[kNetConnect].push(matcher)\n      } else {\n        this[kNetConnect] = [matcher]\n      }\n    } else if (typeof matcher === 'undefined') {\n      this[kNetConnect] = true\n    } else {\n      throw new InvalidArgumentError('Unsupported matcher. Must be one of String|Function|RegExp.')\n    }\n  }\n\n  disableNetConnect () {\n    this[kNetConnect] = false\n  }\n\n  // This is required to bypass issues caused by using global symbols - see:\n  // https://github.com/nodejs/undici/issues/1447\n  get isMockActive () {\n    return this[kIsMockActive]\n  }\n\n  [kMockAgentSet] (origin, dispatcher) {\n    this[kClients].set(origin, new FakeWeakRef(dispatcher))\n  }\n\n  [kFactory] (origin) {\n    const mockOptions = Object.assign({ agent: this }, this[kOptions])\n    return this[kOptions] && this[kOptions].connections === 1\n      ? new MockClient(origin, mockOptions)\n      : new MockPool(origin, mockOptions)\n  }\n\n  [kMockAgentGet] (origin) {\n    // First check if we can immediately find it\n    const ref = this[kClients].get(origin)\n    if (ref) {\n      return ref.deref()\n    }\n\n    // If the origin is not a string create a dummy parent pool and return to user\n    if (typeof origin !== 'string') {\n      const dispatcher = this[kFactory]('http://localhost:9999')\n      this[kMockAgentSet](origin, dispatcher)\n      return dispatcher\n    }\n\n    // If we match, create a pool and assign the same dispatches\n    for (const [keyMatcher, nonExplicitRef] of Array.from(this[kClients])) {\n      const nonExplicitDispatcher = nonExplicitRef.deref()\n      if (nonExplicitDispatcher && typeof keyMatcher !== 'string' && matchValue(keyMatcher, origin)) {\n        const dispatcher = this[kFactory](origin)\n        this[kMockAgentSet](origin, dispatcher)\n        dispatcher[kDispatches] = nonExplicitDispatcher[kDispatches]\n        return dispatcher\n      }\n    }\n  }\n\n  [kGetNetConnect] () {\n    return this[kNetConnect]\n  }\n\n  pendingInterceptors () {\n    const mockAgentClients = this[kClients]\n\n    return Array.from(mockAgentClients.entries())\n      .flatMap(([origin, scope]) => scope.deref()[kDispatches].map(dispatch => ({ ...dispatch, origin })))\n      .filter(({ pending }) => pending)\n  }\n\n  assertNoPendingInterceptors ({ pendingInterceptorsFormatter = new PendingInterceptorsFormatter() } = {}) {\n    const pending = this.pendingInterceptors()\n\n    if (pending.length === 0) {\n      return\n    }\n\n    const pluralizer = new Pluralizer('interceptor', 'interceptors').pluralize(pending.length)\n\n    throw new UndiciError(`\n${pluralizer.count} ${pluralizer.noun} ${pluralizer.is} pending:\n\n${pendingInterceptorsFormatter.format(pending)}\n`.trim())\n  }\n}\n\nmodule.exports = MockAgent\n"],"names":["$kquNL$pythonversioncheckebf2a848js","$kquNL$pythonversioncheckc2bfca41js","$kquNL$pythonversioncheck32039d93js8","$kquNL$pythonversioncheckdb8ab2ecjs","$kquNL$pythonversioncheckbf240021js","$kquNL$pythonversioncheck3b10f8a1js1","$kquNL$pythonversioncheckdba5a2d4js1","$kquNL$pythonversioncheck8a1cf8f2js","$kquNL$pythonversioncheckdc34f68ejs","$kquNL$pythonversionchecke16482cfjs","$ca5177b86490f3b7$exports","$ca5177b86490f3b7$require$kClients","kClients","$ca5177b86490f3b7$require$kAgent","$kquNL$pythonversioncheck32039d93js","kAgent","$ca5177b86490f3b7$require$kMockAgentSet","$kquNL$pythonversioncheck32039d93js6","kMockAgentSet","$ca5177b86490f3b7$require$kMockAgentGet","$kquNL$pythonversioncheck32039d93js5","kMockAgentGet","$ca5177b86490f3b7$require$kDispatches","$kquNL$pythonversioncheck32039d93js1","kDispatches","$ca5177b86490f3b7$require$kIsMockActive","$kquNL$pythonversioncheck32039d93js4","kIsMockActive","$ca5177b86490f3b7$require$kNetConnect","$kquNL$pythonversioncheck32039d93js7","kNetConnect","$ca5177b86490f3b7$require$kGetNetConnect","$kquNL$pythonversioncheck32039d93js3","kGetNetConnect","$ca5177b86490f3b7$require$kOptions","kOptions","$ca5177b86490f3b7$require$kFactory","$kquNL$pythonversioncheck32039d93js2","kFactory","$ca5177b86490f3b7$require$matchValue","matchValue","$ca5177b86490f3b7$require$buildMockOptions","$kquNL$pythonversioncheck3b10f8a1js","buildMockOptions","$ca5177b86490f3b7$require$InvalidArgumentError","$kquNL$pythonversioncheckdba5a2d4js","InvalidArgumentError","$ca5177b86490f3b7$require$UndiciError","UndiciError","$ca5177b86490f3b7$var$FakeWeakRef","value","deref","opts","agent","dispatch","get","origin","dispatcher","handler","close","clear","deactivate","activate","enableNetConnect","matcher","RegExp","Array","isArray","push","disableNetConnect","isMockActive","set","mockOptions","Object","assign","connections","ref","keyMatcher","nonExplicitRef","from","nonExplicitDispatcher","pendingInterceptors","mockAgentClients","entries","flatMap","scope","map","filter","pending","assertNoPendingInterceptors","pendingInterceptorsFormatter","length","pluralizer","pluralize","count","noun","is","format","trim","default"],"version":3,"file":"python-version-check.252dd520.js.map","sourceRoot":"../"}