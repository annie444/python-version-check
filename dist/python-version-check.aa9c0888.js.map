{"mappings":"A,O,M,qD,CCEO,eAAe,EACpB,CAAa,CACb,CAAmB,EAGnB,IAAM,EAAO,IAAI,EAAA,UAAA,CAAkB,uBAAwB,EAAE,CAAE,CAC7D,aAAc,CAAA,EACd,WAAY,CACd,GACM,EAAM,CAAA,EAAG,EAAM,CAAC,EAAE,EAAA,CAAa,CAErC,GAAI,CACF,IAAM,EAAO,MAAM,EAAK,GAAG,CAAC,EAFd,CAAE,OAAQ,qCAAsC,GAG9D,GAAI,AAA4B,MAA5B,EAAK,OAAO,CAAC,UAAU,CACzB,MAAO,EAAE,CAEX,GAAI,EAAK,OAAO,CAAC,UAAU,EAAI,EAAK,OAAO,CAAC,UAAU,EAAI,IACxD,MAAM,AAAI,MACR,CAAA,EAAG,EAAM,OAAO,EAAE,EAAK,OAAO,CAAC,UAAU,CAAC,yBAAyB,CAAC,EAGxE,IAAM,EAAU,MAAM,EAAK,QAAQ,GAC7B,EAAO,KAAK,KAAK,CAAC,GAClB,EAAwB,IAAI,IAClC,IAAK,IAAM,KAAQ,EAAK,KAAK,CAAE,CAE7B,IAAI,EAAM,AADW,EAAK,QAAQ,CACnB,OAAO,CAAC,CAAA,EAAG,EAAY,OAAO,CAAC,KAAM,KAAK,CAAC,CAAC,CAAE,IAC7D,EAAM,EAAI,KAAK,CAAC,IAAK,EAAE,CAAC,EAAE,CAAC,OAAO,CAAC,UAAW,IAAI,OAAO,CAAC,OAAQ,IAClE,EAAS,GAAG,CAAC,EACf,CACA,OAAO,AAAI,SAAS,GAAU,IAAI,EACpC,CAAE,MAAO,EAAY,CAEnB,MAAM,AAAI,MAAM,CAAA,EAAG,EAAM,EAAE,EAAE,AADhB,EACqB,OAAO,CAAC,yBAAyB,CAAC,CACtE,CACF,Q,K,U","sources":["<anon>","src/query.ts"],"sourcesContent":["import $kbTgR$pythonversioncheckc435cc7fjs from \"./python-version-check.c435cc7f.js\";\n\n\nasync function $022ca5c9575aea33$export$746251fb0c041440(index, packageName) {\n    // Return list of versions; null on network / JSON errors.\n    const http = new $kbTgR$pythonversioncheckc435cc7fjs.HttpClient('pypi-versions-action', [], {\n        allowRetries: true,\n        maxRetries: 3\n    });\n    const url = `${index}/${packageName}`;\n    const headers = {\n        Accept: 'application/vnd.pypi.simple.v1+json'\n    };\n    try {\n        const resp = await http.get(url, headers);\n        if (resp.message.statusCode === 404) return [];\n        if (resp.message.statusCode && resp.message.statusCode >= 400) throw new Error(`${index}: HTTP ${resp.message.statusCode} - treated as unavailable`);\n        const payload = await resp.readBody();\n        const data = JSON.parse(payload);\n        const versions = new Set();\n        for (const file of data.files){\n            const name = file.filename;\n            let ver = name.replace(`${packageName.replace(/-/g, '_')}-`, '');\n            ver = ver.split('-', 3)[0].replace('.tar.gz', '').replace('.zip', '');\n            versions.add(ver);\n        }\n        return new Array(...versions).sort();\n    } catch (e) {\n        const eObj = e;\n        throw new Error(`${index}: ${eObj.message} - treated as unavailable`);\n    }\n}\n\n\nexport {$022ca5c9575aea33$export$746251fb0c041440 as queryIndex};\n//# sourceMappingURL=python-version-check.aa9c0888.js.map\n","import * as client from '@actions/http-client'\n\nexport async function queryIndex(\n  index: string,\n  packageName: string\n): Promise<string[] | null> {\n  // Return list of versions; null on network / JSON errors.\n  const http = new client.HttpClient('pypi-versions-action', [], {\n    allowRetries: true,\n    maxRetries: 3\n  })\n  const url = `${index}/${packageName}`\n  const headers = { Accept: 'application/vnd.pypi.simple.v1+json' }\n  try {\n    const resp = await http.get(url, headers)\n    if (resp.message.statusCode === 404) {\n      return []\n    }\n    if (resp.message.statusCode && resp.message.statusCode >= 400) {\n      throw new Error(\n        `${index}: HTTP ${resp.message.statusCode} - treated as unavailable`\n      )\n    }\n    const payload = await resp.readBody()\n    const data = JSON.parse(payload)\n    const versions: Set<string> = new Set<string>()\n    for (const file of data.files) {\n      const name: string = file.filename\n      let ver = name.replace(`${packageName.replace(/-/g, '_')}-`, '')\n      ver = ver.split('-', 3)[0].replace('.tar.gz', '').replace('.zip', '')\n      versions.add(ver)\n    }\n    return new Array(...versions).sort()\n  } catch (e: unknown) {\n    const eObj = e as Error\n    throw new Error(`${index}: ${eObj.message} - treated as unavailable`)\n  }\n}\n"],"names":["$kbTgR$pythonversioncheckc435cc7fjs","$022ca5c9575aea33$export$746251fb0c041440","index","packageName","http","HttpClient","allowRetries","maxRetries","url","resp","get","Accept","message","statusCode","Error","payload","readBody","data","JSON","parse","versions","Set","file","files","ver","name","filename","replace","split","add","Array","sort","e","eObj","queryIndex"],"version":3,"file":"python-version-check.aa9c0888.js.map","sourceRoot":"../"}