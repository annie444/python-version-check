name: CI & Release

on:
  push:
  pull_request:

jobs:
  tests:
    name: Integration tests
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include:
          - case: already_published_pypi
            path: tests/fixtures/already_published/pypi.org/pyproject.toml
            index: "https://pypi.org/simple"
            expected_pypi_org: "true"

          - case: needs_publishing_pypi
            path: tests/fixtures/needs_publishing/pypi.org/pyproject.toml
            index: "https://pypi.org/simple"
            expected_pypi_org: "false"

          - case: already_published_pypi_test
            path: tests/fixtures/already_published/test.pypi.org/pyproject.toml
            index: "https://test.pypi.org/simple"
            expected_test_pypi_org: "true"

          - case: needs_publishing_pypi_test
            path: tests/fixtures/needs_publishing/test.pypi.org/pyproject.toml
            index: "https://test.pypi.org/simple"
            expected_test_pypi_org: "false"

          - case: already_published_dynamic
            path: tests/fixtures/already_published/test_dynamic/pyproject.toml
            index: "https://pypi.org/simple"
            expected_pypi_org: "true"

          - case: needs_published_dynamic
            path: tests/fixtures/needs_publishing/test_dynamic/pyproject.toml
            index: "https://pypi.org/simple"
            expected_pypi_org: "true"
    steps:
      - uses: actions/checkout@v5

      - name: Setup python
        uses: actions/setup-python@v6
        with:
          python-version: "3.13"

      - name: Run version-check (${{ matrix.case }})
        id: check
        uses: ./
        with:
          path: ${{ matrix.path }}
          index: ${{ matrix.index }}

      - name: Assertions
        shell: bash
        run: |
          set -euo pipefail
          echo "üîé Outputs:"
          echo "Name:    ${{ steps.check.outputs.package_name }}"
          echo "Version: ${{ steps.check.outputs.package_version }}"
          echo "Exists:  ${{ steps.check.outputs.current_version_exists }}"

          # Pick expected value for this matrix case
          expected="${{ matrix.expected_pypi_org || matrix.expected_test_pypi_org }}"

          if [[ -z "$expected" ]]; then
            echo "::error::‚ùå Expected value not set in matrix."; exit 1
          fi

          if [[ "${{ steps.check.outputs.current_version_exists }}" != "$expected" ]]; then
            echo "::error::‚ùå current_version_exists output mismatch"
            echo "Expected: $expected"
            echo "Got:      ${{ steps.check.outputs.current_version_exists }}"
            exit 1
          fi

          if [[ -z "${{ steps.check.outputs.package_version }}" ]]; then
            echo "::error::‚ùå package_version output is empty"
            exit 1
          fi

          if [[ -z "${{ steps.check.outputs.package_name }}" ]]; then
            echo "::error::‚ùå package_name output is empty"
            exit 1
          fi

          echo "‚úÖ Assertions passed for ${{ matrix.case }}"

  release:
    name: Draft GitHub Release
    needs: tests
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - name: Draft release notes
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          generate_release_notes: true

      - name: Move major tag (vX ‚Üí this commit)
        env:
          TAG: ${{ github.ref_name }}
          GH_TOKEN: ${{ github.token }}
        run: |
          major=${TAG%%.*}
          git tag -f "$major" "$TAG"
          git push -f origin "$major"

      - name: Move latest tag
        env:
          TAG: ${{ github.ref_name }}
          GH_TOKEN: ${{ github.token }}
        run: |
          git tag -f "latest" "$TAG"
          git push -f origin "latest"

      - name: Move stable tag
        env:
          TAG: ${{ github.ref_name }}
          GH_TOKEN: ${{ github.token }}
        run: |
          git tag -f "stable" "$TAG"
          git push -f origin "stable"
